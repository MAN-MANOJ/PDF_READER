{
    "1": {
        "text": "lOMoAR cPSD|26885763 \n \n1 | P a g e  \n \nCS3691 EMBEDDED SYSTEMS AND IOT  \n       \n     L T P C \n      3 0 2 4 \nCOURSE OBJECTIVES: \n To learn the internal architecture and programming of an embedded processor. \n To introduce interfacing I/O devices to the processor. \n To introduce the evolution of the Internet of Things (IoT). \n To build a small low-cost embedded and IoT system using Arduino/RaspberryPi/ \nopenplatform. \n To apply the concept of Internet of Things in real world scenario. \n \nUNIT I 8-BIT EMBEDDED PROCESSOR  \n \n \n \n \n \n8-\nBit Microcontroller – Architecture – Instruction Set and Programming – Programming \nParallel Ports – Timers and Serial Port – Interrupt Handling. \n \nUNIT II EMBEDDED C PROGRAMMING  \n \n \n \n \n \n \nMemory And I/O Devices Interfacing – Programming Embedded Systems in C – Need For \nRTOS – Multiple Tasks and Processes – Context Switching – Priority Based Scheduling \nPolicies. \n \nUNIT III IOT AND ARDUINO PROGRAMMING  \n \n \n \n \n \nIntroduction to the Concept of IoT Devices – IoT Devices Versus \nComputers – IoT Configurations – Basic Components – Introduction to Arduino – Types of \nArduino– Arduino Toolchain – Arduino Programming Structure – Sketches – Pins – \nInput/Output From Pins Using Sketches – Introduction to Arduino Shields – Integration of \nSensors and Actuators with Arduino. \n \nUNIT IV IOT COMMUNICATION AND OPEN PLATFORMS  \n \n \n \nIoT Communication Models and APIs – IoT Communication Protocols – Bluetooth – WiFi – \nZigBee– GPS – GSM modules – Open Platform (like Raspberry Pi) – Architecture – \nProgramming –Interfacing – Accessing GPIO Pins – Sending and Receiving Signals Using \nGPIO Pins –Connecting to the Cloud. \n \n \n \n \n \n \n \n \n \n \nUNIT V APPLICATIONS DEVELOPMENT \n \n \n \n \n \n  \nComplete Design of Embedded Systems – Development of IoT Applications – Home \nAutomation –Smart Agriculture – Smart Cities – Smart Healthcare. \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_1_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_1_img_2.png"
        ]
    },
    "2": {
        "text": "lOMoAR cPSD|26885763 \n \n2 | P a g e  \n \n \n \n \n \nUNIT I \n \n8-BIT EMBEDDED PROCESSOR \n \n \n▪ 8-Bit Microcontroller  \n▪ Architecture \n▪ Instruction Set and Programming \n▪ Programming Parallel Ports \n▪ Timers and Serial Port \n▪ Interrupt Handling. \n \n \n",
        "images": []
    },
    "3": {
        "text": "lOMoAR cPSD|26885763 \n \n3 | P a g e  \n \n1.1. 8051 Microcontroller \n8051 microcontroller is an 8-bit microcontroller created in 1981 by Intel Corporation. It has \nan 8-bit processor that simply means that it operates on 8-bit data at a time. It is among the \nmost popular and commonly used microcontroller. \nAs it is an 8-bit microcontroller thus has 8-bit data bus, 16-bit address bus. Along with that, it \nholds 4 KB ROM with 128 bytes RAM.  \n \n1.1.1. What a Microcontroller is? \nA microcontroller is an integrated chip designed under Very Large Scale Integration \ntechnique that consists of a processor with other peripheral units like memory, I/O port, \ntimer, decoder, ADC etc. A microcontroller is basically designed in such a way that all the \nworking peripherals are embedded in a single chip with the processor. \n \nAny programmable device holds a processor, memory, I/O ports and timer within it. But a \nmicrocontroller contains all these components embedded in a single chip. This single-chip \nmanages the overall operation of the device. \nA microprocessor simply contains a CPU that processes the operations with the help of other \nperipheral units. Microprocessors are used where huge space is present to inbuilt a large \nmotherboard like in PCs. \n \n1.2. Architecture of 8051 Microcontroller \nThe figure below represents the architectural block diagram of 8051 microcontroller: \nAs we can see that several units are present in the above architecture. And every unit is \nembedded to execute the desired operation. Let us now discuss the operation of each unit \npresent in the architecture. \n \n1.2.1. Central processing unit (CPU): 8051 uses the 8-bit processor. This unit carries out \nthe operation on 8-bit data. A processor is the heart of microcontroller. As the execution of \nthe program stored in the memory is performed by the processor. \nThe unit performs arithmetic and logical operations on 8-bit data as it has ALU, with internal \nregisters and program counters. \nSeveral logical operations are performed by the ALU according to the program stored in the \nmemory. \nThe processor of 8051 microcontrollers possesses a special feature by which it can process \nsingle bit or 8-bit data. This simply means that it has the ability to access each single bit data \neither to clear, set or move etc. for any logical computation. \n",
        "images": []
    },
    "4": {
        "text": "lOMoAR cPSD|26885763 \n \n4 | P a g e  \n \n \nArchitecture of 8051 Microcontroller \n \n1.2.2. Memory: Basically 8051 microcontroller consists of on-chip program memory i.e., \nROM and on-chip data memory i.e., RAM. \nLet us first understand \n• \nROM  \n8051 microcontroller has 4 KB ROM with 0000H to 0FFFH as the addressable space. It \nis completely a program or code memory that means used by the programmer to store the \nprograms that are to be executed by the microcontroller. \n• \nThe operations that are executed by the device in which the microcontroller is present are \nstored in the ROM of the memory at the time of fabrication. Hence cannot be changed or \nmodified. \n \n• \nRAM  \n8051 holds a 128 bytes RAM. Basically, RAM is used to store data or operands for only \na small time duration. It can be altered anytime according to the need of the user. It is \nalso known as the data memory as it stores the data temporarily. \n• \n \nOut of the 128-byte RAM, first, 32 bytes is held by the working registers. Basically, these \nare 4 banks which separately has 8 registers. These registers are accessed either by its \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_4_img_1.jpeg"
        ]
    },
    "5": {
        "text": "lOMoAR cPSD|26885763 \n \n5 | P a g e  \n \nname or address. It is to be noted here that at a particular time only a single register bank \ncan be used. \n \n• \nAs in 8051, the data and program memory i.e., RAM and ROM hold a definite memory \nspace. However, for some applications there exist the need for external memory to \nenhance the memory space, thus external RAM, ROM/EPROM is used by the 8051 \nmicrocontrollers. \n \n1.2.3. Input/ Output port: 8051 consists of 4 parallel ports of 8 bit each thereby providing \n32 input-output pins. All the 4 ports function bidirectional i.e., either input or output \naccording to the software control. \n \n1.2.4. Timer and Control Unit: Timers are used to create a time gap or delay between 2 \nevents. 8051 microcontroller consists of 2 timers of 16 bit each by which the system can \nproduce two delays simultaneously in order to generate the appropriate delay. \n \n1.2.5. 8051 Flag Bits and PSW Register \nThe program status word (PSW) register is an 8-bit register, also known as flag register. It is \nof 8-bit wide but only 6-bit of it is used. The two unused bits are user-defined flags. \n \n1.2.6. The Data Pointer (DPTR) is the 8051's only user-accessible 16-bit (2-byte) register. \nThe Accumulator, R0–R7 registers and B register are 1-byte value registers. DPTR is meant \nfor pointing to data. It is used by the 8051 to access external memory using the address \nindicated by DPTR. \n \nBasically, microcontrollers use hardware delays in which a physical device is used by the \nprocessor to produce the respective delay. And this physical device is known as a timer. \nThe timer produces the delay according to the demand of the processor and sends the signal \nto the processor once the respective delay gets produced. \n \n1.2.7. Pin diagram of 8051 Microcontroller \nIntroduction : \nThe 8051 microcontroller is a popular 8-bit microcontroller widely used in embedded \nsystems. It is a single-chip microcontroller with a Harvard architecture that includes a CPU, \nRAM, ROM, and several peripherals. The 8051 microcontroller has a 40-pin dual in-line \npackage (DIP) that provides various inputs and outputs for communication with external \ndevices.  \n8051 microcontroller is a 40 pin Dual Inline Package (DIP). These 40 pins serve different \nfunctions like read, write, I/O operations, interrupts etc. 8051 has four I/O ports wherein each \nport has 8 pins which can be configured as input or output depending upon the logic state of \n",
        "images": []
    },
    "6": {
        "text": "lOMoAR cPSD|26885763 \n \n6 | P a g e  \n \nthe pins. Therefore, 32 out of these 40 pins are dedicated to I/O ports. The rest of the pins are \ndedicated to VCC, GND, XTAL1, XTAL2, RST, ALE, EA’ and PSEN’. Pin diagram of \n8051 \n \n \nDescription of the Pins : \n• \nPin 1 to Pin 8 (Port 1) – Pin 1 to Pin 8 are assigned to Port 1 for simple I/O operations. \nThey can be configured as input or output pins depending on the logic control i.e. if logic \nzero (0) is applied to the I/O port it will act as an output pin and if logic one (1) is applied \nthe pin will act as an input pin. These pins are also referred to as P1.0 to P1.7 (where P1 \nindicates that it is a pin in port 1 and the number after ‘.’ tells the pin number i.e. 0 \nindicates first pin of the port. So, P1.0 means first pin of port 1, P1.1 means second pin of \nthe port 1 and so on). These pins are bidirectional pins. \n• \nPin 9 (RST) – Reset pin. It is an active-high, input pin. Therefore if the RST pin is high \nfor a minimum of 2 machine cycles, the microcontroller will reset i.e. it will close and \nterminate all activities. It is often referred as “power-on-reset” pin because it is used to \nreset the microcontroller to it’s initial values when power is on (high). \n• \nPin 10 to Pin 17 (Port 3) – Pin 10 to pin 17 are port 3 pins which are also referred to as \nP3.0 to P3.7. These pins are similar to port 1 and can be used as universal input or output \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_6_img_1.jpeg"
        ]
    },
    "7": {
        "text": "lOMoAR cPSD|26885763 \n \n7 | P a g e  \n \npins. These pins are bidirectional pins. These pins also have some additional functions \nwhich are as follows: \n• \nP3.0 (RXD) : 10th pin is RXD (serial data receive pin) which is for serial input. Through \nthis input signal microcontroller receives data for serial communication. \n• \nP3.1 (TXD) : 11th pin is TXD (serial data transmit pin) which is serial output pin. \nThrough this output signal microcontroller transmits data for serial communication. \n• \nP3.2 and P3.3 (INT0′, INT1′ ) : 12th and 13th pins are for External Hardware Interrupt \n0 and Interrupt 1 respectively. When this interrupt is activated(i.e. when it is low), 8051 \ngets interrupted in whatever it is doing and jumps to the vector value of the interrupt \n(0003H for INT0 and 0013H for INT1) and starts performing Interrupt Service Routine \n(ISR) from that vector location. \n• \nP3.4 and P3.5 (T0 and T1) : 14th and 15th pin are for Timer 0 and Timer 1 external \ninput. They can be connected with 16 bit timer/counter. \n• \nP3.6 (WR’) : 16th pin is for external memory write i.e. writing data to the external \nmemory. \n• \nP3.7 (RD’) : 17th pin is for external memory read i.e. reading data from external \nmemory. \n• \nPin 18 and Pin 19 (XTAL2 And XTAL1) – These pins are connected to an external \noscillator which is generally a quartz crystal oscillator. They are used to provide an \nexternal clock frequency of 4MHz to 30MHz. \n• \nPin 20 (GND) – This pin is connected to the ground. It has to be provided with 0V power \nsupply. Hence it is connected to the negative terminal of the power supply. \n• \nPin 21 to Pin 28 (Port 2) – Pin 21 to pin 28 are port 2 pins also referred to as P2.0 to \nP2.7. When additional external memory is interfaced with the 8051 microcontroller, pins \nof port 2 act as higher-order address bytes. These pins are bidirectional. \n• \nPin 29 (PSEN) – PSEN stands for Program Store Enable. It is output, active-low pin. \nThis is used to read external memory. In 8031 based system where external ROM holds \nthe program code, this pin is connected to the OE pin of the ROM. \n• \nPin 30 (ALE/ PROG) – ALE stands for Address Latch Enable. It is input, active-high \npin. This pin is used to distinguish between memory chips when multiple memory chips \nare used. It is also used to de-multiplex the multiplexed address and data signals available \nat port 0. During flash programming i.e. Programming of EPROM, this pin acts as \nprogram pulse input (PROG). \n• \nPin 31 (EA/ VPP) – EA stands for External Access input. It is used to enable/disable \nexternal memory interfacing. In 8051, EA is connected to Vcc as it comes with on-chip \nROM to store programs. For other family members such as 8031 and 8032 in which there \nis no on-chip ROM, the EA pin is connected to the GND. \n• \nPin 32 to Pin 39 (Port 0) – Pin 32 to pin 39 are port 0 pins also referred to as P0.0 to \nP0.7. They are bidirectional input/output pins. They don’t have any internal pull-ups. \n",
        "images": []
    },
    "8": {
        "text": "lOMoAR cPSD|26885763 \n \n8 | P a g e  \n \nHence, 10 K? pull-up registers are used as external pull-ups. Port 0 is also designated as \nAD0-AD7 because 8051 multiplexes address and data through port 0 to save pins. \n• \nPin 40 (VCC) – This pin provides power supply voltage i.e. +5 Volts to the circuit. \n \nUses of pin diagram of the 8051 microcontroller : \nThe pin diagram of the 8051 microcontroller is used for various purposes in embedded \nsystems. Some of the main uses of the pin diagram are: \n1. Interfacing with external devices: The 8051 microcontroller has several input/output \npins that can be used for interfacing with external devices such as sensors, actuators, \ndisplays, and communication modules. The pin diagram provides the information about \nthe location of these pins, their functionalities, and their electrical characteristics. \n2. Programming the microcontroller: The 8051 microcontroller can be programmed \nusing various programming languages such as Assembly, C, and BASIC. The pin \ndiagram provides the information about the pins that are used for programming the \nmicrocontroller, such as the PSEN pin and the ALE pin. \n3. Debugging and testing: The pin diagram provides access to the internal signals of the \nmicrocontroller, such as the address and data buses, which can be used for debugging and \ntesting the microcontroller. Special hardware tools such as logic analyzers and \noscilloscopes can be connected to the pins to monitor the signals and diagnose any issues \nin the system. \n4. Expansion and customization: The pin diagram provides the flexibility to expand and \ncustomize the functionality of the microcontroller by connecting external devices and \nperipherals. For example, additional memory can be added by connecting external RAM \nor ROM chips to the address and data buses. \n \n1.2.8. Characteristics of 8051 Microcontroller \n1. An 8-bit processor. \n2. Data memory or RAM of 128 bytes. \n3. Program memory or ROM of 4 KB. \n4. 2 timers of 16 bit each. \n5. 8-bit data bus. \n6. 16-bit address bus. \n7. Offers bit addressable format. \n8. Special function registers and serial port. \n9. 32 input/output lines. \n \n1.3. 8051 Programming in Assembly Language \nThe assembly language is a low-level programming language used to write program code in \nterms of mnemonics. Even though there are many high-level languages that are currently in \ndemand, assembly programming language is popularly used in many applications. It can be \n",
        "images": []
    },
    "9": {
        "text": "lOMoAR cPSD|26885763 \n \n9 | P a g e  \n \nused for direct hardware manipulations. It is also used to write the 8051 programming \ncode efficiently with less number of clock cycles by consuming less memory compared to \nthe other high-level languages. \n \n1.3.1. 8051 Programming in Assembly Language \nThe assembly language is a fully hardware related programming language. The embedded \ndesigners must have sufficient knowledge on hardware of particular processor or controllers \nbefore writing the program. The assembly language is developed by mnemonics; therefore, \nusers cannot understand it easily to modify the program. \n \n8051 Programming in Assembly Language \n \nAssembly programming language is developed by various compilers and the “keiluvison” is \nbest suitable for  microcontroller programming development. \n \nMicrocontrollers or processors  can understand only binary language in the form of ‘0s or \n1s’; An assembler converts the assembly language to binary language, and then stores it in \nthe microcontroller memory to perform the specific task. \n \n1.3.2. 8051 Microcontroller Architecture \nThe 8051 microcontroller is the CISC based Harvard architecture, and it has peripherals like \n32 I/O, timers/counters, serial communication and memories. The microcontroller requires a \nprogram to perform the operations that require a memory for saving and to read the \nfunctions. \nThe \n8051 microcontroller consists of RAM \nand \nROM \nmemories \nto \nstore  instructions. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_9_img_1.jpeg"
        ]
    },
    "10": {
        "text": "lOMoAR cPSD|26885763 \n \n10 | P a g e  \n \n \n \n8051 Microcontroller Architecuture \n \nA Register is the main part in the processors and microcontrollers which is contained in the \nmemory that provides a faster way of collecting and storing the data. The 8051 assembly \nlanguage programming is based on the memory registers. If we want to manipulate data to a \nprocessor or controller by performing subtraction, addition, etc., we cannot do that directly in \nthe memory, but it needs registers to process and to store the data. Microcontrollers contain \nseveral types of registers that can be classified according to their instructions or content that \noperate in them. \n \n1.3.3. 8051 Microcontroller Programs in Assembly Language \nThe assembly language is made up of elements which all are used to write the program \nin sequential manner. Follow the given rules to write programming in assembly language. \n \n1.3.3.1.  Rules of Assembly Language \n• \nThe assembly code must be written in upper case letters \n• \nThe labels must be followed by a colon (label:) \n• \nAll symbols and labels must begin with a letter \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_10_img_1.png"
        ]
    },
    "11": {
        "text": "lOMoAR cPSD|26885763 \n \n11 | P a g e  \n \n• \nAll comments are typed in lower case \n• \nThe last line of the program must be the END directive \nThe assembly language mnemonics are in the form of op-code, such as MOV, ADD, JMP, \nand so on, which are used to perform the operations. \n \nOp-code: The op-code is a single instruction that can be executed by the CPU. Here the op-\ncode is a MOV instruction. \n \nOperands:  The operands are a single piece of data that can be operated by the op-code. \nExample, multiplication operation is performed by the operands that are multiplied by the \noperand. \nSyntax: MUL a,b; \n \n1.3.4. The Elements of an  Assembly Language Programming: \n• \nAssembler Directives \n• \nInstruction Set \n• \nAddressing Modes \n \n1.3.4.1.  Assembler Directives: \nThe assembling directives give the directions to the CPU. The 8051 microcontroller consists \nof various kinds of assembly directives to give the direction to the control unit. The most \nuseful directives are 8051 programming, such as: \n• \nORG \n• \nDB \n• \nEQU \n• \nEND \n \nORG(origin): This directive indicates the start of the program. This is used to set the register \naddress during assembly. For example; ORG 0000h tells the compiler all subsequent code \nstarting at address 0000h. \nSyntax: ORG 0000h \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_11_img_1.jpeg"
        ]
    },
    "12": {
        "text": "lOMoAR cPSD|26885763 \n \n12 | P a g e  \n \n \n(define byte): The define byte is used to allow a string of bytes. For example, print the \n“EDGEFX” wherein each character is taken by the address and finally prints the “string” by \nthe DB directly with double quotes. \nSyntax: \nORG 0000h \nMOV a, #00h \n————- \n————- \nDB”EDGEFX” \n \n \nEQU (equivalent): The equivalent directive is used to equate address of the variable. \nSyntax: \nreg equ,09h \n—————– \n—————– \nMOV reg,#2h \n \nEND:The END directive is used to indicate the end of the program. \nSyntax: \nreg equ,09h \n—————– \n—————– \nMOV reg,#2h \nEND \n \n1.3.4.2.  Embedded Systems - Addressing Modes \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_12_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_12_img_2.jpeg"
        ]
    },
    "13": {
        "text": "lOMoAR cPSD|26885763 \n \n13 | P a g e  \n \nAn addressing mode refers to how you are addressing a given memory location. There are \nfive different ways or five addressing modes to execute this instruction which are as follows \n− \n• \nImmediate addressing mode \n• \nDirect addressing mode \n• \nRegister direct addressing mode \n• \nRegister indirect addressing mode \n• \nIndexed addressing mode \n \nImmediate Addressing Mode \nLet's begin with an example. \nMOV A, #6AH  \nIn general, we can write, \nMOV A, #data \nIt is termed as immediate because 8-bit data is transferred immediately to the accumulator \n(destination operand). \n  \nThe  above instruction and its execution. The opcode 74H is saved at 0202 address. The data \n6AH is saved at 0203 address in the program memory. After reading the opcode 74H, the \ndata at the next program memory address is transferred to accumulator A (E0H is the address \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_13_img_1.jpeg"
        ]
    },
    "14": {
        "text": "lOMoAR cPSD|26885763 \n \n14 | P a g e  \n \nof accumulator). Since the instruction is of 2-bytes and is executed in one cycle, the program \ncounter will be incremented by 2 and will point to 0204 of the program memory. \nNote − The '#' symbol before 6AH indicates that the operand is a data (8 bit). In the absence \nof '#', the hexadecimal number would be taken as an address. \n \nDirect Addressing Mode \nThis is another way of addressing an operand. Here, the address of the data (source data) is \ngiven as an operand. Let’s take an example. \nMOV A, 04H  \nThe register bank#0 (4th register) has the address 04H. When the MOV instruction is \nexecuted, the data stored in register 04H is moved to the accumulator. As the register 04H \nholds the data 1FH, 1FH is moved to the accumulator. \nNote − We have not used '#' in direct addressing mode, unlike immediate mode. If we had \nused '#', the data value 04H would have been transferred to the accumulator instead of 1FH. \nNow, take a look at the following illustration. It shows how the instruction gets executed. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_14_img_1.jpeg"
        ]
    },
    "15": {
        "text": "lOMoAR cPSD|26885763 \n \n15 | P a g e  \n \nAs shown in the above illustration, this is a 2-byte instruction which requires 1 cycle to \ncomplete. The PC will be incremented by 2 and will point to 0204. The opcode for the \ninstruction MOV A, address is E5H. When the instruction at 0202 is executed (E5H), the \naccumulator is made active and ready to receive data. Then the PC goes to the next address \nas 0203 and looks up the address of the location of 04H where the source data (to be \ntransferred to accumulator) is located. At 04H, the control finds the data 1F and transfers it to \nthe accumulator and hence the execution is completed. \n \nRegister Direct Addressing Mode \nIn this addressing mode, we use the register name directly (as source operand). Let us try to \nunderstand with the help of an example. \nMOV A, R4  \nAt a time, the registers can take values from R0 to R7. There are 32 such registers. In order \nto use 32 registers with just 8 variables to address registers, register banks are used. There are \n4 register banks named from 0 to 3. Each bank comprises of 8 registers named from R0 to \nR7. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_15_img_1.jpeg"
        ]
    },
    "16": {
        "text": "lOMoAR cPSD|26885763 \n \n16 | P a g e  \n \nAt a time, a single register bank can be selected. Selection of a register bank is made possible \nthrough a Special Function Register (SFR) named Processor Status Word (PSW). PSW is \nan 8-bit SFR where each bit can be programmed as required. Bits are designated from PSW.0 \nto PSW.7. PSW.3 and PSW.4 are used to select register banks. \nNow, take a look at the following illustration to get a clear understanding of how it works. \nOpcode EC is used for MOV A, R4. The opcode is stored at the address 0202 and when it is \nexecuted, the control goes directly to R4 of the respected register bank (that is selected in \nPSW). If register bank #0 is selected, then the data from R4 of register bank #0 will be \nmoved to the accumulator. Here 2F is stored at 04H. 04H represents the address of R4 of \nregister bank #0. \nData (2F) movement is highlighted in bold. 2F is getting transferred to the accumulator from \ndata memory location 0C H and is shown as dotted line. 0CH is the address location of \nRegister 4 (R4) of register bank #1. The instruction above is 1 byte and requires 1 cycle for \ncomplete execution. What it means is, you can save program memory by using register direct \naddressing mode. \nRegister Indirect Addressing Mode \nIn this addressing mode, the address of the data is stored in the register as operand. \nMOV A, @R0  \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_16_img_1.jpeg"
        ]
    },
    "17": {
        "text": "lOMoAR cPSD|26885763 \n \n17 | P a g e  \n \nHere the value inside R0 is considered as an address, which holds the data to be transferred \nto the accumulator. Example: If R0 has the value 20H, and data 2FH is stored at the address \n20H, then the value 2FH will get transferred to the accumulator after executing this \ninstruction. See the following illustration. \nSo the opcode for MOV A, @R0 is E6H. Assuming that the register bank #0 is selected, the \nR0 of register bank #0 holds the data 20H. Program control moves to 20H where it locates \nthe data 2FH and it transfers 2FH to the accumulator. This is a 1-byte instruction and the \nprogram counter increments by 1 and moves to 0203 of the program memory. \nNote − Only R0 and R1 are allowed to form a register indirect addressing instruction. In \nother words, the programmer can create an instruction either using @R0 or @R1. All register \nbanks are allowed. \nIndexed Addressing Mode \n \nWe will take two examples to understand the concept of indexed addressing mode. Take a \nlook at the following instructions − \nMOVC A, @A+DPTR \nand \nMOVC A, @A+PC \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_17_img_1.jpeg"
        ]
    },
    "18": {
        "text": "lOMoAR cPSD|26885763 \n \n18 | P a g e  \n \nwhere DPTR is the data pointer and PC is the program counter (both are 16-bit registers). \nConsider the first example. \nMOVC A, @A+DPTR \nThe source operand is @A+DPTR. It contains the source data from this location. Here we are \nadding the contents of DPTR with the current content of the accumulator. This addition will \ngive a new address which is the address of the source data. The data pointed by this address \nis then transferred to the accumulator. \nThe opcode is 93H. DPTR has the value 01FE, where 01 is located in DPH (higher 8 bits) \nand FE is located in DPL (lower 8 bits). Accumulator has the value 02H. Then a 16-bit \naddition is performed and 01FE H+02H results in 0200 H. Data at the location 0200H will \nget transferred to the accumulator. The previous value inside the accumulator (02H) will be \nreplaced with the new data from 0200H. The new data in the accumulator is highlighted in \nthe illustration. \nThis is a 1-byte instruction with 2 cycles needed for execution and the execution time \nrequired for this instruction is high compared to previous instructions (which were all 1 cycle \neach). \nThe other example MOVC A, @A+PC works the same way as the above example. Instead \nof adding DPTR with the accumulator, here the data inside the program counter (PC) is \nadded with the accumulator to obtain the target address. \n1.3.4.3.  Instruction Set \n In the sequence of instructions to be executed, it is often necessary to transfer program \ncontrol to a different location. There are many instructions in the 8051 to achieve this. This \nchapter covers the control transfer instructions available in 8051 Assembly language. In the \nfirst section we discuss instructions used for looping, as well as instructions for conditional \nand unconditional jumps. In the second section we examine CALL instructions and their \nuses. In the third section, time delay subroutines are described for both the traditional 8051 \nand its newer generation. \n \nLooping in the 8051 \nRepeating a sequence of instructions a certain number of times is called a loop. The loop is \none of most widely used actions that any microprocessor performs. In the 8051, the loop \naction is performed by the instruction “DJNZ reg, label”. In this instruction, the register is \ndecremented; if it is not zero, it jumps to the target address referred to by the label. Prior to \nthe start of the loop the register is loaded with the counter for the number of repetitions. \nNotice that in this instruction both the register decrement and the decision to jump are \ncombined into a single instruction. \n \n",
        "images": []
    },
    "19": {
        "text": "lOMoAR cPSD|26885763 \n \n19 | P a g e  \n \n \nIn the program in Example, the R2 register is used as a counter. The counter is first set to 10. \nIn each iteration the instruction DJNZ decrements R2 and checks its value. If R2 is not zero, \nit jumps to the target address associated with the label “AGAIN”. This looping action \ncontinues until R2 becomes zero. After R2 becomes zero, it falls through the loop and \nexecutes the instruction immediately below it, in this case the “MOV R5 , A” instruction. \nNotice in the DJNZ instruction that the registers can be any of RO – R7. The counter can also \nbe a RAM location \n \nLoop inside a loop \nAs shown in Example the maximum count is 256. What happens if we want to repeat an \naction more times than 256? To do that, we use a loop inside a loop, which is called a nested \nloop. In a nested loop, we use two registers to hold the count.  \n \nExample \nWrite a program to (a) load the accumulator with the value 55H, and (b) complement the \nACC 700 times. \nSolution: \nSince 700 is larger than 255 (the maximum capacity of any register), we use two registers to \nhold the count. The following code shows how to use R2 and R3 for the count. \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_19_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_19_img_2.jpeg"
        ]
    },
    "20": {
        "text": "lOMoAR cPSD|26885763 \n \n20 | P a g e  \n \n \n \nIn this program, R2 is used to keep the inner loop count. In the instruction “DJNZ R2 , \nAGAIN”, whenever R2 becomes 0 it falls through and “DJNZ R3 , NEXT” is executed. This \ninstruction forces the CPU to load R2 with the count 70 and the inner loop starts again. This \nprocess will continue until R3 becomes zero and the outer loop is finished. \nOther conditional jumps \nConditional jumps for the 8051 are summarized in Table 3-1. More details of each \ninstruction are provided in Appendix A. In Table 3-1, notice that some of the instructions, \nsuch as JZ (jump if A = zero) and JC (jump if carry), jump only if a certain condition is met. \nNext we examine some conditional jump instructions with examples. \n \nJZ (jump if A = 0) \nIn this instruction the content of register A is checked. If it is zero, it jumps to the target \naddress. For example, look at the following code. \n \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_20_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_20_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_20_img_3.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_20_img_4.jpeg"
        ]
    },
    "21": {
        "text": "lOMoAR cPSD|26885763 \n \n21 | P a g e  \n \nIn this program,. if either RO or Rl is zero, it jumps to the label OVER. Notice that the JZ \ninstruction can be used only for register A. It can only check to see whether the accumulator \nis zero, and it does not apply to any other register. More importantly, you don’t have to \nperform an arithmetic instruction such as decrement to use the JNZ instruction. See Example \n3-4. \n \nExample \n \n \nJNC (jump if no carry, jumps if CY = 0) \nIn this instruction, the carry flag bit in the flag (PSW) register is used to make the decision \nwhether to jump. In executing “JNC label”, the processor looks at the carry flag to see if it is \nraised (CY =1). If it is not, the CPU starts to fetch and execute instructions from the address \nof the label. If CY = 1, it will not jump but will execute the next instruction below JNC. \nNote that there is also a “JC label” instruction. In the JC instruction, if CY = 1 it jumps to the \ntarget address. We will give more examples of these instructions in the context of \napplications in future chapters. \nThere are also JB (jump if bit is high) and JNB (jump if bit is low) instructions. These are \ndiscussed in Chapters 4 and 8 when bit manipulation instructions are discussed. \n \nAll conditional jumps are short jumps \nIt must be noted that all conditional jumps are short jumps, meaning that the address of the \ntarget must be within -128 to +127 bytes of the contents of the program counter (PC). This \nvery important concept is discussed at the end of this section. \n \nUnconditional jump instructions \nThe unconditional jump is a jump in which control is transferred unconditionally to the target \nlocation. In the 8051 there are two unconditional jumps: LJMP (long jump) and SJMP (short \njump). Each is discussed below. \n \nLJMP (long jump) \nLJMP is an unconditional long jump. It is a 3-byte instruction in which the first byte is the \nopcode, and the second and third bytes represent the 16-bit address of the target location. The \n2-byte target address allows a jump to any memory location from 0000 to FFFFH. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_21_img_1.jpeg"
        ]
    },
    "22": {
        "text": "lOMoAR cPSD|26885763 \n \n22 | P a g e  \n \nRemember that although the program counter in the 8051 is 16-bit, thereby giving a ROM \naddress space of 64K bytes, not all 8051 family members have that much on-chip program \nROM. The original 8051 had only 4K bytes of on-chip ROM for program space; \nconsequently, every byte was precious. For this reason there is also an SJMP (short jump) \ninstruction, which is a 2-byte instruction as opposed to the 3-byte LJMP instruction. This can \nsave some bytes of memory in many applications where memory space is in short supply. \nSJMP is discussed next. \n \nSJMP (short jump) \nIn this 2-byte instruction, the first byte is the opcode and the second byte is the relative \naddress of the target location. The relative address range of 00 – FFH is divided into forward \nand backward jumps; that is, within -128 to +127 bytes of memory relative to the address of \nthe current PC (program counter). If the jump is forward, the target address can be within a \nspace of 127 bytes from the current PC. If the target address is backward, the target address \ncan be within -128 bytes from the current PC. This is explained in detail next. \n \nCalculating the short jump address \nIn addition to the SJMP instruction, all conditional jumps such as JNC, JZ, and DJNZ are \nalso short jumps due to the fact that they are all two-byte instructions. In these instructions \nthe first byte is the opcode and the second byte is the relative address. The target address is \nrelative to the value of the program counter. To calculate the target address, the second byte \nis added to the PC of the instruction immediately below the jump.  \n \nShifting Operators \nThe shift operators are used for sending and receiving the data efficiently. The \n8051 microcontroller consist four shift operators: \n• \nRR —> Rotate Right \n• \nRRC —>Rotate Right through carry \n• \nRL —> Rotate Left \n• \nRLC  —>Rotate Left through carry \n \nRotate Right (RR): \nIn this shifting operation, the MSB becomes LSB and all bits shift towards right side bit-by-\nbit, serially. \nSyntax: \nMOV A, #25h \nRR A \n",
        "images": []
    },
    "23": {
        "text": "lOMoAR cPSD|26885763 \n \n23 | P a g e  \n \n \nRotate Left (RL): \nIn this shifting operation, the MSB becomes LSB and all bits shift towards Left side bit-by-\nbit, serially. \nSyntax: \nMOV A, #25h \nRL A \n \nRRC Rotate Right through Carry: \nIn this shifting operation, the LSB moves to carry and the carry becomes MSB, and all the \nbits are shift towards right side bit by bit position. \nSyntax: \nMOV A, #27h \nRRC A \nRLC Rotate Left through Carry: \nIn this shifting operation, the MSB moves to carry and the carry becomes LSB and all the \nbits shift towards left side in a bit-by-bit position. \nSyntax: \nMOV A, #27h \nRLC A \nBasic Embedded C Programs: \nThe microcontroller programming differs for each type of operating system. There are many \noperating systems such as Linux, Windows, RTOS and so on. However, RTOS has several \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_23_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_23_img_2.jpeg"
        ]
    },
    "24": {
        "text": "lOMoAR cPSD|26885763 \n \n24 | P a g e  \n \nadvantages for embedded system development.  Some of the Assembly levels programming \nexamples are given below. \n \n1.3.5.  Example Program for LED blinking using with 8051 microcontroller: \n• \nNumber Displaying on 7-segment display using 8051 microcontroller \n• \nTimer/Counter calculations and program using 8051 microcontroller \n• \nSerial Communication calculations and program using 8051 microcontroller \n \nLED programs with 8051 Microcontrller \n \n1. WAP to toggle the PORT1 LEDs \nORG 0000H \nTOGLE: MOV P1, #01    //move 00000001 to the p1 register// \nCALL DELAY    //execute the delay// \nMOV A, P1        //move p1 value to the accumulator// \nCPL A        //complement A value // \nMOV P1, A        //move 11111110 to the port1 register// \nCALL DELAY    //execute the delay// \nSJMP TOGLE \nDELAY: MOV R5, #10H    //load register R5 with 10// \nTWO:        MOV R6, #200    //load register R6 with 200// \nONE:       MOV R7, #200    //load register R7 with 200// \nDJNZ R7, $    //decrement R7 till it is zero// \nDJNZ R6, ONE    //decrement R7 till it is zero// \nDJNZ R5, TWO    //decrement R7 till it is zero// \nRET            //go back to the main program // \nEND \n \n1.4. Programming Parallel port \n1.4.1. 8051 Microcontroller port programming \nThere are four ports P0, P1, P2  and  P3 each  use  8 pins,  making  them 8-bit  ports. All the ports \nupon  RESET are configured as output, ready to be used as output ports. To use any of these ports as \nan input port, it must be programmed. \n \n1.4.2. Pin configuration of 8051/8031 microcontroller. \n",
        "images": []
    },
    "25": {
        "text": "lOMoAR cPSD|26885763 \n \n25 | P a g e  \n \n \nPin configuration of 8951 \n \nPort 0: Port 0 occupies a total of 8 pins (pins 32-39) .It can be used for input or output. To use the \npins of port 0 as both input and output ports, each pin must be connected externally to a 10K ohm \npull-up resistor. This is due to the fact that P0 is an open drain, unlike P1, P2, and P3.Open drain  is a \nterm used for MOS chips in the same way that open collector is used for TTL chips. With external \npull-up resistors connected upon reset, port 0 is configured as an output port. For example, the \nfollowing code will continuously send out to port 0 the alternating values 55H and AAH \nMOV A,#55H \nBACK:  MOV P0,A \nACALL DELAY \nCPL A \nSJMP BACK \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_25_img_1.png"
        ]
    },
    "26": {
        "text": "lOMoAR cPSD|26885763 \n \n26 | P a g e  \n \nPort 0 as Input : With resistors connected to port 0, in order to make it an input, the port must be \nprogrammed by writing 1 to all the bits. In the following code, port 0 is configured first as an input \nport by writing 1’s to it, and then data is received from the port and sent to P1. \n \n8051 I/O Ports \nMOV A,#0FFH         ; A = FF hex \nMOV P0,A                ; make P0 an input port \nBACK: MOV A,P0   ;get data from P0 \nMOV P1,A                ;send it to port 1 \nSJMP BACK \nDual role of port 0: Port 0 is also designated as AD0-AD7, allowing it to be used for both address \nand data. When connecting an 8051/31 to an external memory, port 0 provides both address and data. \nThe 8051 multiplexes address and data through port 0 to save pins. ALE indicates if P0 has address or \ndata. When ALE = 0, it provides data D0-D7, but when ALE =1 it has address and data with the help \nof a 74LS373 latch. \nPort 1: Port 1 occupies a total of 8 pins (pins 1 through 8). It can be used as input or output. In \ncontrast to port 0, this port does not need any pull-up resistors since it already has pull-up resistors \ninternally. Upon reset, Port 1 is configured as an output port. For example, the following code will \ncontinuously send out to port1 the alternating values 55h  & AAh \nMOV A,#55H                    ; A = 55 hex \nBACK: MOV P1,A            ;send it to Port 1 \nACALL DELAY                ;call delay routine \nCPL A                               ;make A=0 \nSJMP BACK \nPort 1 as input: To make port1 an input port, it must programmed as such by writing 1 to all its bits. \nIn the following code port1 is configured first as an input port by writing 1’s to it, then data is \nreceived from the port and saved in R7 ,R6 & R5. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_26_img_1.png"
        ]
    },
    "27": {
        "text": "lOMoAR cPSD|26885763 \n \n27 | P a g e  \n \nMOV A,#0FFH   ;A=FF HEX \nMOV P1,A         ;make P1 an input port by writing all 1’s to it \nMOV A,P1         ;get data from P1 \nMOV R7,A         ;save it in register R7 \nACALL DELAY   ;wait \nMOV  A,P1        ;get another data from P1 \nMOV R6,A         ;save it in register R6 \nACALL DELAY   ;wait \nMOV  A,P1        ;get another data from P1 \nMOV R5,A         ;save it in register R5 \nPort 2 : Port 2 occupies a total of 8 pins (pins 21- 28). It can be used as input or output. Just like P1, \nP2 does not need any pull-up resistors since it already has pull-up resistors internally. Upon reset,Port \n2 is configured as an output port. For example, the following code will send out continuously to port \n2 the alternating values 55h and AAH. That is all the bits of port 2 toggle continuously. \nMOV A,#55H                    ; A = 55 hex \nBACK:  MOV P2,A            ;send it to Port 2 \nACALL DELAY                  ;call delay routine \nCPL A                               ;make A=0 \nSJMP BACK \nPort 2 as input : To make port 2 an input, it must programme as such by writing 1 to all its bits. In \nthe following code, port 2 is configured first as an input port by writing 1’s to it. Then data is \nreceived from that port and is sent to P1 continuously. \nMOV A,#0FFH         ;A=FF hex \nMOV P2,A                ;make P2 an input port by writing all 1’s to it \nBACK: MOV A,P2     ;get data from P2 \nMOV P1,A                ;send it to Port1 \nSJMP BACK             ;keep doing that \nDual role of port 2 : In systems based on the 8751, 8951, and DS5000, P2 is used as simple I/O. \nHowever, in 8031-based systems, port 2 must be used along with P0 to provide the 16-bit address for \nthe external memory. As shown in pin configuration 8051, port 2 is also designed as A8-A15, \nindicating the dual function. Since an 8031 is capable of accessing 64K bytes of external memory, it \nneeds a path for the 16 bits of the address. While P0 provides the lower 8 bits via A0-A7, it is the job \nof P2 to provide bits A8-A15 of the address. In other words, when 8031 is connected to external \nmemory, P2 is used for the upper 8 bits of the 16 bit address, and it cannot be used for I/O. \n \nPort 3 : Port 3 occupies a total of 8 pins, pins 10 through 17. It can be used as input or output. P3 \ndoes not need any pull-up resistors, the same as P1 and P2 did not. Although port 3 is configured as \nan output port upon reset. Port 3 has the additional function of providing some extremely important \nsignals such as interrupts. This information applies both 8051 and 8031 chips. \n",
        "images": []
    },
    "28": {
        "text": "lOMoAR cPSD|26885763 \n \n28 | P a g e  \n \nRead-modify-write feature : The ports in the 8051 can be accessed by the read-modify-write \ntechnique. This feature saves many lines of code by combining in a single instruction all three action \nof (1) reading the port, (2) modifying it, and (3) writing to the port. The following code first places \n01010101 (binary) into port 1. Next, the instruction “XLR P1,#0FFH” performs an XOR logic \noperation on P1 with 1111 1111 (binary), and then writes the result back into P1. \nMOV P1,#55H      ;P1=01010101 \nAGAIN: XLR P1,#0FFH     ;EX-OR P1 with 1111 1111 \nACALL DELAY \nSJMP AGAIN \n1.4.3. Addition of two 8-bit numbers in 8051 Microcontroller Using Ports Introduction:  \nTo perform addition of two 8-bit numbers using ports in 8051 microcontroller, we \nneed to connect the two 8-bit numbers to be added to two ports of the microcontroller. We \ncan use any two ports of the microcontroller, for example, P1 and P2. \n \nThe first step is to load the two numbers into two different ports. For example, we can \nload the first number into port P1 and the second number into port P2. We can use the MOV \ninstruction to load the numbers into the ports. \n \nOnce the numbers are loaded into the ports, we can use the ADD instruction to add \nthe two numbers. The ADD instruction adds the contents of the accumulator and the \nspecified operand and stores the result in the accumulator. Since the two numbers are already \nloaded into the ports, we can simply use the ADD instruction with the accumulator and the \nappropriate port. \n \nAfter the addition is complete, we can retrieve the result from the accumulator and \nstore it in another port or memory location for further processing or display. 8051 \nmicrocontroller is a microcontroller designed by Intel in 1981. It is an 8-bit microcontroller \nwith 40 pins DIP (dual inline package), 4kb of ROM storage and 128 bytes of RAM storage, \n16-bit timers. It consists of four parallel 8-bit ports, which are programmable as well as \naddressable as per the requirement. \n  \nIssues in Addition of two 8-bit numbers  8051 Microcontroller Using Ports : \nThere are several issues that can arise when performing addition of two 8-bit numbers in \n8051 microcontroller using ports: \n1. Overflow: If the result of the addition exceeds 8 bits, the carry flag (CY) in the program \nstatus word (PSW) will be set. If this flag is not checked before storing the result, the \nresult may be incorrect. \n",
        "images": []
    },
    "29": {
        "text": "lOMoAR cPSD|26885763 \n \n29 | P a g e  \n \n2. Input validation: Before performing the addition, it is important to validate the input to \nensure that the numbers are within the range of 0 to 255. If the input is not validated, the \nresult may be incorrect. \n3. Port initialization: The ports used for input and output must be properly initialized before \nuse. If the ports are not properly initialized, the data may not be transferred correctly. \n4. Endianness: The order in which the bytes of the numbers are stored in memory can affect \nthe result of the addition. It is important to ensure that the bytes are stored in the correct \norder before performing the addition. \n5. Interrupts: If interrupts are enabled during the addition operation, the result may be \naffected. It is important to disable interrupts during critical operations to ensure the \ncorrect result. \n6. Timing: The timing of the addition operation can affect the result. It is important to \nensure that the necessary delays are added between instructions to ensure correct \noperation. \n7. Code optimization: The code used to perform the addition should be optimized to ensure \nthat it uses the least number of instructions and takes the least amount of time. This is \nimportant to avoid potential timing issues and to ensure that the microcontroller can \nperform other tasks while the addition is being performed. \n  \nProblem: To write an assembly language program to add two 8 bit numbers in 8051 \nmicrocontroller using ports. \nExample: \n \nBlock diagram: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_29_img_1.jpeg"
        ]
    },
    "30": {
        "text": "lOMoAR cPSD|26885763 \n \n30 | P a g e  \n \n \nAlgorithm: \n• \nInitialize Ports P0 and P1 as input ports. \n• \nInitialize Ports P2 and P3 as output ports. \n• \nInitialize the R1 register. \n• \nMove the contents from Port 0 to B register. \n• \nMove the contents from Port 1 to A register. \n• \nAdd contents in A and B. \n• \nIf carry is present increment R1. \n• \nMove contents in R1 to Port 2. \n• \nMove the sum in step 6 to Port 3. \n \nProgram: \nORG 00H                   // Indicates starting address \n \nMOV P0,#0FFH              // Initializes P0 as input port \nMOV P1,#0FFH              // Initializes P1 as input port \nMOV P2,#00H               // Initializes P2 as output port \nMOV P3,#00H               // Initializes P3 as output port \n \nL1:MOV R1, #00H          // Initializes Register R1 \nMOV B,P0                 // Moves content of P0 to B \nMOV A,P1                 // Moves content of P1 to A \nCLR C                    // Clears carry flag \nADD A,B                  // Add the content of A and B and store result in A \nJNC L2                   // If carry is not set, jump to label L2 \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_30_img_1.jpeg"
        ]
    },
    "31": {
        "text": "lOMoAR cPSD|26885763 \n \n31 | P a g e  \n \nINC R1                   // Increment Register R1 if carry present \n \nL2: MOV P2, R1            // Moves the content from Register R1 to Port2 \nMOV P3,A                 // Moves the content from A to Port3 \nSJMP L1                  // Jumps to label L1 \nEND \n \nExplanation: \n• \nORG 00H is the starting address of the program. \n• \nGiving the values as #0FFH and #00H initializes the ports as input and output ports \nrespectively. \n• \nR1 register is initialized to 0 so as to store any carry produced during the sum. \n• \nMOV B, P0 moves the value present in P0 to the B register. \n• \nMOV A, P1 moves the value present in P1 to Accumulator. \n• \nADD AB adds the values present in Accumulator and B register and stores the result in \nAccumulator. \n• \nJNC L2 refers to jump to label L2 if no carry is present by automatically checking \nwhether the carry bit is set or not. \n• \nIf the carry bit is set to increment register R1. \n• \nMOV P2, R1, and MOV P3, A refers to moving the carry bit to P2 and result in \nAccumulator to P3. \n \n1.5. 8051 Timers \n1.5.1. Introduction to 8051 Timers \n8051 microcontrollers have two timers and counters which work on the clock \nfrequency. Timer/counter can be used for time delay generation, counting external events, \netc. \n \n8051 Clock  \n \nEvery Timer needs a clock to work, and 8051 provides it from an external crystal which is \nthe main clock source for Timer. The internal circuitry in the 8051 microcontrollers provides \na clock source to the timers which is 1/12th of the frequency of crystal attached to the \nmicrocontroller, also called Machine cycle frequency. \n \n8051 Timer Clock \n  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_31_img_1.jpeg"
        ]
    },
    "32": {
        "text": "lOMoAR cPSD|26885763 \n \n32 | P a g e  \n \nFor example, suppose we have a crystal frequency of 11.0592 MHz then the microcontroller \nwill provide 1/12th i.e. \nTimer clock frequency=  (Xtal Osc.frequency)/12  =  (11.0592 MHz)/12  = 921.6 KHz \n period T=  1/(921.6 kHz)=1.085 μS \n \n1.5.2. 8051 Timer \n8051 has two timers Timer0 (T0) and Timer1 (T1), both are 16-bit wide. Since 8051 has 8-\nbit architecture, each of these is accessed by two separate 8-bit registers as shown in the \nfigure below. These registers are used to load timer count. \n \n  \n8051 has a Timer Mode Register and Timer Control Register for selecting a mode of \noperation and controlling purpose. \nLet's see these registers, \n \n1.5.2.1.TMOD register \nTMOD is an 8-bit register used to set timer mode of timer0 and timer1. \n \nIts lower 4 bits are used for Timer0 and the upper 4 bits are used for Timer1 \nBit 7,3 – GATE: \n          1 = Enable Timer/Counter only when the INT0/INT1 pin is high and TR0/TR1 is set. \n          0 = Enable Timer/Counter when TR0/TR1 is set. \nBit 6,2 - C/\n(Counter/Timer): Timer or Counter select bit \n           1 = Use as Counter \n           0 = Use as Timer \n \nBit 5:4 & 1:0 - M1:M0: Timer/Counter mode select bit \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_32_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_32_img_2.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_32_img_3.png"
        ]
    },
    "33": {
        "text": "lOMoAR cPSD|26885763 \n \n33 | P a g e  \n \nThese are Timer/Counter mode select bit as per the below table \nM1 M0 Mode \nOperation \n0 \n0 \n0 (13-bit timer mode) \n13-bit timer/counter, 8-bit of THx & 5-bit of TLx \n0 \n1 \n1 (16-bit timer mode) \n16-bit timer/counter, THx cascaded with TLx \n1 \n0 \n2 (8-bit auto-reload mode) \n8-bit timer/counter (auto-reload mode), TLx reload \nwith the value held by THx each time TLx overflow \n1 \n1 \n3 (split timer mode) \nSplit the 16-bit timer into two 8-bit timers i.e. THx \nand TLx like two 8-bit timer \n  \n1.5.2.2.TCON Register \n \nTCON is an 8-bit control register and contains a timer and interrupt flags. \nBit 7 - TF1: Timer1 Overflow Flag \n        1 = Timer1 overflow occurred (i.e. Timer1 goes to its max and roll over back to zero). \n        0 = Timer1 overflow not occurred. \nIt is cleared through software. In the Timer1 overflow interrupt service routine, this bit will \nget cleared automatically while exiting from ISR. \n \nBit 6 - TR1: Timer1 Run Control Bit \n         1 = Timer1 start. \n         0 = Timer1 stop. \nIt is set and cleared by software. \n \nBit 5 – TF0: Timer0 Overflow Flag \n          1 = Timer0 overflow occurred (i.e. Timer0 goes to its max and roll over back to zero). \n          0 = Timer0 overflow not occurred. \nIt is cleared through software. In the Timer0 overflow interrupt service routine, this bit will \nget cleared automatically while exiting from ISR. \n \nBit 4 – TR0: Timer0 Run Control Bit \n           1 = Timer0 start. \n           0 = Timer0 stop. \nIt is set and cleared by software. \n \nBit 3 - IE1: External Interrupt1 Edge Flag \n            1 = External interrupt1 occurred. \n            0 = External interrupt1 Processed. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_33_img_1.png"
        ]
    },
    "34": {
        "text": "lOMoAR cPSD|26885763 \n \n34 | P a g e  \n \nIt is set and cleared by hardware. \n \nBit 2 - IT1: External Interrupt1 Trigger Type Select Bit \n            1 = Interrupt occurs on falling edge at INT1 pin. \n            0 = Interrupt occur on a low level at the INT1 pin. \n \nBit 1 – IE0: External Interrupt0 Edge Flag \n            1 = External interrupt0 occurred. \n            0 = External interrupt0 Processed. \nIt is set and cleared by hardware. \n \nBit 0 – IT0: External Interrupt0 Trigger Type Select Bit \n            1 = Interrupt occurs on falling edge at INT0 pin. \n            0 = Interrupt occur on a low level at INT0 pin. \n  \nLet's see the timers modes \n \n1.5.3. 8051 Timer Modes \nTimers have their operation modes which are selected in the TMOD register using M0 & M1 \nbit combinations. \n \nMode 0 (13-bit timer mode) \n \nThe Mode 0 operation is the 8-bit timer or counter with a 5-bit pre-scaler. So it is a 13-bit \ntimer/counter. It uses 5 bits of TL0 or TL1 and all of the 8-bits of TH0 or TH1. \n \nIn this example the Timer1is selected, in this case, every 32 (25)event for counter operations \nor 32 machine cycles for timer operation, the TH1 register will be incremented by 1. When \nthe TH1overflows from FFH to 00H, then the TF1 of TCON register will be high, and it \nstops the timer/counter. So for an example, we can say that if the TH1 is holding F0H, and it \nis in timer mode, then TF1will be high after 10H * 32 = 512 machine cycles. \nMOVTMOD, #00H \nMOVTH1, #0F0H \nMOVIE, #88H \nSETB TR1 \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_34_img_1.jpeg"
        ]
    },
    "35": {
        "text": "lOMoAR cPSD|26885763 \n \n35 | P a g e  \n \nIn the above program, the Timer1 is configured as timer mode 0. In this case Gate = 0. Then \nthe TH1 will be loaded with F0H, then enable the Timer1 interrupt. At last set the TR1 of \nTCON register, and start the timer. \n Mode1 (16-bit timer mode) \n \nThe Mode 1 operation is the 16-bit timer or counter. In the following diagram, we are using \nMode 1 for Timer0. \n \nIn this case every event for counter operations or machine cycles for timer operation, the \nTH0– TL0 register-pair will be incremented by 1. When the register pair overflows from \nFFFFH to 0000H, then the TF0 of TCON register will be high, and it stops the \ntimer/counter. So for an example, we can say that if the TH0 – TL0 register pair is holding \nFFF0H, and it is in timer mode, then TF0 will be high after 10H = 16 machine cycles. When \nthe clock frequency is 12MHz, then the following instructions generate an interrupt 16 µs \nafter Timer0 starts running. \nMOVTMOD, #01H \nMOVTL0, #0F0H \nMOVTH0, #0FFH \nMOVIE, #82H \nSETB TR0 \nIn the above program, the Timer0 is configured as timer mode 1. In this case Gate = 0. Then \nthe TL0 will be loaded with F0H and TH0 is loaded with FFH, then enable the Timer0 \ninterrupt. At last set the TR0 of TCON register, and start the timer. \nMode2 (8-bit auto-reload timer mode) \n \nThe Mode 2 operation is the 8-bit auto reload timer or counter. In the following diagram, we \nare using Mode 2 for Timer1. \nIn this case every event for counter operations or machine cycles for timer operation, the \nTL1register will be incremented by 1. When the register pair overflows from FFH to 00H, \nthen the TF1 of TCON register will be high, also theTL1 will be reloaded with the content of \nTH1 and starts the operation again.  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_35_img_1.jpeg"
        ]
    },
    "36": {
        "text": "lOMoAR cPSD|26885763 \n \n36 | P a g e  \n \n \n \nSo for an example, we can say that if the TH1 and TL1 register both are holding F0H and it \nis in timer mode, then TF1 will be high after 10H= 16 machine cycles. When the clock \nfrequency is 12MHz this happens after 16 µs, then the following instructions generate an \ninterrupt once every 16 µs after Timer1 starts running. \nMOVTMOD, #20H \nMOVTL1, #0F0H \nMOVTH1, #0F0H \nMOVIE, #88H \nSETBTR1 \nIn the above program, the Timer1 is configured as timer mode 2. In this case Gate = 0. Then \nthe TL1 and TH1 are loaded with F0H. then enable the Timer1 interrupt. At last set the TR1 \nof TCON register, and start the timer. \nMode 3 of Timer/Counter \nMode 3 is different for Timer0 and Timer1. When the Timer0 is working in mode 3, the TL0 \nwill be used as an 8-bit timer/counter. It will be controlled by the standard Timer0 control \nbits, T0 and INT0 inputs. The TH0 is used as an 8-bit timer but not the counter. This is \ncontrolled by Timer1 Control bit TR1. When the TH0 overflows from FFH to 00H, then \nTF1 is set to 1. In the following diagram, we can Timer0 in Mode 3. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_36_img_1.jpeg"
        ]
    },
    "37": {
        "text": "lOMoAR cPSD|26885763 \n \n37 | P a g e  \n \n \nWhen the Timer1 is working in Mode 3, it simply holds the count but does not run. When \nTimer0 is in mode 3, the Timer1 is configured in one of the mode 0, 1 and 2. In this case, the \nTimer1 cannot interrupt the microcontroller. When the TF1 is used by TH0 timer, the \nTimer1 is used as Baud Rate Generator. \nThe meaning of gate bit in Timer0 and Timer1 for mode 3 is as follows \nIt controls the running of 8-bit timer/counter TL0 as like Mode 0, 1, or 2. The running of \nTH0 is controlled by TR1 bit only. So the gate bit in this mode for Timer0 has no specific \nrole.  \nThe mode 3 is present for applications requiring an extra 8-bit timer/counter. In Mode 3 \nof  Timer0, the 8051 has three timers. One 8-bit timer by TH0, another8-bit timer/counter by \nTL0, and one 16-bit timer/counter by Timer1. \nIf the Timer0 is in mode3, and Timer1 is working on either 0, 1 or 2, then the gun control of \nthe Timer1 is activated when the gate bit is low or INT1 is high. The run control is \ndeactivated when the gate is high and INT1 is low.  \n \n1.6. Serial Port in 8051 \nThere is a serial port in 8051 as mentioned in the pin diagram of 8051. 8051 has capability to \nperform parallel as well as serial communication. \n \nParallel communication in 8051: \n8051 can do 8-bit parallel communication as it has 8-bit ALU. For parallel communication, \nany of the ports ( P0 / P1 / P2 / P3 ) is used as a transmission channel between transmitter \nand receiver.  \n \nSerial communication in 8051: \nFor serial communication there are two separate pins known as serial port of 8051. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_37_img_1.jpeg"
        ]
    },
    "38": {
        "text": "lOMoAR cPSD|26885763 \n \n38 | P a g e  \n \n \nTxD: \nThis pin basically acts as a transmitter ( sending data ), but in some other modes it doesn’t do \nthe job of transmitter. As it is serial communication, it sends bit by bit, the processor gives 8-\nbit at 1 time and those 8-bits are stored in a register named SBUF. Processor gives 1 byte of \ndata that is to be transmitted to SBUF and from there bit by bit is transferred , firstly LSB \nand then at last MSB of the byte stored in SBUF. Once the total byte is transmitted, an \ninterrupt is sent to the processor by making some flag 1, so that the processor can send more \ndata for transmission as soon as the interrupt is received.  \n \nAfter every bit is transmitted, it requires delay for next bit transmission. So SBUF needs \ntriggering which is provided by \n• \nTimer T1 ( here T1 only needs to trigger, T1 does not require its overflow flag , mode \n3 in timers ). Here we can vary the delay, so data transmission delay can be varied ( \nfrequency can be varied ). It has a variable baud rate. \n• \nThere is an internal clock in 8051 ( fosc / 12 = 1Mhz ) , where delay cannot be varied, \nthis has fixed trigger delay. So frequency cannot be varied.It has a fixed baud rate. \nWhenever SBUF transferred 8bit of data , Ti flag becomes 1. Whenever processors go to \nISR( in other interrupts the flag is auto cleared whenever processor goes to ISR ) , in this the \nTi flag is not auto cleared. \n \nRxD: \nThis pin is basically for data reception . It received data bit by bit ( as the transmitter sends \nLSB first, it received LSB first ). There is also a register SBUF which stores 8 received bits. \nOnce the 8 bits are received, instead of sending an interrupt it firstly checks for errors ( errors \ncaused due to transmission). Once there is no error in the received information Ri flag is set \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_38_img_1.jpeg"
        ]
    },
    "39": {
        "text": "lOMoAR cPSD|26885763 \n \n39 | P a g e  \n \nand an interrupt is sent to the processor. Processor goes to ISR ( here also Ri is not cleared \nautomatically ). \n \nHow are SBUF in TxD and RxD different from each other ? \nIn SBUF of TxD, data is sent from processor to SBUF \nIn SBUF of RxD, data is sent from SBUF to the processor. \nIn this way both registers are differentiated by the processor. \n \nThere is a bit named SM2 ; \nIf SM2 = 1, then after SBUF of RxD is filled there will be error check And if not then there \nwill be no error check, directly an interrupt will be sent to the processor once SBUF in RxD \nis filled. \n \n1.6.1. Modes in serial communication: \nMode 1 ( 8-bit UART communication ): \nUART stands for universal asynchronous receiver-transmitter. It means receiver and \ntransmitter are asynchronous which mean they don’t have a common clock. Normally 8 bits \nare transmitted through the channel, but in this mode 10 bits are transmitted.  \n \nHere start and stop bits are system generated. \n \nSignificance of start and stop bit: \nFor eg: There is a transmitter and receiver. First C8H ( 1100 1000 ) data is transmitted and \nthen for 10min there is no transmission and after that again 8EH ( 1000 1110 )is transmitted. \nIf there is no transmission, last bit transmitted would be remained in the channel \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_39_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_39_img_2.jpeg"
        ]
    },
    "40": {
        "text": "lOMoAR cPSD|26885763 \n \n40 | P a g e  \n \nReceiver assumes blue data ( when there was no communication ) also as data.  \n \n \nHere green is the start bit which is zero. And then the yellow colored is stop bit which is 1. \nWhenever the first 0 bit comes, the receiver discards the start bit and accepts the next 8 bits \nand stores in SBUF. Then the 9th bit is 1 , this bit is stored in RB8 ( will be discussed later ). \nThen after this whenever the next zero bit comes ( that zero bit is discarded and accepts the \nnext 8 bits and so on ). \n \nStop bit is also used for error checking. Whenever SM2=1, It checks for error, If the RB8 = 1 \n( which means stop = 1 received, so the data is received correctly ) and if RB8=0 ( \ntransmitter generated stop as 1, but received as 0 ) so there is an error. If there is an error in \nreceived data, no interrupt is sent to the processor. \n \nThis mode is variable baud rate, which means it is triggered by timer 1. \nMode 2 ( 9-bit UART communication ): \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_40_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_40_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_40_img_3.jpeg"
        ]
    },
    "41": {
        "text": "lOMoAR cPSD|26885763 \n \n41 | P a g e  \n \nThe 9th bit is a programmable bit and it is given through TB8. Here 9th bit is 1 and it is used \nfor error checking and stop bit for triggering the data high ( so start bit gets 0 and so on ). \nWhy the 9th bit , when the already stop bit exists? \nStandard value of 9th bit is 1 and can be made 0. \nWhenever SM2 = 1( receiver accepts only errorless data ) and if 9th bit is 1, then only \nerrorless data is accepted or else discarded. Discarding data is a purpose. \n \nMode 3 ( 9-bit UART communication ): \nThis mode is completely similar to mode 2, in mode 2 for triggering timer is used Whereas in \nthis mode internal clock is used for triggering. It has a fixed baud rate.  \n \nMode 0 : \nTotally there were four modes in serial port of 8051, but for better understanding mode 0 is \nexplained after three modes. In this mode data is transferred and received only through the \nRxD channel. TxD is used for clocks. This is synchronous mode of communication.  \nSuch a system is also known as half duplex mode. It has fixed baud rate. \n \nSCON register: \n \n \nSM0 and SM1: \nThese are used to select the mode. \n \nSM0 \nSM1 \nMode \n0 \n0 \n0 \n0 \n1 \n1 \n1 \n0 \n2 \n1 \n1 \n3 \nSM2: \nIf SM2 = 1, error is checked Or else no error checking is done. \nREN: \nReceiver enable, If REN=1, receiver will receive the data or else not. \nTB8: \nThis is the 9th bit to be transmitted. \nRB8: \nThis is the 9th bit to be received. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_41_img_1.jpeg"
        ]
    },
    "42": {
        "text": "lOMoAR cPSD|26885763 \n \n42 | P a g e  \n \nTi : \nWhen 8-bits are received in SBUF , then Ri = 1, that would send an interrupt to the \nprocessor.  \nRi : \nWhen 8-bits are sent from SBUF,and SBUF is empty , then Ri = 1, that would send an \ninterrupt to the processor. Before Ri=1, it checks for error based on SM2. \n \n1.7. 8-Bit Interrupts \nInterrupts are events detected by the MCU which cause normal program flow to be pre-\nempted. Interrupts pause the current program and transfer control to a specified user-written \nfirmware routine called the Interrupt Service Routine (ISR). The ISR processes the interrupt \nevent, then resumes normal program flow. \n \n1.7.1. Overview of Interrupt Process \nProgram MCU to react to interrupts \nThe MCU must be programmed to enable interrupts to occur. Setting the Global Interrupt \nEnable (GIE) and, in many cases, the Peripheral Interrupt Enable (PEIE), enables the MCU \nto receive interrupts. GIE and PEIE are located in the Interrupt Control (INTCON) special \nfunction register. \n \nEnable interrupts from selected peripherals \nEach peripheral on the MCU has an individual enable bit. A peripheral's individual interrupt \nenable bit must be set, in addition to GIE/PEIE, before the peripheral can generate an \ninterrupt. The individual interrupt enable bits are located in INTCON, PIE1, PIE2, and PIE3. \n \nPeripheral asserts an interrupt request \nWhen a peripheral reaches a state where program intervention is needed, the peripheral sets \nan Interrupt Request Flag (xxIF). These interrupt flags are set regardless of the status of the \nGIE, PEIE, and individual interrupt enable bits. The interrupt flags are located in INTCON, \nPIR1, PIR2, and PIR3. \nThe interrupt request flags are latched high when set and must be cleared by the user-written \nISR. \n \nInterrupt occurs \nWhen an interrupt request flag is set and the interrupt is properly enabled, the interrupt \nprocess begins: \n1. Global Interrupts are disabled by clearing GIE to 0. \n2. The current program context is saved to the shadow registers. \n3. The value of the Program Counter is stored on the return stack. \n4. Program control is transferred to the interrupt vector at address 04h. \n",
        "images": []
    },
    "43": {
        "text": "lOMoAR cPSD|26885763 \n \n43 | P a g e  \n \n \nISR runs \nThe ISR is a function written by the user and placed at address 04h. The ISR does the \nfollowing: \n1. Checks the interrupt-enabled peripherals for the source of the interrupt request. \n2. Performs the necessary peripheral tasks. \n3. Clears the appropriate interrupt request flag. \n4. Executes the Return From Interrupt instruction (RETFIE) as the final ISR instruction. \n \nControl is returned to the Main program \nWhen RETFIE is executed: \n1. Global Interrupts are enabled (GIE=1). \n2. The program context is restored from the Shadow registers. \n3. The return address from the stack is loaded into the Program Counter. \n4. Execution resumes from point at which it was interrupted. \n \n1.7.2. Registers Used to Process Interrupts \nInterrupt Control Register \nINTCON register \n \n GIE - Global Interrupt Enable \n PEIE - Peripheral Interrupt Enable \n TMR0IE - Timer0 Interrupt Enable \n INTE - External Interrupt Enable \n IOCIE - Interrupt on Change Enable \n TMR0IF - Timer0 Interrupt flag \n INTF - External Interrupt flag \n IOCIF - Interrupt on Change flag \nINTCON contains global and peripheral interrupt enable flags as well as the individual \ninterrupt request flags and interrupt enable flags for three of the PIC16F1xxxx interrupts. \nInterrupt Enable Registers \nPIE1 register \n \n TMR1GIE - Timer1 Gate Interrupt Enable \n ADIE - Analog-to-Digital Converter (ADC) Interrupt Enable \n RCIE - Universal Synchronous Asynchronous Receiver Tranmsitter (USART) Receive \nInterrupt Enable \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_43_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_43_img_2.jpeg"
        ]
    },
    "44": {
        "text": "lOMoAR cPSD|26885763 \n \n44 | P a g e  \n \n TXIE - USART Transmit Interrupt Enable \n SSPIE - Synchronous Serial Port (MSSP) Interrupt Enable \n CCP1IE - CCP1 Interrupt Enable \n TMR2IE - Timer2 Interrupt Enable \n TMR1IE - Timer1 Interrupt Enable \nPIE2 register \n \n OSFIE - Oscillator Fail Interrupt Enable \n C2IE - Comparator C2 Interrupt Enable \n C1IE - Comparator C1 Interrupt Enable \n EEIE - EEPROM Write Completion Interrupt Enable \n BCLIE - MSSP Bus Collision Interrupt Enable \n LCDIE - LCD Module Interrupt Enable \n---  - Unimplemented, read as 0 \n CCP2IE - CCP2 Interrupt Enable \nPIE3 register \n \n--- - Unimplemented read as 0 \n CCP5IE - CCP5 Interrupt Enable \n CCP4IE - CCP4 Interrupt Enable \n CCP3IE - CCP3 Interrupt Enable \n TMR6IE - Timer6 Interrupt Enable \n--- - Unimplemented, read as 0 \n TMR4IE - Timer4 Interrupt Enable \n--- - Unimplemented, read as 0 \nPIE1, PIE2, and PIE3 contain the individual interrupt enable flags for the MCU's \nperipherals. \nInterrupt Request Registers \nPIR1 register \n \n TMR1GIF - Timer1 Gate Interrupt Flag \n ADIF - ADC Interrupt Flag \n RCIF - USART Receive Interrupt Flag \n TXIF - USART Transmit Interrupt Flag \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_44_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_44_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_44_img_3.jpeg"
        ]
    },
    "45": {
        "text": "lOMoAR cPSD|26885763 \n \n45 | P a g e  \n \n SSPIF - MSSP Interrupt Flag \n CCP1IF - CCP1 Interrupt Flag \n TMR2IF - Timer2 Interrupt Flag \n TMR1IF - Timer1 Interrupt Flag \nPIR2 register \n \n OSFIF - Oscillator Fail Interrupt Flag \n C2IF - Comparator C2 Interrupt Flag \n C1IF - Comparator C1 Interrupt Flag \n EEIF - EEPROM Write Completion Interrupt Flag \n BCLIF - MSSP Bus Collision Interrupt Flag \n LCDIF - LCD Module Interrupt Flag \n---  - Unimplemented, read as 0 \n CCP2IF - CCP2 Interrupt Flag \nPIR3 register \n \n--- - Unimplemented, read as 0 \n CCP5IF - CCP5 Interrupt Flag \n CCP4IF - CCP4 Interrupt Flag \n CCP3IF - CCP3 Interrupt Flag \n TMR6IF - Timer6 Interrupt Flag \n--- - Unimplemented, read as 0 \n TMR4IF - Timer4 Interrupt Flag \n--- - Unimplemented, read as 0 \nPIR1, PIR2, and PIR3 contain the individual interrupt request flags for the MCU's \nperipherals. \nOPTION_REG \nOPTION_REG \n \n \nThe INTEDG flag in OPTION_REG is used to set a rising or falling edge on the INT pin as \nthe trigger for an INTE interrupt. \nEnabling Interrupts \nCore Interrupts \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_45_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_45_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_45_img_3.jpeg"
        ]
    },
    "46": {
        "text": "lOMoAR cPSD|26885763 \n \n46 | P a g e  \n \nThree interrupt sources (Timer0, External Interrupt, and Interrupt on Change) have interrupt \nenable bits located in INTCON. These interrupts are referred to as core interrupts. \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_46_img_1.jpeg"
        ]
    },
    "47": {
        "text": "lOMoAR cPSD|26885763 \n \n47 | P a g e  \n \n \n \n \n \nUNIT II \n \nEMBEDDED C PROGRAMMING \n \n \n• Memory And I/O Devices Interfacing \n• Programming Embedded Systems in C \n• Need For RTOS \n• Multiple Tasks and Processes \n• Context Switching \n• Priority Based Scheduling Policies \n \n \n",
        "images": []
    },
    "48": {
        "text": "lOMoAR cPSD|26885763 \n \n48 | P a g e  \n \n2.1. Memory and I/O Interfacing \nSeveral memory chips and I/O devices are connected to a microprocessor. The following \nfigure shows a schematic diagram to interface memory chips and I/O devices to a \nmicroprocessor. \n \n \n2.1.1. Memory Interfacing \nWhen we are executing any instruction, the address of memory location or an I/O device is \nsent out by the microprocessor. The corresponding memory chip or I/O device is selected by \na decoding circuit. \nMemory requires some signals to read from and write to registers and microprocessor \ntransmits some signals for reading or writing data. \nThe interfacing process includes matching the memory requirements with the microprocessor \nsignals. Therefore, the interfacing circuit should be designed in such a way that it matches \nthe memory signal requirements with the microprocessor's signals. \n \n2.1.2. I/O interfacing \nAs we know, keyboard and displays are used as communication channel with outside world. \nTherefore, it is necessary that we interface keyboard and displays with the microprocessor. \nThis is called I/O interfacing. For this type of interfacing, we use latches and buffers for \ninterfacing the keyboards and displays with the microprocessor. \nBut the main drawback of this interfacing is that the microprocessor can perform only one \nfunction. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_48_img_1.png"
        ]
    },
    "49": {
        "text": "lOMoAR cPSD|26885763 \n \n49 | P a g e  \n \n \n8051 Microcontroller Memory Organization \nIn the 8051 Microcontroller, we have seen the 8051 Microcontroller Introduction and Basics, \nPin Diagram, Pin Description and the Architecture overview. we will continue exploring \n8051 Microcontroller by understanding the 8051 Microcontroller Memory Organization, \nProgram Memory (ROM), Data Memory (RAM), External Memory. \nDifferences between microprocessor and microcontroller \n The main difference can be stated as on-chip memory i.e., a Microcontroller has both \nProgram Memory (ROM) and Data Memory (RAM) on the same chip (IC), whereas a \nMicroprocessor has to be externally interfacing with the memory modules. \n \nHence, it is clear that the memory is an important part of the 8051 Microcontroller \nArchitecture (for that matter, any Microcontroller). So, it is important for us to understand \nthe 8051 Microcontroller Memory Organization i.e., how memory is organized, how the \nprocessor accesses each memory and how to interface external memory with 8051 \nMicrocontroller. \n \nBefore going in to the details of the 8051 Microcontroller Memory Organization, we will \nfirst see a little bit about the Computer Architecture and then proceed with memory \norganization of 8051 Microcontroller. \n1.2.3. Types of Computer Architecture \nBasically, Microprocessors or Microcontrollers are classified based on the two types of \nComputer Architecture: Von Neumann Architecture and Harvard Architecture. \nVon Neumann Architecture \nVon Neumann Architecture or Princeton Architecture is a Computer Architecture, where the \nProgram i.e., the Instructions and the Data are stored in a single memory. Since the \nInstruction Memory and the Data Memory are the same, the Processor or CPU cannot access \nboth Instructions and Data at the same time as they use a single bus. This type of architecture \nhas severe limitations to the performance of the system as it creates a bottleneck while \naccessing the memory. \n \n",
        "images": []
    },
    "50": {
        "text": "lOMoAR cPSD|26885763 \n \n50 | P a g e  \n \n \n \nHarvard Architecture \nHarvard Architecture, in contrast to Von Neumann Architecture, uses separate memory for \nInstruction (Program) and Data. Since the Instruction Memory and Data Memory are \nseparate in a Harvard Architecture, their signal paths i.e., buses are also different and hence, \nthe CPU can access both Instructions and Data at the same time. \nAlmost all Microcontrollers, including 8051 Microcontroller implement Harvard \nArchitecture. \n \n1.2.4. 8051 Microcontroller Memory Organization \nThe 8051 Microcontroller Memory is separated in Program Memory (ROM) and Data \nMemory (RAM). The Program Memory of the 8051 Microcontroller is used for storing the \nprogram to be executed i.e., instructions. The Data Memory on the other hand, is used for \nstoring temporary variable data and intermediate results. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_50_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_50_img_2.jpeg"
        ]
    },
    "51": {
        "text": "lOMoAR cPSD|26885763 \n \n51 | P a g e  \n \n8051 Microcontroller has both Internal ROM and Internal RAM. If the internal memory is \ninadequate, you can add external memory using suitable circuits. \n1.2.4.1. Program Memory (ROM) of 8051 Microcontroller \nIn 8051 Microcontroller, the code or instructions to be executed are stored in the Program \nMemory, which is also called as the ROM of the Microcontroller. The original 8051 \nMicrocontroller by Intel has 4KB of internal ROM. \nSome variants of 8051 like the 8031 and 8032 series doesn’t have any internal ROM \n(Program Memory) and must be interfaced with external Program Memory with instructions \nloaded in it. \n \nAlmost all modern 8051 Microcontrollers, like 8052 Series, have 8KB of Internal Program \nMemory (ROM) in the form of Flash Memory (ROM) and provide the option of \nreprogramming the memory. \n \nIn case of 4KB of Internal ROM, the address space is 0000H to 0FFFH. If the address space \ni.e., the program addresses exceed this value, then the CPU will automatically fetch the code \nfrom the external Program Memory. \n \nFor this, the External Access Pin (EA Pin) must be pulled HIGH i.e., when the EA Pin is \nhigh, the CPU first fetches instructions from the Internal Program Memory in the address \nrange of 0000H to 0FFFFH and if the memory addresses exceed the limit, then the \ninstructions are fetched from the external ROM in the address range of 1000H to FFFFH. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_51_img_1.png"
        ]
    },
    "52": {
        "text": "lOMoAR cPSD|26885763 \n \n52 | P a g e  \n \n \n \nThere is another way to fetch the instructions: ignore the Internal ROM and fetch all the \ninstructions only from the External Program Memory (External ROM). For this scenario, the \nEA Pin must be connected to GND. In this case, the memory addresses of the external ROM \nwill be from 0000H to FFFFH. \n \n1.2.4.2. Data Memory (RAM) of 8051 Microcontroller \nThe Data Memory or RAM of the 8051 Microcontroller stores temporary data and \nintermediate results that are generated and used during the normal operation of the \nmicrocontroller. Original Intel’s 8051 Microcontroller had 128B of internal RAM. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_52_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_52_img_2.jpeg"
        ]
    },
    "53": {
        "text": "lOMoAR cPSD|26885763 \n \n53 | P a g e  \n \n \nBut almost all modern variants of 8051 Microcontroller have 256B of RAM. In this 256B, \nthe first 128B i.e., memory addresses from 00H to 7FH is divided in to Working Registers \n(organized as Register Banks), Bit – Addressable Area and General Purpose RAM (also \nknown as Scratchpad area). \nIn the first 128B of RAM (from 00H to 7FH), the first 32B i.e., memory from addresses 00H \nto 1FH consists of 32 Working Registers that are organized as four banks with 8 Registers in \neach Bank. \n \nThe 4 banks are named as Bank0, Bank1, Bank2 and Bank3. Each Bank consists of 8 \nregisters named as R0 – R7. Each Register can be addressed in two ways: either by name or \nby address. To address the register by name, first the corresponding Bank must be selected. \nIn order to select the bank, we have to use the RS0 and RS1 bits of the Program Status Word \n(PSW) Register (RS0 and RS1 are 3rd and 4th bits in the PSW Register). \n \nWhen addressing the Register using its address i.e., 12H for example, the corresponding \nBank may or may not be selected. (12H corresponds to R2 in Bank2). \n \nThe next 16B of the RAM i.e., from 20H to 2FH are Bit – Addressable memory locations. \nThere are totally 128 bits that can be addressed individually using 00H to 7FH or the entire \nbyte can be addressed as 20H to 2FH. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_53_img_1.png"
        ]
    },
    "54": {
        "text": "lOMoAR cPSD|26885763 \n \n54 | P a g e  \n \n1.2.5. Interfacing External Memory with 8051 Microcontroller \nIt is always good to have an option to expand the capabilities of a Microcontroller, whether it \nis in terms of Memory or IO or anything else. Such expansion will be useful to avoid design \nthrottling. We have seen that a typical 8051 Microcontroller has 4KB of ROM and 128B of \nRAM (most modern 8051 Microcontroller variants have 8K ROM and 256B of RAM). \n \nThe designer of an 8051 Microcontroller based system is not limited to the internal RAM and \nROM present in the 8051 Microcontroller. There is a provision of connecting both external \nRAM and ROM i.e., Data Memory and Program. \n \nThe reason for interfacing external Program Memory or ROM is that complex programs \nwritten in high – level languages often tend to be larger and occupy more memory. \nAnother important reason is that chips like 8031 or 8032, which doesn’t have any internal \nROM, have to be interfaced with external ROM. \n \nA maximum of 64KB of Program Memory (ROM) and Data Memory (RAM) each can be \ninterface with the 8051 Microcontroller. \n \nThe following image shows the block diagram of interfacing 64KB of External RAM and \n64KB of External ROM with the 8051 Microcontroller. \n \nAn important point to remember when interfacing external memory with 8051 \nMicrocontroller is that Port 0 (P0) cannot be used as an IO Port as it will be used for \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_54_img_1.png"
        ]
    },
    "55": {
        "text": "lOMoAR cPSD|26885763 \n \n55 | P a g e  \n \nmultiplexed address and data bus (A0 – A7 and D0 – D7). Not always, but Port 2 may be \nused as higher byte of the address bus. \n2.2. Embedded C Programming with Keil Language \nEmbedded C is most popular programming language in software field for developing \nelectronic gadgets. Each processor used in electronic system is associated with embedded \nsoftware. \n \nEmbedded C programming plays a key role in performing specific function by the processor. \nIn day-to-day life we used many electronic devices such as mobile phone, washing machine, \ndigital camera, etc. These all device working is based on microcontroller that are \nprogrammed by embedded C. \n \nIn embedded system programming C code is preferred over other language. Due to the \nfollowing reasons: \n \no Easy to understand \no High Reliability \no Portability \no Scalability \nLet's see the block diagram representation of embedded system programming: \n \n \n2.2.1. Embedded System Programming: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_55_img_1.jpeg"
        ]
    },
    "56": {
        "text": "lOMoAR cPSD|26885763 \n \n56 | P a g e  \n \n \nBasic Declaration \nLet's see the block diagram of Embedded C Programming development: \n \n \nFunction is a collection of statements that is used for performing a specific task and a \ncollection of one or more functions is called a programming language. Every language is \nconsisting of basic elements and grammatical rules. The C language programming is \ndesigned for function with variables, character set, data types, keywords, expression and so \non are used for writing a C program. \n \nThe extension in C language is known as embedded C programming language. As compared \nto above the embedded programming in C is also have some additional features like data \ntypes, keywords and header file etc is represented by \n \n#include<microcontroller name.h>   \n \nBasic Embedded C Programming Steps \nLet's see the block diagram representation of Embedded C Programming Steps: \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_56_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_56_img_2.png"
        ]
    },
    "57": {
        "text": "lOMoAR cPSD|26885763 \n \n57 | P a g e  \n \nThe microcontroller programming is different for each type of operating system. Even \nthough there are many operating system are exist such as Windows, Linux, RTOS, etc but \nRTOS has several advantage for embedded system development. \n \n2.2.2. Basics of Embedded C Program \nEmbedded C is one of the most popular and most commonly used Programming Languages \nin the development of Embedded Systems. So, we will see some of the Basics of Embedded \nC Program and the Programming Structure of Embedded C. \n \n2.2.2.1. What is an Embedded System? \nAn Embedded System is a combination of Hardware and Software. My desktop computer \nalso has hardware and software. Does that mean a desktop computer is also an Embedded \nSystem? NO. A desktop computer is considered a general purpose system as it can do many \ndifferent tasks that too simultaneously. Some common tasks are playing videos, working on \noffice suites, editing images (or videos), browsing the web, etc. \n \nAn Embedded System is more of an application oriented system i.e. it is dedicated to perform \na single task (or a limited number of tasks, but all working for a single main aim). \n \nAn example for embedded system, which we use daily, is a Wireless Router. In order to get \nwireless internet connectivity on our mobile phones and laptops, we often use routers. The \ntask of a wireless router is to take the signal from a cable and transmit it wirelessly. And take \nwireless data from the device (like a mobile) and send it through the cable. \nWe use washing machines almost daily but wouldn’t get the idea that it is an embedded \nsystem consisting of a Processor (and other hardware as well) and software. \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_57_img_1.jpeg"
        ]
    },
    "58": {
        "text": "lOMoAR cPSD|26885763 \n \n58 | P a g e  \n \nIt takes some inputs from the user like wash cycle, type of clothes, extra soaking and rinsing, \nspin rpm, etc., performs the necessary actions as per the instructions and finishes washing \nand drying the clothes. If no new instructions are given for the next wash, then the washing \nmachines repeats the same set of tasks as the previous wash. \n \nEmbedded Systems can not only be stand-alone devices like Washing Machines but also be a \npart of a much larger system. An example for this is a Car. A modern day Car has several \nindividual embedded systems that perform their specific tasks with the aim of making a \nsmooth and safe journey. \n \nSome of the embedded systems in a Car are Anti-lock Braking System (ABS), Temperature \nMonitoring System, Automatic Climate Control, Tire Pressure Monitoring System, Engine \nOil Level Monitor, etc. \n \n2.2.3. Programming Embedded Systems \nAs mentioned earlier, Embedded Systems consists of both Hardware and Software. If we \nconsider a simple Embedded System, the main Hardware Module is the Processor. The \nProcessor is the heart of the Embedded System and it can be anything like a Microprocessor, \nMicrocontroller, DSP, CPLD (Complex Programmable Logic Device) or an FPGA (Field \nProgrammable Gated Array). \n \nAll these devices have one thing in common: they are programmable i.e., we can write a \nprogram (which is the software part of the Embedded System) to define how the device \nactually works. \n \nEmbedded Software or Program allow Hardware to monitor external events (Inputs / \nSensors) and control external devices (Outputs) accordingly. During this process, the \nprogram for an Embedded System may have to directly manipulate the internal architecture \nof the Embedded Hardware (usually the processor) such as Timers, Serial Communications \nInterface, Interrupt Handling, and I/O Ports etc. \n \nFrom the above statement, it is clear that the Software part of an Embedded System is \nequally important as the Hardware part. There is no point in having advanced Hardware \nComponents with poorly written programs (Software). \n \nThere are many programming languages that are used for Embedded Systems like Assembly \n(low-level Programming Language), C, C++, JAVA (high-level programming languages), \nVisual Basic, JAVA Script (Application level Programming Languages), etc. \n \n",
        "images": []
    },
    "59": {
        "text": "lOMoAR cPSD|26885763 \n \n59 | P a g e  \n \nIn the process of making a better embedded system, the programming of the system plays a \nvital role and hence, the selection of the Programming Language is very important. \n \n2.2.4. Factors for Selecting the Programming Language \nThe following are few factors that are to be considered while selecting the Programming \nLanguage for the development of Embedded Systems. \n \n• \nSize: The memory that the program occupies is very important as Embedded \nProcessors like Microcontrollers have a very limited amount of ROM (Program \nMemory). \n• \nSpeed: The programs must be very fast i.e., they must run as fast as possible. The \nhardware should not be slowed down due to a slow running software. \n• \nPortability: The same program can be compiled for different processors. \n• \nEase of Implementation \n• \nEase of Maintenance \n• \nReadability \n \nEarlier Embedded Systems were developed mainly using Assembly Language. Even though \nAssembly Language is closest to the actual machine code instructions and produces small \nsize hex files, the lack of portability and high amount of resources (time and man power) \nspent on developing the code, made the Assembly Language difficult to work with. \n \nThere are other high-level programming languages that offered the above mentioned features \nbut none were close to C Programming Language. Some of the benefits of using Embedded \nC as the main Programming Language: \n \n• \nSignificantly easy to write code in C \n• \nConsumes less time when compared to Assembly \n• \nMaintenance of code (modifications and updates) is very simple \n• \nMake use of library functions to reduce the complexity of the main code \n• \nYou can easily port the code to other architecture with very little modifications \n \n2.2.5. Embedded System and Its Real Time Applications \n• Embedded System and its Real Time Applications. Focuses on different topics like \nWhat is an Embedded System, What are the Real Time Applications of Embedded \nSystems, What is the Future of Embedded Systems, etc.   \n• The \nWorld \nis \nfilled \nwith \nEmbedded \nSystems. \nThe development \nof \nMicrocontroller has paved path for several Embedded System application and they \nplay a significant role (and will continue to play in the future as well) in our modern \nday life in one way or the other. \n",
        "images": []
    },
    "60": {
        "text": "lOMoAR cPSD|26885763 \n \n60 | P a g e  \n \n• Starting from consumer electronics like Digital Cameras, DVD Players to high end \nand advanced systems like Flight Controllers and Missile Guidance Systems, \nembedded systems are omnipresent and became an important part of our life. \n• The way we live our life has been significantly improved with the utilization of \nEmbedded Systems and they will continue to be an integral part of our lives even \ntomorrow. \n• Another important concept we are hearing these days is Real – Time Systems. In \na real time system, Real Time Computing takes place, where a computer (an \nEmbedded System) must generate response to events within certain time limits. \n• Before going in to the details of Real Time Applications of Embedded Systems, we \nwill first see what an Embedded System is, what is a real time system and what is real \ntime operating system.    \n \n \n2.2.6. Components of Embedded System \nAn Embedded System consists of four main components. They are the Processor \n(Microprocessor or Microcontroller), Memory (RAM and ROM), Peripherals (Input and \nOutput) and Software (main program). \n \nProcessor: The heart of an Embedded System is the Processor. Based on the functionality of \nthe system, the processor can be anything like a General Purpose Processor, a single purpose \nprocessor, an Application Specific Processor, a microcontroller or an FPGA. \nMemory: Memory is another important part of an embedded system. It is divided in to RAM \nand ROM. Memory in an Embedded System (ROM to be specific) stores the main program \nand RAM stores the program variables and temporary data. \n \nPeripherals: In order to communicate with the outside world or control the external devices, \nan Embedded System must have Input and Output Peripherals. Some of these peripherals \ninclude Input / Output Ports, Communication Interfaces, Timers and Counters, etc. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_60_img_1.jpeg"
        ]
    },
    "61": {
        "text": "lOMoAR cPSD|26885763 \n \n61 | P a g e  \n \nSoftware: All the hardware work according to the software (main program) written. Software \npart of an Embedded System includes initialization of the system, controlling inputs and \noutputs, error handling etc. \n \nNOTE: Many Embedded Systems, usually small to medium scaled systems, generally \nconsists of a Microcontroller as the main processor. With the help of a Microcontroller, the \nprocessor, memory and few peripherals will be integrated in to a single device. \n \n2.2.7. Introduction to Embedded C Programming Language \nBefore going in to the details of Embedded C Programming Language and basics of \nEmbedded C Program, we will first talk about the C Programming Language. \n \nThe C Programming Language became so popular that it is used in a wide range of \napplications ranging from Embedded Systems to Super Computers. \n \nEmbedded C Programming Language, which is widely used in the development of \nEmbedded Systems, is an extension of C Program Language. The Embedded C Programming \nLanguage uses the same syntax and semantics of the C Programming Language like main \nfunction, declaration of datatypes, defining variables, loops, functions, statements, etc. \n \nThe extension in Embedded C from standard C Programming Language include I/O \nHardware Addressing, fixed point arithmetic operations, accessing address spaces, etc. \n \n2.2.7.1. Difference between C and Embedded C \nThere is actually not much difference between C and Embedded C apart from few extensions \nand the operating environment. Both C and Embedded C programming are ISO Standards \nthat have almost same syntax, datatypes, functions, etc. \n \nEmbedded C is basically an extension to the Standard C Programming Language with \nadditional features like Addressing I/O, multiple memory addressing and fixed-point \narithmetic, etc. \n \nC Programming Language is generally used for developing desktop applications, whereas \nEmbedded C is used in the development of Microcontroller based applications. \n \n2.2.7.2. Keywords in Embedded C \nA Keyword is a special word with a special meaning to the compiler (a C Compiler for \nexample, is a software that is used to convert program written in C to Machine Code). For \nexample, if we take the Keil’s Cx51 Compiler (a popular C Compiler for 8051 based \nMicrocontrollers) the following are some of the keywords: \n",
        "images": []
    },
    "62": {
        "text": "lOMoAR cPSD|26885763 \n \n62 | P a g e  \n \n• \nbit \n• \nsbit \n• \nsfr \n• \nsmall \n• \nlarge \nThe following table lists out all the keywords associated with the Cx51 C Compiler. \n_at_ \nalien \nbdata \nbit \ncode \ncompact \ndata \nfar \nidata \ninterrupt \nlarge \npdata \n_priority_ \nreentrant \nsbit \nsfr \nsfr16 \nsmall \n_task_ \nusing \nxdata \n \nData Types in Embedded C \nData Types in C Programming Language (or any programming language for that matter) help \nus declaring variables in the program. There are many data types in C Programming \nLanguage like signed int, unsigned int, signed char, unsigned char, float, double, etc. In \naddition to these there few more data types in Embedded C. \nThe following are the extra data types in Embedded C associated with the Keil’s Cx51 \nCompiler. \n• \nbit \n• \nsbit \n• \nsfr \n• \nsfr16 \nThe following table shows some of the data types in Cx51 Compiler along with their ranges. \nData Type \nBits (Bytes) \nRange \nbit \n1 \n0 or 1 (bit addressable part of RAM) \nsigned int \n16 (2) \n-32768 to +32767 \nunsigned int \n16 (2) \n0 to 65535 \nsigned char \n8 (1) \n-128 to +127 \nunsigned \n8 (1) \n0 to 255 \nfloat \n32 (4) \n±1.175494E-38 to ±3.402823E+38 \ndouble \n32 (4) \n±1.175494E-38 to ±3.402823E+38 \nsbit \n1 \n0 or 1 (bit addressable part of RAM) \nsfr \n8 (1) \nRAM Addresses (80h to FFh) \nsfr16 \n16 (2) \n0 to 65535 \n \nBasic Structure of an Embedded C Program (Template for Embedded C Program) \n",
        "images": []
    },
    "63": {
        "text": "lOMoAR cPSD|26885763 \n \n63 | P a g e  \n \nThe next thing to understand in the Basics of Embedded C Program is the basic structure or \nTemplate of Embedded C Program. This will help us in understanding how an Embedded C \nProgram is written. \nThe following part shows the basic structure of an Embedded C Program. \n \no Multiline Comments . . . . . Denoted using /*……*/ \no Single Line Comments . . . . . Denoted using // \no Preprocessor Directives . . . . . #include<…> or #define \no Global Variables . . . . . Accessible anywhere in the program \no Function Declarations . . . . . Declaring Function \no Main Function . . . . . Main Function, execution begins here \n{ \nLocal Variables . . . . . Variables confined to main function \nFunction Calls . . . . . Calling other Functions \nInfinite Loop . . . . . Like while(1) or for(;;) \nStatements . . . . . \n…. \n…. \n} \no Function Definitions . . . . . Defining the Functions \n{ \nLocal Variables . . . . . Local Variables confined to this Function \nStatements . . . . . \n…. \n…. \n} \nBefore seeing an example with respect to 8051 Microcontroller, we will first see the different \ncomponents in the above structure. \n \n2.2.7.3.Different Components of an Embedded C Program \nComments: Comments are readable text that are written to help us (the reader) understand \nthe code easily. They are ignored by the compiler and do not take up any memory in the final \ncode (after compilation). \n \nThere are two ways you can write comments: one is the single line comments denoted by // \nand the other is multiline comments denoted by /*….*/. \n \nPreprocessor Directive: A Preprocessor Directive in Embedded C is an indication to the \ncompiler that it must look in to this file for symbols that are not defined in the program. \n \n",
        "images": []
    },
    "64": {
        "text": "lOMoAR cPSD|26885763 \n \n64 | P a g e  \n \nGlobal Variables: Global Variables, as the name suggests, are Global to the program i.e., \nthey can be accessed anywhere in the program. \n \nLocal Variables: Local Variables, in contrast to Global Variables, are confined to their \nrespective function. \n \nMain Function: Every C or Embedded C Program has one main function, from where the \nexecution of the program begins. \n \nBasic Embedded C Program \nTill now, we have seen a few Basics of Embedded C Program like difference between C and \nEmbedded C, basic structure or template of an Embedded C Program and different \ncomponents of the Embedded C Program. \n \nExample of Embedded C Program \nThe following image shows the circuit diagram for the example circuit. It contains an 8051 \nbased Microcontroller (AT89S52) along with its basic components (like RESET Circuit, \nOscillator Circuit, etc.) and components for blinking LEDs (LEDs and Resistors). \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_64_img_1.jpeg"
        ]
    },
    "65": {
        "text": "lOMoAR cPSD|26885763 \n \n65 | P a g e  \n \nIn order to write the Embedded C Program for the above circuit, we will use the Keil C \nCompiler. This compiler is a part of the Keil µVision IDE. The program is shown below. \n \n#include<reg51.h> // Preprocessor Directive \nvoid delay (int); // Delay Function Declaration \nvoid main(void) // Main Function \n{ \nP1 = 0x00; \n/* Making PORT1 pins LOW. All the LEDs are OFF. \n * (P1 is PORT1, as defined in reg51.h) */ \nwhile(1) // infinite loop \n{ \n \nP1 = 0xFF; // Making PORT1 Pins HIGH i.e. LEDs are ON. \ndelay(1000); \n/* Calling Delay function with Function parameter as 1000. \n * This will cause a delay of 1000mS i.e. 1 second */ \nP1 = 0x00; // Making PORT1 Pins LOW i.e. LEDs are OFF. \ndelay(1000); \n} \n} \nvoid delay (int d) // Delay Function Definition \n{ \n \nunsigned int i=0; // Local Variable. Accessible only in this function. \n /* This following step is responsible for causing delay of 1000mS \n * (or as per the value entered while calling the delay function) */ \nfor(; d>0; d–) \n{ \nfor(i=250; i>0; i – -); \nfor(i=248; i>0; i – -); \n} \n} \n \n2.2.7.4. LED Blinking using 8051 Microcontroller \nLED is a semiconductor device used in many electronic devices, mostly used for indication \npurposes. It is used widely as indicator during test for checking the validity of results at \ndifferent stages. \n \n",
        "images": []
    },
    "66": {
        "text": "lOMoAR cPSD|26885763 \n \n66 | P a g e  \n \nIt is very cheap and easily available in variety of shape, color and size. The LEDs are also \nused in designing of message display boards and traffic control signal lights etc. \n \nConsider the Proteus Software based simulation of LED blinking using 8051 \nMicrocontroller is shown below:- \n \nIn above Proteus based simulation the LEDs are interfaced to the PORT0 of the 8051 \nmicrocontroller. \n \nLet's see the Embedded C Program for generating the LED output sequence as shown \nbelow: \n00000001   \n00000010   \n00000100.....   \n.... And so on up to 10000000.   \n#include<reg51.h>   \nvoid main()   \n{   \nunsigned int k;   \nunsigned char l,b;   \nwhile(1)   \n{   \nP0=0x01;   \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_66_img_1.jpeg"
        ]
    },
    "67": {
        "text": "lOMoAR cPSD|26885763 \n \n67 | P a g e  \n \nb=P0;   \nfor(l-0;l<3000;l++);   \nfor(k=0;k<8;k++)   \n{   \nb=b<<1;   \nP0=b;   \n}   \n}   \n}   \n \nConsider the Embedded C Program for generating the LED output sequence as shown \nbelow is:- \n00000001   \n00000011   \n00000111.....   \n.... And so on up to 11111111.   \n \n#include<reg51.h>   \nvoid main()   \n{   \nunsigned int i;   \nunsigned char j,b;   \nwhile(1)   \n{   \nP0=0x01;   \nb=P0;   \nfor(j-0;j<3000;j++);   \nfor(j=0;j<8;j++)   \n{   \nbb=b<<1;   \nb=0x01;   \nP0=b;   \n}   \n}   \n}   \nDisplaying Number on 7-Segment Display using 8051 Microcontroller \nElectronic display used for displaying alphanumeric character is known as 7-Segment display \nit is used in many systems for displaying the information. \n \n",
        "images": []
    },
    "68": {
        "text": "lOMoAR cPSD|26885763 \n \n68 | P a g e  \n \nIt is constructed using eight LEDs which are connected in sequential way so as to display \ndigits from 0 to 9, when certain combinations of LEDs are switched on. It displays only one \ndigit at a time. \n \nConsider the Proteus software based simulation of displaying number on 7-segment \ndisplay using 8051 microcontroller is:- \n \nConsider the program for displaying the number from '0 to F' on 7-segment display is:- \n10s \n#include<reg51.h>                                        \nsbit a= P3^0;                                              \nsbit x= P3^1;   \nsbit y= P3^2;   \nsbit z= P3^3;   \nvoid main()   \n{   \nunsigned char m[10]={0?40,0xF9,0?24,0?30,0?19,0?12,0?02,0xF8,0xE00,0?10};   \nunsigned int i,j;   \na=x=y=z=1;   \nwhile(1)   \n{   \nfor(i=0;i<10;i++)   \n{   \nP2=m[i];   \nfor(j=0;j<60000;j++);   \n}   \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_68_img_1.jpeg"
        ]
    },
    "69": {
        "text": "lOMoAR cPSD|26885763 \n \n69 | P a g e  \n \n}   \n}   \nConsider the program for displaying numbers from '00 to 10' on a 7segment display is:- \n#include<reg51.h>   \nsbit x= P3^0;   \nsbit y= P3^1;   \nvoid display1();   \nvoid display2();   \nvoid delay();   \nvoid main()   \n{   \nunsigned char m[10]={0?40,0xF9,0?24,0?30,0?19,0?12,0?02,0xF8,0xE00,0?10};   \nunsigned int i,j;   \nds1=ds2=0;   \nwhile(1)   \n{   \nfor(i=0,i<20;i++)   \ndisplay1();   \ndisplay2();   \n}   \n}   \nvoid display1()   \n{   \nx=1;   \ny=0;   \nP2=m[ds1];   \ndelay();   \nx=1;   \ny=0;   \nP2=m[ds1];   \ndelay();   \n}   \nvoid display2()   \n{   \nds1++;   \nif(ds1>=10)   \n{   \nds1=0;   \nds2++;   \nif(ds2>=10)   \n",
        "images": []
    },
    "70": {
        "text": "lOMoAR cPSD|26885763 \n \n70 | P a g e  \n \n{   \nds1=ds2=0;   \n}   \n}   \n}   \nvoid delay()   \n{   \nunsigned int k;   \nfor(k=0;k<30000;k++);   \n} \n \n2.3. RTOS (Real-Time Operating Systems for Embedded Developers) \nEmbedded developers are often accustomed to bare metal programming or have reservations \ntowards using an RTOS. Here’s what they are, and why you should consider using one. \nToday’s product development cycles are becoming increasingly complex. With available \ndevelopment time shrinking yet the required feature set expanding, busy developers need to \nfind ways of doing more in less time. It can often make sense to use a real-time operating \nsystem (RTOS) to gain efficiencies in task management and resource sharing. \n \n2.3.1. What is an RTOS? \nSimply put, an RTOS is a piece of software designed to efficiently manage the time of a \ncentral processing unit (CPU). This is especially relevant for embedded systems when time is \ncritical. \n \nThe key difference between an operating system such as Windows and an RTOS often found \nin embedded systems is the response time to external events. An ordinary OS provides a non-\ndeterministic response to events with no guarantee with respect to when they will be \nprocessed, albeit while trying to stay responsive. The user perceiving the OS to be responsive \nis more important than handling underlying tasks. On the other hand, an RTOS' goal is fast \nand more deterministic reaction. \n \nDevelopers used to OS’s such as Windows or Linux will be quite familiar with the \ncharacteristics of an embedded RTOS. They are designed to run in systems with limited \nmemory, and to operate indefinitely without the need to be reset. \n \nBecause an RTOS is designed to respond to events quickly and perform under heavy loads, it \ncan be slower at big tasks when compared to another OS. \n \n2.3.2. RTOS scheduling \n",
        "images": []
    },
    "71": {
        "text": "lOMoAR cPSD|26885763 \n \n71 | P a g e  \n \nAn RTOS is valued for how quickly it can respond and in that, the advanced scheduling \nalgorithm is the key component. \n \nThe time-criticality of embedded systems vary from soft-real time washing machine control \nsystems through hard-real time aircraft safety systems. In situations like the latter, the \nfundamental demand to meet real-time requirements can only be made if the OS scheduler’s \nbehavior can be accurately predicted. \n \nMany operating systems give the impression of executing multiple programs at once, but this \nmulti-tasking is something of an illusion. A single processor core can only run a single thread \nof execution at any one time. An operating system’s scheduler decides which program, or \nthread, to run when. By rapidly switching between threads, it provides the illusion of \nsimultaneous multitasking. \n \nThe flexibility of an RTOS scheduler enables a broad approach to process priorities, although \nan RTOS is more commonly focused on a very narrow set of applications. An RTOS \nscheduler should give minimal interrupt latency and minimal thread switching overhead. \nThis is what makes an RTOS so relevant for time-critical embedded systems. \n \n2.3.3. The use of RTOS in embedded designs \nMany embedded programmers shy away from using an RTOS because they suspect that it \nadds too much complexity to their application, or it is simply unknown territory. An RTOS \ntypically requires anything up to 5% of the CPU’s resources to perform its duties. While \nthere will always be some resource penalties, an RTOS can make up for it in areas such as \nsimplified determinism, ease of use though HW abstraction, reduced development time and \neasier debugging. \n \nUsing an RTOS means you can run multiple tasks concurrently, bringing in the basic \nconnectivity, privacy, security, and so on as and when you need them. An RTOS allows you \nto create an optimized solution for the specific requirements of your project. \n \n2.3.4. Introducing the Zephyr RTOS \nThere are numerous RTOS solutions out there. Many developers in the Nordic world are \nfocused on low power embedded systems. If that’s you, we’d suggest you check out Zephyr, \nwhich is well-suited for connectivity solutions in which ultra-low power is a requirement. \nThe modular Zephyr RTOS supports multiple architectures, so developers are able to easily \ntailor a solution to meet their needs. \n \n2.3.5. Real-time operating system (RTOS): Components, Types, Examples \n",
        "images": []
    },
    "72": {
        "text": "lOMoAR cPSD|26885763 \n \n72 | P a g e  \n \nReal-time operating system (RTOS) is an operating system intended to serve real \ntime application that process data as it comes in, mostly without buffer delay. The full form \nof RTOS is Real time operating system. \n \nIn a RTOS, Processing time requirement are calculated in tenths of seconds increments of \ntime. It is time-bound system that can be defined as fixed time constraints. In this type of \nsystem, processing must be done inside the specified constraints. Otherwise, the system will \nfail. \n \n2.3.5. Why use an RTOS? \nHere are important reasons for using RTOS: \n• \nIt offers priority-based scheduling, which allows you to separate analytical processing \nfrom non-critical processing. \n• \nThe Real time OS provides API functions that allow cleaner and smaller application \ncode. \n• \nAbstracting timing dependencies and the task-based design results in fewer \ninterdependencies between modules. \n• \nRTOS offers modular task-based development, which allows modular task-based \ntesting. \n• \nThe task-based API encourages modular development as a task, will typically have a \nclearly defined role. It allows designers/teams to work independently on their parts of \nthe project. \n• \nAn RTOS is event-driven with no time wastage on processing time for the event \nwhich is not occur \n \n2.3.6. Terms used in RTOS \nHere, are essential terms used in RTOS: \n• \nTask – A set of related tasks that are jointly able to provide some system \nfunctionality. \n• \nJob – A job is a small piece of work that can be assigned to a processor, and that may \nor may not require resources. \n• \nRelease time of a job – It’s a time of a job at which job becomes ready for execution. \n• \nExecution time of a job: It is time taken by job to finish its execution. \n• \nDeadline of a job: It’s time by which a job should finish its execution. \n• \nProcessors: They are also known as active resources. They are important for the \nexecution of a job. \n• \nMaximum It is the allowable response time of a job is called its relative deadline. \n• \nResponse time of a job: It is a length of time from the release time of a job when the \ninstant finishes. \n• \nAbsolute deadline: This is the relative deadline, which also includes its release time. \n",
        "images": []
    },
    "73": {
        "text": "lOMoAR cPSD|26885763 \n \n73 | P a g e  \n \n \n2.3.7. Components of RTOS \n \nComponents of Real Time Operating System \n \nHere, are important Component of RTOS \nThe Scheduler: This component of RTOS tells that in which order, the tasks can be executed \nwhich is generally based on the priority. \n \nSymmetric Multiprocessing (SMP): It is a number of multiple different tasks that can be \nhandled by the RTOS so that parallel processing can be done. \n \nFunction Library: It is an important element of RTOS that acts as an interface that helps \nyou to connect kernel and application code. This application allows you to send the requests \nto the Kernel using a function library so that the application can give the desired results. \n \nMemory Management: this element is needed in the system to allocate memory to every \nprogram, which is the most important element of the RTOS. \n \nFast dispatch latency: It is an interval between the termination of the task that can be \nidentified by the OS and the actual time taken by the thread, which is in the ready queue, that \nhas started processing. \nUser-defined data objects and classes: RTOS system makes use of programming languages \nlike C or C++, which should be organized according to their operation. \n \n2.3.8. Features of RTOS \nHere are important features of RTOS: \n• \nOccupy very less memory \n• \nConsume fewer resources \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_73_img_1.jpeg"
        ]
    },
    "74": {
        "text": "lOMoAR cPSD|26885763 \n \n74 | P a g e  \n \n• \nResponse times are highly predictable \n• \nUnpredictable environment \n• \nThe Kernel saves the state of the interrupted task ad then determines which task it \nshould run next. \n• \nThe Kernel restores the state of the task and passes control of the CPU for that task \n \nFactors for selecting an RTOS \nHere, are essential factors that you need to consider for selecting RTOS: \n• \nPerformance: Performance is the most important factor required to be considered \nwhile selecting for a RTOS. \n• \nMiddleware: if there is no middleware support in Real time operating system, then \nthe issue of time-taken integration of processes occurs. \n• \nError-free: RTOS systems are error-free. Therefore, there is no chance of getting an \nerror while performing the task. \n• \nEmbedded system usage: Programs of RTOS are of small size. So we widely use \nRTOS for embedded systems. \n• \nMaximum Consumption: we can achieve maximum Consumption with the help of \nRTOS. \n• \nTask shifting: Shifting time of the tasks is very less. \n• \nUnique features: A good RTS should be capable, and it has some extra features like \nhow it operates to execute a command, efficient protection of the memory of the \nsystem, etc. \n• \n24/7 performance: RTOS is ideal for those applications which require to run 24/7. \n \n2.3.9. Difference between in GPOS and RTOS \nHere are important differences between GPOS and RTOS: \nGeneral-Purpose Operating System \n(GPOS) \nReal-Time Operating System (RTOS) \nIt used for desktop PC and laptop. \nIt is only applied to the embedded application. \nProcess-based Scheduling. \nTime-based scheduling used like round-robin \nscheduling. \nInterrupt latency is not considered as \nimportant as in RTOS. \nInterrupt lag is minimal, which is measured in a few \nmicroseconds. \nNo priority inversion mechanism is \npresent in the system. \nThe priority inversion mechanism is current. So it \ncan not modify by the system. \nKernel’s operation may or may not be \npreempted. \nKernel’s operation can be preempted. \nPriority inversion remain unnoticed \nNo predictability guarantees \n \n2.3.10. Types of Real Time Operating System (RTOS)  \n",
        "images": []
    },
    "75": {
        "text": "lOMoAR cPSD|26885763 \n \n75 | P a g e  \n \n \nThe real-time operating systems can be of 3 types –  \n \n1. Hard Real-Time operating system:  \nThese operating systems guarantee that critical tasks be completed within a range of \ntime.  \nFor example, a robot is hired to weld a car body. If the robot welds too early or too late, \nthe car cannot be sold, so it is a hard real-time system that requires complete car welding \nby robot hardly on the time., scientific experiments, medical imaging systems, industrial \ncontrol systems, weapon systems, robots, air traffic control systems, etc. \n  \n2. Soft real-time operating system: \nThis operating system provides some relaxation in the time limit.  \nFor example – Multimedia systems, digital audio systems etc. Explicit, programmer-\ndefined and controlled processes are encountered in real-time systems. A separate \nprocess is changed with handling a single external event. The process is activated upon \noccurrence of the related event signalled by an interrupt.  \n \nMultitasking operation is accomplished by scheduling processes for execution \nindependently of each other. Each process is assigned a certain level of priority that \ncorresponds to the relative importance of the event that it services. The processor is \nallocated to the highest priority processes. This type of schedule, called, priority-based \npreemptive scheduling is used by real-time systems. \n  \n3. Firm Real-time Operating System: \nRTOS of this type have to follow deadlines as well. In spite of its small impact, missing a \ndeadline can have unintended consequences, including a reduction in the quality of the \nproduct. Example: Multimedia applications. \n \nRTOS \nHard Real \nTime OS \nRTOS \nSoft Real \nTime OS  \nRTOS \nFirm Real-\ntime OS \n RTOS \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_75_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_75_img_2.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_75_img_3.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_75_img_4.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_75_img_5.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_75_img_6.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_75_img_7.png"
        ]
    },
    "76": {
        "text": "lOMoAR cPSD|26885763 \n \n76 | P a g e  \n \n  \n2.3.11. Advantages of Real Time Operating System (RTOS) \nThe advantages of real-time operating systems are as follows-  \n1. Maximum consumption \nMaximum utilization of devices and systems. Thus more output from all the resources.  \n  \n2. Task Shifting \nTime assigned for shifting tasks in these systems is very less. For example, in older \nsystems, it takes about 10 microseconds. Shifting one task to another and in the latest \nsystems, it takes 3 microseconds.  \n  \n3. Focus On Application –  \nFocus on running applications and less importance to applications that are in the queue.  \n  \n4. Real-Time Operating System In Embedded System –  \nSince the size of programs is small, RTOS can also be embedded systems like in \ntransport and others.  \n  \n5. Error Free –  \nThese types of systems are error-free.  \n  \n6. Memory Allocation –  \nMemory allocation is best managed in these types of systems. \n \n2.3.12. Disadvantages of Real Time Operating System (RTOS) \nThe disadvantages of real-time operating systems are as follows-  \n  \n1. Limited Tasks –  \nVery few tasks run simultaneously, and their concentration is very less on few \napplications to avoid errors.  \n  \n2. Use Heavy System Resources –  \nSometimes the system resources are not so good and they are expensive as well.  \n  \n3. Complex Algorithms –  \nThe algorithms are very complex and difficult for the designer to write on.  \n  \n4. Device Driver And Interrupt signals –  \nIt needs specific device drivers and interrupts signals to respond earliest to interrupts.  \n  \n",
        "images": []
    },
    "77": {
        "text": "lOMoAR cPSD|26885763 \n \n77 | P a g e  \n \n5. Thread Priority –  \nIt is not good to set thread priority as these systems are very less prone to switching tasks. \n  \n6. Minimum Switching –  RTOS performs minimal task switching. \n \n2.3.13. Comparison of Regular and Real-Time operating systems: \nRegular OS \nReal-Time OS (RTOS) \n Complex              \n Simple \n Best effort \n Guaranteed response  \n Fairness \n Strict Timing constraints \n Average Bandwidth       \n Minimum and maximum limits     \n Unknown components     \n Components are known    \n Unpredictable behavior               Predictable behavior \n Plug and play \n RTOS is upgradeable \n \n2.4. Multiple Tasks And Multiple Processes \n  \n2.4.1. Tasks and Processes \n Many (if not most) embedded computing systems do more than one thing that is, the \nenvironment can cause mode changes that in turn cause the embedded system to behave quite \ndifferently. For example, when designing a telephone answering machine, \n \n We can define recording a phone call and operating the user’s control panel as distinct tasks, \nbecause they perform logically distinct operations and they must be performed at very \ndifferent rates. These different tasks are part of the system’s functionality, but that \napplication-level organization of functionality is often reflected in the structure of the \nprogram as well. \n \n A process is a single execution of a program. If we run the same program two different \ntimes, we have created two different processes. Each process has its own state that includes \nnot only its registers but all of its memory. In some OSs, the memory management unit is \nused to keep each process in a separate address space. In others, particularly lightweight \nRTOSs, the processes run in the same address space. Processes that share the same address \nspace are often called threads. \n  As shown in Figure, this device is connected to serial ports on both ends. The input to the \nbox is an uncompressed stream of bytes. The box emits a compressed string of bits on the \n",
        "images": []
    },
    "78": {
        "text": "lOMoAR cPSD|26885763 \n \n78 | P a g e  \n \noutput serial line, based on a predefined compression table. Such a box may be used, for \nexample, to compress data being sent to a modem. \n \n  The program’s need to receive and send data at different rates for example, the program \nmay emit 2 bits for the first byte and then 7 bits for the second byte will obviously find itself \nreflected in the structure of the code. It is easy to create irregular, ungainly code to solve this \nproblem; a more elegant solution is to create a queue of output bits, with those bits being \nremoved from the queue and sent to the serial port in 8-bit sets. \n \nBut beyond the need to create a clean data structure that simplifies the control structure of the \ncode, we must also ensure that we process the inputs and outputs at the proper rates. For \nexample, if we spend too much time in packaging and emitting output characters, we may \ndrop an input character. Solving timing problems is a more challenging problem. \n  \nThe text compression box provides a simple example of rate control problems. A control \npanel on a machine provides an example of a different type of rate control problem, \nthe asynchronous input. \n \n \nThe control panel of the compression box may, for example, include a compression mode \nbutton that disables or enables compression, so that the input text is passed through \nunchanged when compression is disabled. We certainly do not know when the user will push \nthe compression mode button the button may be depressed asynchronously relative to the \narrival of characters for compression. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_78_img_1.jpeg"
        ]
    },
    "79": {
        "text": "lOMoAR cPSD|26885763 \n \n79 | P a g e  \n \n2.4.2. Multirate Systems \n Implementing code that satisfies timing requirements is even more complex when multiple \nrates of computation must be handled. Multirate embedded computing systems are very \ncommon, including automobile engines, printers, and cell phones. In all these systems, \ncertain operations must be executed periodically, and each operation is executed at its own \nrate. \n  \n2.4.3. Timing Requirements on Processes \n Processes can have several different types of timing requirements imposed on them by the \napplication. The timing requirements on a set of processes strongly influence the type of \nscheduling that is appropriate. A scheduling policy must define the timing requirements that \nit uses to determine whether a schedule is valid. Before studying scheduling proper, we \noutline the types of process timing requirements that are useful in embedded system design. \n  \nFigure illustrates different ways in which we can define two important requirements on \nprocesses: release time and deadline. \n The release time is the time at which the process becomes ready to execute; this is not \nnecessarily the time at which it actually takes control of the CPU and starts to run. An \naperiodic process is by definition initiated by an event, such as external data arriving or data \ncomputed by another process. \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_79_img_1.jpeg"
        ]
    },
    "80": {
        "text": "lOMoAR cPSD|26885763 \n \n80 | P a g e  \n \n The release time is generally measured from that event, although the system may want to \nmake the process ready at some interval after the event itself. For a periodically executed \nprocess, there are two common possibilities. \n \n In simpler systems, the process may become ready at the beginning of the period. More \nsophisticated systems, such as those with data dependencies between processes, may set the \nrelease time at the arrival time of certain data, at a time after the start of the period. \n \n A deadline specifies when a computation must be finished. The deadline for an aperiodic \nprocess is generally measured from the release time, since that is the only reasonable time \nreference. The deadline for a periodic process may in general occur at some time other than \nthe end of the period. \n \n Rate requirements are also fairly common. A rate requirement specifies how quickly \nprocesses must be initiated. \n \n The period of a process is the time between successive executions. For example, the period \nof a digital filter is defined by the time interval between successive input samples. \n \n The process’s rate is the inverse of its period. In a multirate system, each process executes at \nits own distinct rate. \n \nThe most common case for periodic processes is for the initiation interval to be equal to the \nperiod. However, pipelined execution of processes allows the initiation interval to be less \nthan the period. Figure  illustrates process execution in a system with four CPUs. \n \n  \nCPU Metrics \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_80_img_1.jpeg"
        ]
    },
    "81": {
        "text": "lOMoAR cPSD|26885763 \n \n81 | P a g e  \n \n We also need some terminology to describe how the process actually executes. \nThe initiation time is the time at which a process actually starts executing on the CPU. \nThe completion time is the time at which the process finishes its work. \n \n The most basic measure of work is the amount of CPU time expended by a process. The \nCPU time of process i is called Ci . Note that the CPU time is not equal to the completion \ntime minus initiation time; several other processes may interrupt execution. The total CPU \ntime consumed by a set of processes is \nT= ∑ Ti \n  \n We need a basic measure of the efficiency with which we use the CPU. The simplest and \nmost direct measure is utilization: \n  \nU=CPU time for useful work/total available CPU time \n  \nUtilization is the ratio of the CPU time that is being used for useful computations to the total \navailable CPU time. This ratio ranges between 0 and 1, with 1 meaning that all of the \navailable CPU time is being used for system purposes. The utilization is often expressed as a \npercentage. If we measure the total execution time of all processes over an interval of time t, \nthen the CPU utilization is \nU=T/t. \n \n2.4.4. Multiple Tasks and Multiple Processes \n  \n`Most embedded systems require functionality and timing that is too complex to body \nin a single program. We break the system in to multiple tasks in order to manage when things \nhappen. In this section we will develop the basic abstractions that will be manipulated by the \nRTOS to build multirate systems.  \n \nTo understand why these parathion of an application in to tasks may be reflected in \nthe program structure, consider how we would build a stand-alone compression unit based on \nthe compression algorithm,this device is connected to serial ports on both ends. The input to \nthe box is an uncompressed stream of bytes. The box emits a compressed string of bits on the \noutput serial line, based on a predefined compression table. Such a box may be used, for \nexample, to compress data being sent to a modem. The program’s need to receive and send \ndata at different rates—for example, the program may emit 2 bits for the first byte and then 7 \nbits for the second byte— will obviously find itself reflected in the structure of the code.  \n \nIt is easy to create irregular, ungainly code to solve this problem; a more elegant \nsolution is to create a queue of out put bits, with those bits being removed from the queue \nand sent to the serial port in 8-bit sets. But beyond the need to create a clean data structure \n",
        "images": []
    },
    "82": {
        "text": "lOMoAR cPSD|26885763 \n \n82 | P a g e  \n \nthat simplifies the control structure of the code, we must also ensure that we process the \ninputs and outputs at the proper rates. For example, if we spend too much time in packaging \nand emitting output characters, we may drop an input character. Solving timing problems is a \nmore challenging problem. \n  \nThe text compression box provides a simple example of rate control problems. A \ncontrol panel on a machine provides an example of a different type of rate con- troll problem, \nthe asynchronous input. The control panel of the compression box may, for example, include \na compression mode button that disables or enables com- pression, so that the input text is \npassed through unchanged when compression is disabled. We certainly do not know when \nthe user will push the compression modebutton— the button may be depressed a \nsynchronously relative to the arrival of characters for compression. We do know, however, \nthat the button will be depressed at a much lower rate than characters will be received, since \nit is not physically possible for a person to repeatedly depress a button at even slow serial \nline rates. Keeping up with the input and output data while checking on the button can \nintroduce some very complex control code in to the program. Sampling the button’s state too \nslowly can cause the machine to miss a button depression entirely, but sampling it too \nfrequently and duplicating a data value can cause the machine to in correctly compress data. \n  \nOne solution is to introduce a counter in to the main compression loop, so that a subroutine \nto check the input button is called once every times the compression loop is executed. But \nthis solution does not work when either the compression loop or the button-handling routine \nhas highly variable execution times—if the execution time of either varies significantly, it \nwill cause the other to execute later than expected, possibly causing data to be lost. We need \nto be able to keep track of these two different tasks separately, applying different timing \nrequirements to each. \n  \nThis is the sort of control that processes allow. The above two examples illustrate how \nrequirements on timing and execution rate can create major problems in programming. When \ncode is written to satisfy several different timing requirements at once, the control structures \nnecessary to get any sort of solution become very complex very quickly. Worse, such \ncomplex control is usually quite difficult to verify for either functional or timing properties. \n  \n2.4.5. Multi rate Systems \n  \nImplementing code that satisfies timing requirements is even more complex when \nmultiple rates of computation must be handled. Multi rate embedded computing systems are \nvery common, including auto mobile engines, printers, and cell phones.In all these systems, \ncertain operations must be executed periodically, and each oper-ation is executed at its own \nrate. Application Example6.1 describes why auto mobile engines require multi rate control. \n \n",
        "images": []
    },
    "83": {
        "text": "lOMoAR cPSD|26885763 \n \n83 | P a g e  \n \n2.4.6. Timing Requirements on Processes \n  \nProcesses can have several different types of timing requirements imposed on them \nby the application. The timing requirements on a set of process strongly influence the type of \nscheduling that is appropriate. A scheduling policy must define the timing requirements that \nit uses to determine whether a schedule is valid. Before studying scheduling proper, we \noutline the types of process timing requirements that are useful in embedded system design. \nFigure illustrates different ways in which we can define two important requirements on \nprocesses: eg. What happens when a process misses a deadline? The practical effects of a \ntiming violation depend on the application—the results can be catastrophic in an auto mo- \ntive control system, where as a missed deadline in a multimedia system may cause an audio \nor video glitch. The system can be designed to take a variety of actions when a deadline is \nmissed. Safety-critical systems may try to take compensatory measures such as \napproximating data or switching in to a special safety mode. Systems for which safety is not \nas important may take simple measures to avoid propagating bad data, such as inserting \nsilence in a phone line, or may completely ignore the failure.Even if the modules are \nfunctionally correct, their timing improper behavior can introduce major execution errors. \nApplication Example6.2 describes a timing problem in space shuttle software that caused the \ndelay of the first launch of the shuttle. We need a basic measure of the efficiency with which \nwe use the CPU. The simplest and most direct measure is utilization: \n  \nUtilization is the ratio of the CPU time that is being used for useful computations to the total \navailable CPUtime. This ratio ranges between 0 and 1, with 1 meaning that all of the \navailable CPU time is being used for system purposes. The utilization is often expressed as a \npercentage. If we measure the total execution time of all processes over an interval of time t, \nthen the CPU utilization is U/T \n  \n2.4.7. Process State and Scheduling \n  \nThe first job of the OS is to determine that process runs next. The work of choosing \nthe order of running processes is known as scheduling. The OS considers a process to be in \none of three basic scheduling states \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_83_img_1.jpeg"
        ]
    },
    "84": {
        "text": "lOMoAR cPSD|26885763 \n \n84 | P a g e  \n \n Schedulability means whether there exists a schedule of execution for the processes in a \nsystem that satisfies all their timing requirements. In general, we must construct a schedule to \nshow schedulability, but in some cases we can eliminate some sets of processes as \nunschedulable using some very simple tests. Utilization is one of the key metrics in \nevaluating a scheduling policy. Our most basic require- ment is that CPU utilization be no \nmore than 100% since we can’t use the CPU more than100% of the time. \n  \n When we evaluate the utilization of the CPU, we generally do so over a finite period that \ncovers all possible combinations of process executions. For periodic processes, the length of \ntime that must be considered is the hyper period, which is the least-common multiple of the \nperiods of all the processes. If we evaluate the hyper period, we are sure to have considered \nall possible combinations of the periodic processes. \n  \n2.4.8. Running Periodic Processes \n  \nWe need to find a programming technique that allows us to run periodic processes, \nideally at different rates. For the moment, let’s think of a process as a subroutine; we will call \nthe mp1(), p2(), etc. for simplicity. Our goal is to run these subroutines at rates determined \nby the system \n  \ndesigner. Here is a very simple program that runs our process subroutines repeatedly: A timer \nis a much more reliable way to control execution of the loop. We would probably use the \ntimer to generate periodic interrupts. Let’s assume for the moment that the pall() function is \ncalled by the timer’s interrupt handler. Then this code will execute each process once after a \ntimer interrupt: \n  \nvoidpall()  \n{ \n p1(); \n p2(); \n } \nBut what happens when a process runs too long? The timer’s interrupt will cause the CPU’s \ninterrupt system to mask its interrupts, so the interrupt will not occur until after the pall() \nroutine returns. As a result, the next iteration will start late. This is a serious problem, but we \nwill have to wait for further refinements before we can fix it. \n  \nOur next problem is to execute different processes at different rates. If we have several \ntimers, we can set each timer to a different rate. We could then use a function to collect all \nthe processes that run at that rate: \n  \nvoidpA()  \n",
        "images": []
    },
    "85": {
        "text": "lOMoAR cPSD|26885763 \n \n85 | P a g e  \n \n{ \n  \n/*processesthatrunatrateA*/ \n p1(); \n p3(); \n} \nvoid pB()  \n{ \n /*processesthatrunatrateB*/ \n } \n  \nThis solution allows us to execute processes at rates that are simple multiples of each other. \nHowever, when the rates are n’t related by a simple ratio, the counting process becomes more \ncomplex and more likely to contain bugs. We have developed somewhat more reliable code, \nbut this programming style is still limited in capability and prone to bugs. To improve both \nthe capabilities and reliability of our systems, we need to invent the RTOS. \n \n2.5. Context Switch in Operating System \nAn operating system is a program loaded into a system or computer. and manage all \nthe other program which is running on that OS Program, it manages the all other application \nprograms. or in other words, we can say that the OS is an interface between the user and \ncomputer hardware. \nwe will learn about what is Context switching in an Operating System and see how it works \nalso understands the triggers of context switching and an overview of the Operating System. \n \nContext Switch \nContext switching in an operating system involves saving the context or state of a running \nprocess so that it can be restored later, and then loading the context or state of another. \nprocess and run it. \n \nContext Switching refers to the process/method used by the system to change the process \nfrom one state to another using the CPUs present in the system to perform its job. \n \nExample – Suppose in the OS there (N) numbers of processes are stored in a Process Control \nBlock(PCB). like The process is running using the CPU to do its job. While a process is \nrunning, other processes with the highest priority queue up to use the CPU to complete their \njob. \n \n2.5.1. The Need for Context Switching \n",
        "images": []
    },
    "86": {
        "text": "lOMoAR cPSD|26885763 \n \n86 | P a g e  \n \nContext switching enables all processes to share a single CPU to finish their execution and \nstore the status of the system’s tasks. The execution of the process begins at the same place \nwhere there is a conflict when the process is reloaded into the system. \n \nThe operating system’s need for context switching is explained by the reasons listed below. \n1. One process does not directly switch to another within the system. Context \nswitching makes it easier for the operating system to use the CPU’s resources to carry out \nits tasks and store its context while switching between multiple processes. \n2. Context switching enables all processes to share a single CPU to finish their execution \nand store the status of the system’s tasks. The execution of the process begins at the same \nplace where there is a conflict when the process is reloaded into the system. \n3. Context switching enables all processes to share a single CPU to finish their execution \nand store the status of the system’s tasks. The execution of the process begins at the same \nplace where there is a conflict when the process is reloaded into the system. \n4. Context switching only allows a single CPU to handle multiple processes requests \nparallelly without the need for any additional processors. \n \n2.5.2. Context Changes as a Trigger \nThe three different categories of context-switching triggers are as follows. \n1. Interrupts \n2. Multitasking \n3. User/Kernel switch \n \nInterrupts: When a CPU requests that data be read from a disc, if any interruptions occur, \ncontext switching automatically switches to a component of the hardware that can handle the \ninterruptions more quickly. \n \nMultitasking: The ability for a process to be switched from the CPU so that another process \ncan run is known as context switching. When a process is switched, the previous state is \nretained so that the process can continue running at the same spot in the system. \n \nKernel/User Switch: This trigger is used when the OS needed to switch between the user \nmode and kernel mode. \n \nWhen switching between user mode and kernel/user mode is necessary, operating systems \nuse the kernel/user switch. \n \n2.5.3. Process Control Block  \nThe Process Control block(PCB) is also known as a Task Control Block. it represents \na process in the Operating System. A process control block (PCB) is a data structure used by \n",
        "images": []
    },
    "87": {
        "text": "lOMoAR cPSD|26885763 \n \n87 | P a g e  \n \na computer to store all information about a process. It is also called the descriptive process. \nWhen a process is created (started or installed), the operating system creates a process \nmanager. \n \n2.5.3.1. State Diagram of Context Switching \n \n \n2.5.4.  Working Process Context Switching  \nSo the context switching of two processes, the priority-based process occurs in the ready \nqueue of the process control block. These are the following steps. \n• \nThe state of the current process must be saved for rescheduling.  \n• \nThe process state contains records, credentials, and operating system-specific information \nstored on the PCB or switch. \n• \nThe PCB can be stored in a single layer in kernel memory or in a custom OS file. \n• \nA handle has been added to the PCB to have the system ready to run. \n• \nThe operating system aborts the execution of the current process and selects a process \nfrom the waiting list by tuning its PCB. \n• \nLoad the PCB’s program counter and continue execution in the selected process. \n• \nProcess/thread values can affect which processes are selected from the queue, this can be \nimportant. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_87_img_1.png"
        ]
    },
    "88": {
        "text": "lOMoAR cPSD|26885763 \n \n88 | P a g e  \n \n2.6. Priority Scheduling Algorithm: Preemptive, Non-Preemptive \nWhat is Priority Scheduling? \nPriority Scheduling is a method of scheduling processes that is based on priority. In this \nalgorithm, the scheduler selects the tasks to work as per the priority. \nThe processes with higher priority should be carried out first, whereas jobs with equal \npriorities are carried out on a round-robin or FCFS basis. Priority depends upon memory \nrequirements, time requirements, etc. \n \n2.6.1. Types of Priority Scheduling \nPriority scheduling divided into two main types: \n \n2.6.1.1. Preemptive Scheduling \nIn Preemptive Scheduling, the tasks are mostly assigned with their priorities. Sometimes it is \nimportant to run a task with a higher priority before another lower priority task, even if the \nlower priority task is still running. The lower priority task holds for some time and resumes \nwhen the higher priority task finishes its execution. \n \n2.6.1.2. Non-Preemptive Scheduling \nIn this type of scheduling method, the CPU has been allocated to a specific process. The \nprocess that keeps the CPU busy, will release the CPU either by switching context or \nterminating. It is the only method that can be used for various hardware platforms. That’s \nbecause it doesn’t need special hardware (for example, a timer) like preemptive scheduling. \n \n2.6.2. Characteristics of Priority Scheduling \n• \nA CPU algorithm that schedules processes based on priority. \n• \nIt used in Operating systems for performing batch processes. \n• \nIf two jobs having the same priority are READY, it works on a FIRST COME, \nFIRST SERVED basis. \n• \nIn priority scheduling, a number is assigned to each process that indicates its priority \nlevel. \n• \nLower the number, higher is the priority. \n• \nIn this type of scheduling algorithm, if a newer process arrives, that is having a higher \npriority than the currently running process, then the currently running process is \npreempted. \n \n2.6.3. Example of Priority Scheduling \nConsider following five processes P1 to P5. Each process has its unique priority, burst time, \nand arrival time. \nProcess \nPriority \nBurst time \nArrival time \nP1 \n1 \n4 \n0 \n",
        "images": []
    },
    "89": {
        "text": "lOMoAR cPSD|26885763 \n \n89 | P a g e  \n \nP2 \n2 \n3 \n0 \nP3 \n1 \n7 \n6 \nP4 \n3 \n4 \n11 \nP5 \n2 \n2 \n12 \nStep 0) At time=0, Process P1 and P2 arrive. P1 has higher priority than P2. The execution \nbegins with process P1, which has burst time 4. \n \nStep 1) At time=1, no new process arrive. Execution continues with P1. \n \nStep 2) At time 2, no new process arrives, so you can continue with P1. P2 is in the waiting \nqueue. \n \nStep 3) At time 3, no new process arrives so you can continue with P1. P2 process still in the \nwaiting queue. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_89_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_89_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_89_img_3.jpeg"
        ]
    },
    "90": {
        "text": "lOMoAR cPSD|26885763 \n \n90 | P a g e  \n \n \nStep 4) At time 4, P1 has finished its execution. P2 starts execution. \n \nStep 5) At time= 5, no new process arrives, so we continue with P2. \n \nStep 6) At time=6, P3 arrives. P3 is at higher priority (1) compared to P2 having priority (2). \nP2 is preempted, and P3 begins its execution. \nProcess \nPriority \nBurst time \nArrival time \nP1 \n1 \n4 \n0 \nP2 \n2 \n1 out of 3 pending \n0 \nP3 \n1 \n7 \n6 \nP4 \n3 \n4 \n11 \nP5 \n2 \n2 \n12 \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_90_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_90_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_90_img_3.jpeg"
        ]
    },
    "91": {
        "text": "lOMoAR cPSD|26885763 \n \n91 | P a g e  \n \n \nStep 7) At time 7, no-new process arrives, so we continue with P3. P2 is in the waiting \nqueue. \n \nStep 8) At time= 8, no new process arrives, so we can continue with P3. \n \nStep 9) At time= 9, no new process comes so we can continue with P3. \n \nStep 10) At time interval 10, no new process comes, so we continue with P3 \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_91_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_91_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_91_img_3.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_91_img_4.jpeg"
        ]
    },
    "92": {
        "text": "lOMoAR cPSD|26885763 \n \n92 | P a g e  \n \n \nStep 11) At time=11, P4 arrives with priority 4. P3 has higher priority, so it continues its \nexecution. \nProcess \nPriority \nBurst time \nArrival time \nP1 \n1 \n4 \n0 \nP2 \n2 \n1 out of 3 pending \n0 \nP3 \n1 \n2 out of 7 pending \n6 \nP4 \n3 \n4 \n11 \nP5 \n2 \n2 \n12 \n \nStep 12) At time=12, P5 arrives. P3 has higher priority, so it continues execution. \n \nStep 13) At time=13, P3 completes execution. We have P2,P4,P5 in ready queue. P2 and P5 \nhave equal priority. Arrival time of P2 is before P5. So P2 starts execution. \nProcess \nPriority \nBurst time \nArrival time \nP1 \n1 \n4 \n0 \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_92_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_92_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_92_img_3.jpeg"
        ]
    },
    "93": {
        "text": "lOMoAR cPSD|26885763 \n \n93 | P a g e  \n \nProcess \nPriority \nBurst time \nArrival time \nP2 \n2 \n1 out of 3 pending \n0 \nP3 \n1 \n7 \n6 \nP4 \n3 \n4 \n11 \nP5 \n2 \n2 \n12 \n \nStep 14) At time =14, the P2 process has finished its execution. P4 and P5 are in the waiting \nstate. P5 has the highest priority and starts execution. \n \nStep 15) At time =15, P5 continues execution. \n \nStep 16) At time= 16, P5 is finished with its execution. P4 is the only process left. It starts \nexecution. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_93_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_93_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_93_img_3.jpeg"
        ]
    },
    "94": {
        "text": "lOMoAR cPSD|26885763 \n \n94 | P a g e  \n \n \nStep 17) At time =20, P5 has completed execution and no process is left. \n \nStep 18) Let’s calculate the average waiting time for the above example. \nWaiting Time = start time – arrival time + wait time for next burst \nP1 = o - o = o \nP2 =4 - o + 7 =11  \nP3= 6-6=0 \nP4= 16-11=5 \nAverage Waiting time = (0+11+0+5+2)/5 = 18/5= 3.6 \n \n2.6.4. Advantages of priority scheduling \nHere, are benefits/pros of using priority scheduling method: \n• \nEasy to use scheduling method \n• \nProcesses are executed on the basis of priority so high priority does not need to wait \nfor long which saves time \n• \nThis method provides a good mechanism where the relative important of each process \nmay be precisely defined. \n• \nSuitable for applications with fluctuating time and resource requirements. \n \n2.6.5. Disadvantages of priority scheduling \nHere, are cons/drawbacks of priority scheduling \n• \nIf the system eventually crashes, all low priority processes get lost. \n• \nIf high priority processes take lots of CPU time, then the lower priority processes may \nstarve and will be postponed for an indefinite time. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_94_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_94_img_2.jpeg"
        ]
    },
    "95": {
        "text": "lOMoAR cPSD|26885763 \n \n95 | P a g e  \n \n• \nThis scheduling algorithm may leave some low priority processes waiting \nindefinitely. \n• \nA process will be blocked when it is ready to run but has to wait for the CPU because \nsome other process is running currently. \n• \nIf a new higher priority process keeps on coming in the ready queue, then the process \nwhich is in the waiting state may need to wait for a long duration of time. \n \n2.6.6. Scheduling policies \nTo meet the needs of various applications, the QNX Neutrino RTOS provides these \nscheduling algorithms: \n• \nFIFO scheduling \n• \nround-robin scheduling \n• \nsporadic scheduling \nEach thread in the system may run using any method. The methods are effective on a per-\nthread basis, not on a global basis for all threads and processes on a node. \nRemember that the FIFO and round-robin scheduling policies apply only when two or more \nthreads that share the same priority are READY (i.e., the threads are directly competing with \neach other). The sporadic method, however, employs a “budget” for a thread's execution. In \nall cases, if a higher-priority thread becomes READY, it immediately preempts all lower-\npriority threads. \nIn the following diagram, three threads of equal priority are READY. If Thread A blocks, \nThread B will run. Although a thread inherits its scheduling policy from its parent process, \nthe thread can request to change the algorithm applied by the kernel. \n \n \nThread A blocks; Thread B runs. \nSummary: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_95_img_1.jpeg"
        ]
    },
    "96": {
        "text": "lOMoAR cPSD|26885763 \n \n96 | P a g e  \n \n• \nPriority scheduling is a method of scheduling processes that is based on priority. In \nthis algorithm, the scheduler selects the tasks to work as per the priority. \n• \nIn Priority Preemptive Scheduling, the tasks are mostly assigned with their priorities. \n• \nIn Priority Non-preemptive scheduling method, the CPU has been allocated to a \nspecific process. \n• \nProcesses are executed on the basis of priority so high priority does not need to wait \nfor long which saves time \n• \nIf high priority processes take lots of CPU time, then the lower priority processes may \nstarve and will be postponed for an indefinite time. \n \n \n",
        "images": []
    },
    "97": {
        "text": "lOMoAR cPSD|26885763 \n \n97 | P a g e  \n \nUNIT III \n \nIOT AND ARDUINO PROGRAMMING \n \n• Introduction to the Concept of IoT Devices \n• IoT Devices Versus Computers \n• IoT Configurations \n• Basic Components  \n• Introduction to Arduino \n• Types of Arduino \n• Arduino Toolchain \n• Arduino Programming Structure \n• Sketches \n• Pins \n• Input/Output From Pins Using Sketches \n• Introduction to Arduino Shields \n• Integration of Sensors and Actuators with Arduino \n",
        "images": []
    },
    "98": {
        "text": "lOMoAR cPSD|26885763 \n \n98 | P a g e  \n \n3.1. IoT (Internet of Things) \n \nIoT stands for Internet of Things, which means accessing and controlling daily usable \nequipments and devices using Internet. \n \n3.1.1 What is an Internet of Things (IoT) \nOur mobile device which contains GPS Tracking, Mobile Gyroscope, Adaptive brightness, \nVoice detection, Face detection etc. These components have their own individual features, \nbut what about if these all communicate with each other to provide a better environment? For \nexample, the phone brightness is adjusted based on my GPS location or my direction. \n \nConnecting everyday things embedded with electronics, software, and sensors to internet \nenabling to collect and exchange data without human interaction called as the Internet of \nThings (IoT). \n \nThe term \"Things\" in the Internet of Things refers to anything and everything in day to day \nlife which is accessed or connected through the internet. \n \nIoT is an advanced automation and analytics system which deals with artificial intelligence, \nsensor, networking, electronic, cloud messaging etc. to deliver complete systems for the \nproduct or services. The system created by IoT has greater transparency, control, and \nperformance. \nAs we have a platform such as a cloud that contains all the data through which we connect all \nthe things around us. For example, a house, where we can connect our home appliances such \nas air conditioner, light, etc. through each other and all these things are managed at the same \nplatform. Since we have a platform, we can connect our car, track its fuel meter, speed level, \nand also track the location of the car. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_98_img_1.jpeg"
        ]
    },
    "99": {
        "text": "lOMoAR cPSD|26885763 \n \n99 | P a g e  \n \n \nIf there is a common platform where all these things can connect to each other would be \ngreat because based on my preference, I can set the room temperature. For example, if I love \nthe room temperature to to be set at 25 or 26-degree Celsius when I reach back home from \nmy office, then according to my car location, my AC would start before 10 minutes I arrive \nat home. This can be done through the Internet of Things (IoT). \n \n3.1.2. How does Internet of Thing (IoT) Work? \nThe working of IoT is different for different IoT echo system (architecture). However, the \nkey concept of there working are similar. The entire working process of IoT starts with the \ndevice themselves, such as smartphones, digital watches, electronic appliances, which \nsecurely communicate with the IoT platform. The platforms collect and analyze the data \nfrom all multiple devices and platforms and transfer the most valuable data with applications \nto devices. \n \n3.1.3. Features of IOT \nThe most important features of IoT on which it works are connectivity, analyzing, \nintegrating, active engagement, and many more. Some of them are listed below: \n \nConnectivity: Connectivity refers to establish a proper connection between all the things of \nIoT to IoT platform it may be server or cloud. After connecting the IoT devices, it needs a \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_99_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_99_img_2.jpeg"
        ]
    },
    "100": {
        "text": "lOMoAR cPSD|26885763 \n \n100 | P a g e  \n \nhigh speed messaging between the devices and cloud to enable reliable, secure and bi-\ndirectional communication. \n \nAnalyzing: After connecting all the relevant things, it comes to real-time analyzing the data \ncollected and use them to build effective business intelligence. If we have a good insight into \ndata gathered from all these things, then we call our system has a smart system. \n \nIntegrating: IoT integrating the various models to improve the user experience as well. \nArtificial Intelligence: IoT makes things smart and enhances life through the use of data. \nFor example, if we have a coffee machine whose beans have going to end, then the coffee \nmachine itself order the coffee beans of your choice from the retailer. \n \nSensing: The sensor devices used in IoT technologies detect and measure any change in the \nenvironment and report on their status. IoT technology brings passive networks to active \nnetworks. Without sensors, there could not hold an effective or true IoT environment. \n \nActive Engagement: IoT makes the connected technology, product, or services to active \nengagement between each other. \n \nEndpoint Management: It is important to be the endpoint management of all the IoT system \notherwise, it makes the complete failure of the system. For example, if a coffee machine \nitself order the coffee beans when it goes to end but what happens when it orders the beans \nfrom a retailer and we are not present at home for a few days, it leads to the failure of the IoT \nsystem. So, there must be a need for endpoint management. \n \nAdvantages and Disadvantages of (IoT) \nAny technology available today has not reached to its 100 % capability. It always has a gap \nto go. So, we can say that Internet of Things has a significant technology in a world that can \nhelp other technologies to reach its accurate and complete 100 % capability as well. \n \n3.1.3.1. Advantages of IoT \nInternet of things facilitates the several advantages in day-to-day life in the business sector. \nSome of its benefits are given below: \no Efficient resource utilization: If we know the functionality and the way that how \neach device work we definitely increase the efficient resource utilization as well as \nmonitor natural resources. \no Minimize human effort: As the devices of IoT interact and communicate with each \nother and do lot of task for us, then they minimize the human effort. \no Save time: As it reduces the human effort then it definitely saves out time. Time is \nthe primary factor which can save through IoT platform. \n",
        "images": []
    },
    "101": {
        "text": "lOMoAR cPSD|26885763 \n \n101 | P a g e  \n \no Enhance Data Collection: \no Improve security: Now, if we have a system that all these things are interconnected \nthen we can make the system more secure and efficient. \n \n3.1.3.2. Disadvantages of IoT \nAs the Internet of things facilitates a set of benefits, it also creates a significant set of \nchallenges. Some of the IoT challenges are given below: \n• Security: As the IoT systems are interconnected and communicate over networks. \nThe system offers little control despite any security measures, and it can be lead the \nvarious kinds of network attacks. \n• Privacy: Even without the active participation on the user, the IoT system provides \nsubstantial personal data in maximum detail. \n• Complexity: The designing, developing, and maintaining and enabling the large \ntechnology to IoT system is quite complicated. \n \n3.1.4. Embedded Devices (System) in (IoT) \nIt is essential to know about the embedded devices while learning the IoT or building the \nprojects on IoT. The embedded devices are the objects that build the unique computing \nsystem. These systems may or may not connect to the Internet. \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_101_img_1.jpeg"
        ]
    },
    "102": {
        "text": "lOMoAR cPSD|26885763 \n \n102 | P a g e  \n \nAn embedded device system generally runs as a single application. However, these devices \ncan connect through the internet connection, and able communicate through other network \ndevices. \n \n3.1.5. Embedded System Hardware \nThe embedded system can be of type microcontroller or type microprocessor. Both of these \ntypes contain an integrated circuit (IC). \n \nThe essential component of the embedded system is a RISC family microcontroller like \nMotorola 68HC11, PIC 16F84, Atmel 8051 and many more. The most important factor that \ndifferentiates these microcontrollers with the microprocessor like 8085 is their internal read \nand writable memory. The essential embedded device components and system architecture \nare specified below. \n \nBasic Embedded System \n \n3.1.6. Embedded System Software \nThe embedded system that uses the devices for the operating system is based on the language \nplatform, mainly where the real-time operation would be performed. Manufacturers build \nembedded software in electronics, e.g., cars, telephones, modems, appliances, etc. The \nembedded system software can be as simple as lighting controls running using an 8-bit \nmicrocontroller. It can also be complicated software for missiles, process control systems, \nairplanes etc. \n \n3.1.6.1. IoT Decision Framework \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_102_img_1.png"
        ]
    },
    "103": {
        "text": "lOMoAR cPSD|26885763 \n \n103 | P a g e  \n \nThe IoT decision framework provides a structured approach to create a powerful IoT product \nstrategy. The IoT decision framework is all about the strategic decision making. The IoT \nDecision Framework helps us to understand the areas where we need to make decisions and \nensures consistency across all of our strategic business decision, technical and more. \n \nThe IoT decision framework is much more important as the product or services \ncommunicates over networks goes through five different layers of complexity of technology. \n1. Device Hardware \n2. Device Software \n3. Communications \n4. Cloud Platform \n5. Cloud Application \n \nThe IoT decision framework pays attention to six key decision areas in any IoT product. \nThese decision areas are: \n1. User Experience (UX) \n2. Data \n3. Business \n4. Technology \n5. Security \n6. Standards & Regulations \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_103_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_103_img_2.jpeg"
        ]
    },
    "104": {
        "text": "lOMoAR cPSD|26885763 \n \n104 | P a g e  \n \nEach of these decision areas is evaluated at each of the IoT Technology Stack. The User \nExperience will be evaluated at Device Hardware, Device Software and so to provide the \nbetter user experience. Then at the next step Data Decision Area, we have to explore data \nconsiderations for all the stages of IoT Technology Stack.r \n \nLet's see each of the Decision Area of IoT Decision Framework in detail: \n1. User Experience Decision Area: This is the area where we concentrate about who \nare the users, what are their requirements and how to provide a great experience at \neach step of IoT stack without worrying about the technical details. \n2. Data Decision Area: In this area, we make the overall data strategy such as the data \nflow over the entire IoT stack to fulfill the user's requirements. \n3. Business Decision Area: Based on the previous decisions area, we make the decision \nhow product or services will became financial potential. At each of the IoT Stack \nlevel are monetized about the costs of providing services. \n4. Technology Decision Area: In this area, we work with the technology for each layer \nto facilitate the final solution. \n5. Security Decision Area: After going through the implementation of technology it is \nimportant to decide and provide the security at each stage of the IoT Stack. \n6. Standards & Regulations Decision Area: At the last stage of IoT Decision Area, we \nidentify the standards and regulations of product or services that will affect your \nproduct at each layer of the IoT Stack. \n \n3.1.7. IoT Architecture \nThere is not such a unique or standard consensus on the Internet of Things (IoT) architecture \nwhich is universally defined. The IoT architecture differs from their functional area and their \nsolutions. However, the IoT architecture technology mainly consists of four major \ncomponents: \nComponents of IoT Architecture \no Sensors/Devices \no Gateways and Networks \no Cloud/Management Service Layer \no Application Layer \n \nThere are several layers of IoT built upon the capability and performance of IoT elements \nthat provides the optimal solution to the business enterprises and end-users. The IoT \narchitecture is a fundamental way to design the various elements of IoT, so that it can \ndeliver services over the networks and serve the needs for the future. \n \n",
        "images": []
    },
    "105": {
        "text": "lOMoAR cPSD|26885763 \n \n105 | P a g e  \n \n \n \nStages of IoT Solutions Architecture \n \n \nFollowing are the primary stages (layers) of IoT that provides the solution for IoT \narchitecture. \n1. Sensors/Actuators: Sensors or Actuators are the devices that are able to emit, accept \nand process data over the network. These sensors or actuators may be connected \neither through wired or wireless. This contains GPS, Electrochemical, Gyroscope, \nRFID, etc. Most of the sensors need connectivity through sensors gateways. The \nconnection of sensors or actuators can be through a Local Area Network (LAN) or \nPersonal Area Network. \n2. Gateways and Data Acquisition: As the large numbers of data are produced by this \nsensors and actuators need the high-speed Gateways and Networks to transfer the \ndata. This network can be of type Local Area Network (LAN such as WiFi, Ethernet, \netc.), Wide Area Network (WAN such as GSM, 5G, etc.). \n3. Edge IT: Edge in the IoT Architecture is the hardware and software gateways that \nanalyze and pre-process the data before transferring it to the cloud. If the data read \nfrom the sensors and gateways are not changed from its previous reading value then it \ndoes not transfer over the cloud, this saves the data used. \n4. Data center/ Cloud: The Data Center or Cloud comes under the Management \nServices which process the information through analytics, management of device and \nsecurity controls. Beside this security controls and device management the cloud \ntransfer the data to the end users application such as Retail, Healthcare, Emergency, \nEnvironment, and Energy, etc. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_105_img_1.jpeg"
        ]
    },
    "106": {
        "text": "lOMoAR cPSD|26885763 \n \n106 | P a g e  \n \n \n3.1.8. Difference Between IoT Devices and Computers \n \nwe will discuss the overview of the Internet of Things and Computers and mainly will focus \non the difference between IoT devices and Computers. Let’s discuss it one by one. \n \nInternet of Things (IoT): \nThe Internet of Things (IoT) is the network of physical objects/devices like vehicles, \nbuildings, cars, and other items embedded with electronics, software, sensors, and network \nconnectivity that enables these objects to collect and exchange data. IoT devices have made \nhuman life easier. The IoT devices like smart homes, smart cars have made the life of \nhumans very comfortable. IoT devices are now being a part of our day-to-day life.  \nComputers: \nA computer is a hardware device embedded with software in it. The computer does most of \nthe work like calculations, gaming, web browsers, word processors, e-mails, etc. The main \nfunction of a computer is to compute the functions, to run the programs. It takes input from \nthe computer and then computes/processes it and generates the output.  \n \nFunction of Computer \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_106_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_106_img_2.jpeg"
        ]
    },
    "107": {
        "text": "lOMoAR cPSD|26885763 \n \n107 | P a g e  \n \n3.2. Overview of IoT Vs Computers \nOne big difference between IoT devices and computers is that the main function of IoT \ndevices is not to compute(not to be a computer) and the main function of a computer is to \ncompute functions and to run programs. But on IoT devices that is not its main point, it has \nsome other function besides that. As an example like in cars, the function of IoT devices are \nnot to compute anti-lock breaking or to do fuel injection, their main function from the point \nof view of a user is to be driven and to move you from place to place and the computer is just \nto help that function. For example, The main function of the car is not to compute like anti-\nlock breaking or to do fuel injection their main function from the point of view of a user is to \ndrive, to move you from place to place. But when we embed software in it then the software \ncan be able for fuel limit detection.  \n \n3.2.1. Difference between IoT devices and Computers: \nIOT Devices \nComputers \nIoT devices are special-purpose devices. \nComputers are general-purpose devices. \nIoT devices can do only a particular task \nfor which it is designed. \nComputers can do so many tasks. \nThe hardware and software built-in in the \nIoT devices are streamlined for that \nparticular task. \nThe hardware and software built-in in the \ncomputers are streamlined to do many \ntasks(such as calculation, gaming, music \nplayer, etc. ) \nIoT devices can be cheaper and faster at a \nparticular task than computers, as IoT \ndevices are made to do that particular task. \nA computer can be expensive and slower at a \nparticular task than an IoT device. \nExamples: Music Player- iPod, Alexa, \nsmart cars, etc. \nExamples: Desktop computers, Laptops, etc. \nConfigure IoT Device Discovery and Policy Enforcement \ndate_range16-Dec-22 \narrow_backward \narrow_forward \n \nTo get started with IoT device discovery in your network, all you need is a security device \nconnected to Juniper ATP Cloud.  \n",
        "images": []
    },
    "108": {
        "text": "lOMoAR cPSD|26885763 \n \n108 | P a g e  \n \nIoT Device Discovery and Policy Enforcement Topology \n \nAs shown in the topology, the network includes some IoT devices connected to an SRX \nSeries device through wireless access point (AP). The security device is connected to the \nJuniper Cloud ATP server, and to a host device. \n \nThe security device collects IoT device metadata and streams the relevant information to the \nJuniper ATP Cloud. To enable streaming of IoT metadata, you'll need to create security \nmetadata streaming policies and attach these policies to security policies. Streaming of the \nIoT device traffic pauses automatically when Juniper Cloud server has sufficient details to \nclassify the IoT device. \n \nJuniper ATP cloud discovers and classifies IoT devices. Using the inventory of discovered \nIoT devices, you'll create threat feeds in the form of dynamic address groups. Once the \nsecurity device downloads dynamic address groups, you can use the dynamic address groups \nto create and enforce security policies for the IoT traffic. \n \nRequirements \n• \nSRX Series device or NFX Series device \n• \nJunos OS Release 22.1R1 or later \n• \nJuniper Advanced Threat Prevention Cloud Account. We've verified and tested the \nconfiguration using a vSRX instance with Junos OS Release 22.1R1. \n \n3.3. IoT Configuration \n1. Access \no Be sure the device’s access control does not allow unauthorized or \nunauthenticated access and that appropriate restrictions are in place. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_108_img_1.jpeg"
        ]
    },
    "109": {
        "text": "lOMoAR cPSD|26885763 \n \n109 | P a g e  \n \no Change the default password to something complex with 16 characters or \nmore if feasible. \no Make sure no management interface is accessed over an unencrypted channel \n(e.g. use HTTPS rather than HTTP and disable the latter). \no For Raspberry Pi Devices: \n▪ Make sudo require a password. \n▪ Modify the sshd configuration to allow only specific users for SSH \naccess. \n▪ Use key-based authentication as an alternative to a password login. \no For printers, disable any unnecessary services. Disable the following where \npossible, as they are commonly visible without a username or password: \n• Internal storage or job forwarding \n• Job logs \n• Print queue \n• Device management logs \n2. Software updates \n1. Keep the device software updated with the latest security patches and \nfirmware. \n• Some patches can revert or change passwords. \n3. Services \n1. Disable all unused services, such as telnet, ssh, FTP/TFTP, MySQL, email, \nweb proxy, SLP/Device Announcement Agent, WS-Discovery/XML Services, \nWeb Services Print, WINS, LLMNR, IPX/SPX, DLC/LLC, Multicast IPv4, \nFile Access Settings (JPL Disk Access, SNMP Disk Access, etc.). \n2. For printers: \n• Automatically delete data after the printing process is complete. \nOptions can be set for how long data can be resident on the printer – \nset to lowest time available. \n• Confirm deletion of data upon job completion. \n• Disable local use of printer memory if possible. \n4. Network \n",
        "images": []
    },
    "110": {
        "text": "lOMoAR cPSD|26885763 \n \n110 | P a g e  \n \n1. IoT devices must use a non-publicly-routable IP address wherever possible. \nExceptions must be approved by the Office of the Chief Information Security \nOfficer (CISO). \n2. If possible, use a firewall or similar means of restricting access to the IoT \ndevice management services to only the IP address ranges needed. For off-\ncampus access, the campus VPN range should be included rather than any \nexternal IP addresses. \n3. For Raspberry Pi Devices: \n• Install and configure fail2ban. \n• Install virus protection. \n5. Logging \n1. Enable logging of IoT device access and configuration changes. Have the logs \nsent to an external device. \n2. Monitor logs for unusual behavior. \n6. Redundancy and backups \n1. If the device has a critical function, consider having a backup configured or \npurchasing a second device. \n2. Regularly back up the device’s configuration, or keep track of its \nconfiguration on an external system. \n3. Check with the device’s vendor for security bulletins or configuration. \n4. Consider the types of data your device stores or processes and ensure \nunauthorized individuals can’t access that data. \n \n3.4. Components of IoT System \nWhat are the major components of Internet of Things? \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_110_img_1.jpeg"
        ]
    },
    "111": {
        "text": "lOMoAR cPSD|26885763 \n \n111 | P a g e  \n \n3.4.1. IoT Components \n1. Smart devices and sensors – Device connectivity \nDevices and sensors are the components of the device connectivity layer. These smart \nsensors are continuously collecting data from the environment and transmit the information \nto the next layer. The latest techniques in semiconductor technology are capable of producing \nmicro smart sensors for various applications. \nCommon sensors are: \n• \nTemperature sensors and thermostats \n• \nPressure sensors \n• \nHumidity / Moisture level \n• \nLight intensity detectors \n• \nMoisture sensors \n• \nProximity detection \n• \nRFID tags \nHow are the devices connected? \nMost modern smart devices and sensors can be connected to low-power wireless networks \nlike Wi-Fi, ZigBee, Bluetooth, Z-wave, LoRAWAN, etc. Each of these wireless technologies \nhas its pros and cons in terms of power, data transfer rate, and overall efficiency. \n \nDevelopments in low-power, low-cost wireless transmitting devices are promising in \nthe area of IoT due to their long battery life and efficiency. Many companies have adopted \nthe latest protocols like 6LoWPAN- IPv6 over Low Power Wireless Personal Area Networks \nto implement energy-efficient data transmission for IoT networks. LoWPAN uses reduced \ntransmission time (typically short time pulses) and thus saves energy. \n2. Gateway \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_111_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_111_img_2.jpeg"
        ]
    },
    "112": {
        "text": "lOMoAR cPSD|26885763 \n \n112 | P a g e  \n \nIoT Gateway manages the bidirectional data traffic between different networks and \nprotocols. Another function of the gateway is to translate different network protocols and \nmake sure interoperability of the connected devices and sensors. \n \nGateways can be configured to perform pre-processing of the collected data from thousands \nof sensors locally before transmitting it to the next stage. In some scenarios, it would be \nnecessary due to the compatibility of the TCP/IP protocol. \n \nIoT gateway offers a certain level of security for the network and transmitted data with \nhigher-order encryption techniques. It acts as a middle layer between devices and the cloud \nto protect the system from malicious attacks and unauthorized access. \n \n3. Cloud \nThe Internet of Things creates massive data from devices, applications, and users, \nwhich has to be managed in an efficient way. IoT cloud offers tools to collect, process, \nmanage and store huge amounts of data in real time. Industries and services can easily access \nthese data remotely and make critical decisions when necessary. \n \nBasically, the IoT cloud is a sophisticated, high-performance network of servers optimized to \nperform high-speed data processing of billions of devices, traffic management, and deliver \naccurate analytics. Distributed database management systems are one of the most important \ncomponents of the IoT cloud. \n \nCloud system integrates billions of devices, sensors, gateways, protocols, and data storage \nand provides predictive analytics. Companies use these analytics data to improve products \nand services, preventive measures for certain steps, and build their new business model \naccurately. \n \n4. Analytics \n \nAnalytics is the process of converting analog data from billions of smart devices and \nsensors into useful insights which can be interpreted and used for detailed analysis. Smart \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_112_img_1.jpeg"
        ]
    },
    "113": {
        "text": "lOMoAR cPSD|26885763 \n \n113 | P a g e  \n \nanalytics solutions are inevitable for IoT systems for the management and improvement of \nthe entire system. \n \nOne of the major advantages of an efficient IoT system is real-time smart analytics which \nhelps engineers to find out irregularities in the collected data and act fast to prevent an \nundesired scenario.  Service providers can prepare for further steps if the information is \ncollected accurately at the right time. \n \nBig enterprises use the massive data collected from IoT devices and utilize the insights for \ntheir future business opportunities. Careful analysis will help organizations to predict trends \nin the market and plan ahead for a successful implementation. \n \nInformation is very significant in any business model, and predictive analysis ensures success \nin the concerned area of the business line. \n \n5. User interface \nUser interfaces are the visible, tangible part of the IoT system which users can access. \nDesigners will have to make sure of a well-designed user interface for minimum effort for \nusers and encourage more interactions. \n \nModern technology offers much interactive design to ease complex tasks into simple touch \npanel controls. Multicolor touch panels have replaced hard switches in our household \nappliances, and the trend is increasing for almost every smart home device. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_113_img_1.jpeg"
        ]
    },
    "114": {
        "text": "lOMoAR cPSD|26885763 \n \n114 | P a g e  \n \n \nThe user interface design has higher significance in today’s competitive market; it often \ndetermines the user whether to choose a particular device or appliance. Users will be \ninterested in buying new devices or smart gadgets if it is very user-friendly and compatible \nwith common wireless standards. \n \n3.4.2. Real Life Example Depicting Working of IoT \nHere, we will discuss some examples, which states how IoT works in real-life: \ni. Say, we have an AC in our room, now the temperature sensor installed in it in the room \nwill be integrated with a gateway. A gateway’s purpose is to help connect the temperature \nsensor (inside the AC) to the Internet by making use of a cloud infrastructure. \nii. A Cloud/server infrastructure has detailed records about each and every device connected \nto it such as device id, a status of the device, what time was the device last accessed, number \nof times the device has been accessed and much more. \niii. A connection with the cloud then implement by making use of web services such as \nRESTful. \niv. We in this system, act as end-users and through the mobile app interact with Cloud (and \nin turn devices installed in our homes). A request will send to the cloud infrastructure with \nthe authentication of the device and device information. It requires authentication of the \ndevice to ensure cybersecurity. \nv. Once the cloud has authenticated the device, it sends a request to the appropriate sensor \nnetwork using gateways. \nvi. After receiving the request, the temperature sensor inside the AC will read the current \ntemperature in the room and will send the response back to the cloud. \nvii. Cloud infrastructure will then identify the particular user who has requested the data and \nwill then push the requested data to the app. So, a user will get the current information about \nthe temperature in the room, pick up through AC’s temperature sensors directly on his \nscreen. \n \nReal Life Example – Internet of Things works \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_114_img_1.jpeg"
        ]
    },
    "115": {
        "text": "lOMoAR cPSD|26885763 \n \n115 | P a g e  \n \n3.5. Arduino  \nA decade ago, working around electronics involved knowledge in physics and math, \nexpensive lab equipment, a laboratory type setup and important of all, love for electronics. \nBut the picture has changed over the decade or so where the above-mentioned factors \nbecame irrelevant to work around electronics except for the last part: love for electronics. \nOne such product which made use of the above specified and many other reasons and made \nelectronics be able reach anyone regardless of their background is “Arduino”. \n \n3.5.1. Introduction \nArduino is an open-source prototyping platform in electronics based on easy-to-use hardware \nand software. Subtly speaking, Arduino is a microcontroller based prototyping board which \ncan be used in developing digital devices that can read inputs like finger on a button, touch \non a screen, light on a sensor etc. and turning it in to output like switching on an LED, \nrotating a motor, playing songs through a speaker etc. \n \n \n \nThe Arduino board can be programmed to do anything by simply programming the \nmicrocontroller on board using a set of instructions for which, the Arduino board consists of \na USB plug to communicate with your computer and a bunch of connection sockets that can \nbe wired to external devices like motors, LEDs etc. \n \nThe aim of Arduino is to introduce the world of electronics to people who have small to no \nexperience in electronics like hobbyists, designers, artists etc. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_115_img_1.jpeg"
        ]
    },
    "116": {
        "text": "lOMoAR cPSD|26885763 \n \n116 | P a g e  \n \n \nArduino is based on open source electronics project i.e. all the design specifications, \nschematics, software are available openly to all the users. Hence, Arduino boards can bought \nfrom vendors as they are commercially available or else you can make your own board by if \nyou wish i.e. you can download the schematic from Arduino’s official website, buy all the \ncomponents as per the design specification, assemble all the components, and make your \nown board. \n \n3.5.2. Hardware and Software \nArduino boards are generally based on microcontrollers from Atmel Corporation like 8, 16 or \n32 bit AVR architecture based microcontrollers. \n \nThe important feature of the Arduino boards is the standard connectors. Using these \nconnectors, we can connect the Arduino board to other devices like LEDs or add-on modules \ncalled Shields. \nThe Arduino boards also consists of on board voltage regulator and crystal oscillator. They \nalso consist of USB to serial adapter using which the Arduino board can be programmed \nusing USB connection. \nIn order to program the Arduino board, we need to use IDE provided by Arduino. The \nArduino IDE is based on Processing programming language and supports C and C++. \n \n3.5.3. Types of Arduino Boards \nThere are many types of Arduino boards available in the market but all the boards have one \nthing in common: they can be programmed using the Arduino IDE. The reasons for different \ntypes of boards are different power supply requirements, connectivity options, their \napplications etc. \n \nArduino boards are available in different sizes, form factors, different no. of I/O pins etc. \nSome of the commonly known and frequently used Arduino boards are Arduino \nUNO, Arduino Mega, Arduino Nano, Arduino Micro and Arduino Lilypad. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_116_img_1.jpeg"
        ]
    },
    "117": {
        "text": "lOMoAR cPSD|26885763 \n \n117 | P a g e  \n \n \nThere are add-on modules called Arduino Shields which can be used to extend the \nfunctionalities of the Arduino boards. Some of the commonly used shields are Arduino Proto \nshield, Arduino WiFi Shield and Arduino Yun Shield. \n \nStep 1: Types of Arduino \n \n3.5.3.1. Arduino UNO \nThe most common version of Arduino is the Arduino Uno. This board is what most \npeople are talking about when they refer to an Arduino. In the next step, there is a more \ncomplete rundown of its features. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_117_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_117_img_2.jpeg"
        ]
    },
    "118": {
        "text": "lOMoAR cPSD|26885763 \n \n118 | P a g e  \n \n3.5.3.2. Arduino NG, Diecimila, and the Duemilanove (Legacy Versions) \nLegacy versions of the Arduino Uno product line consist of the NG, Diecimila, and the \nDuemilanove. The important thing to note about legacy boards is that they lack particular \nfeature of the Arduino Uno. Some key differences: \n• \n The Diecimila and NG use an ATMEGA168 chips (as opposed to the more powerful \nATMEGA328), \n• \n Both the Diecimila and NG have a jumper next to the USB port and require manual selection \nof either USB or battery power. \n• \n The Arduino NG requires that you hold the rest button on the board for a few seconds prior \nto uploading a program. \n \n3.5.3.3. Arduino Mega 2560 \nThe Arduino Mega 2560 is the second most commonly encountered version of the Arduino \nfamily. The Arduino Mega is like the Arduino Uno's beefier older brother. It boasts 256 KB \nof memory (8 times more than the Uno). It also had 54 input and output pins, 16 of which are \nanalog pins, and 14 of which can do PWM. However, all of the added functionality comes at \nthe cost of a slightly larger circuit board. It may make your project more powerful, but it will \nalso make your project larger. Check out the official Arduino Mega 2560 page for more \ndetails. \n \n3.5.3.4. Arduino Mega ADK \nThis specialized version of the Arduino is basically an Arduino Mega that has been \nspecifically designed for interfacing with Android smartphones. This too is now a legacy \nversion. \n \n3.5.3.5. Arduino Yun \nThe Arduino Yun uses a ATMega32U4 chip instead of the ATmega328. However, what \nreally sets it apart is the addition of the Atheros AR9331 microprocessor. This extra chip \nallows this board to run Linux in addition to the normal Arduino operating system. If all of \nthat were not enough, it also has onboard wifi capability. In other words, you can program \nthe board to do stuff like you would with any other Arduino, but you can also access the \nLinux side of the board to connect to the internet via wifi. The Arduino-side and Linux-side \ncan then easily communicate back and forth with each other. This makes this board \nextremely powerful and versatile. I'm barely scratching the surface of what you can do with \nthis, but to learn more, check out the official Arduino Yun page. \n \n3.5.3.6. Arduino Nano \nIf you want to go smaller than the standard Arduino board, the Arduino Nano is for you! \nBased on a surface mount ATmega328 chip, this version of the Arduino has been shrunk \n",
        "images": []
    },
    "119": {
        "text": "lOMoAR cPSD|26885763 \n \n119 | P a g e  \n \ndown to a small footprint capable of fitting into tight spaces. It can also be inserted directly \ninto a breadboard, making it easy to prototype with. \n \n3.5.3.7. Arduino LilyPad \nThe LilyPad was designed for wearable and e-textile applications. It is intended to be sewn to \nfabric and connected to other sewable components using conductive thread. This board \nrequires the use of a special FTDI-USB TTL serial programming cable. For more \ninformation, the Arduino LilyPad page is a decent starting point. \n \n(Note that some of the links on this page are affiliate links. This does not change the cost of \nthe item for you. I reinvest whatever proceeds I receive into making new projects. If you \nwould like any suggestions for alternative suppliers, please let me know.) \n \nStep 2: Arduino Uno Features \nSome people think of the entire Arduino board as a microcontroller, but this is inaccurate. \nThe Arduino board actually is a specially designed circuit board for programming and \nprototyping with Atmel microcontrollers. \n \nThe nice thing about the Arduino board is that it is relatively cheap, plugs straight into a \ncomputer's USB port, and it is dead-simple to setup and use (compared to other development \nboards). \nSome of the key features of the Arduino Uno include: \n \n An open source design. The advantage of it being open source is that it has a large \ncommunity of people using and troubleshooting it. This makes it easy to find someone to \nhelp you debug your projects. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_119_img_1.jpeg"
        ]
    },
    "120": {
        "text": "lOMoAR cPSD|26885763 \n \n120 | P a g e  \n \n \n• \n An easy USB interface . The chip on the board plugs straight into your USB port and \nregisters on your computer as a virtual serial port. This allows you to interface with it as \nthrough it were a serial device. The benefit of this setup is that serial communication is an \nextremely easy (and time-tested) protocol, and USB makes connecting it to modern \ncomputers really convenient. \n• \n Very convenient power management and built-in voltage regulation. You can connect an \nexternal power source of up to 12v and it will regulate it to both 5v and 3.3v. It also can be \npowered directly off of a USB port without any external power. \n• \n An easy-to-find, and dirt cheap, microcontroller \"brain.\" The ATmega328 chip retails for \nabout $2.88 on Digikey. It has countless number of nice hardware features like timers, PWM \npins, external and internal interrupts, and multiple sleep modes. Check out the \nofficial datasheet for more details. \n• \n A 16mhz clock. This makes it not the speediest microcontroller around, but fast enough for \nmost applications. \n• \n 32 KB of flash memory for storing your code. \n• \n 13 digital pins and 6 analog pins. These pins allow you to connect external hardware to your \nArduino. These pins are key for extending the computing capability of the Arduino into the \nreal world. Simply plug your devices and sensors into the sockets that correspond to each of \nthese pins and you are good to go. \n• \n An ICSP connector for bypassing the USB port and interfacing the Arduino directly as a \nserial device. This port is necessary to re-bootload your chip if it corrupts and can no longer \ntalk to your computer. \n• \n An on-board LED attached to digital pin 13 for fast an easy debugging of code. \n• \n And last, but not least, a button to reset the program on the chip. \n \nStep 3: Arduino IDE \n \nBefore you can start doing anything with the Arduino, you need to download and install \nthe Arduino IDE (integrated development environment). From this point on we will be \nreferring to the Arduino IDE as the Arduino Programmer. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_120_img_1.jpeg"
        ]
    },
    "121": {
        "text": "lOMoAR cPSD|26885763 \n \n121 | P a g e  \n \nThe Arduino Programmer is based on the Processing IDE and uses a variation of the C and \nC++ programming languages. \nYou can find the most recent version of the Arduino Programmer on this page. \n \nStep 4: Plug It In \n \n \nConnect the Arduino to your computer's USB port. \nPlease note that although the Arduino plugs into your computer, it is not a true USB device. \nThe board has a special chip that allows it to show up on your computer as a virtual serial \nport when it is plugged into a USB port. This is why it is important to plug the board in. \nWhen the board is not plugged in, the virtual serial port that the Arduino operates upon will \nnot be present (since all of the information about it lives on the Arduino board). \n \nIt is also good to know that every single Arduino has a unique virtual serial port address. \nThis means that every time you plug in a different Arduino board into your computer, you \nwill need to reconfigure the serial port that is in use. \n \nThe Arduino Uno requires a male USB A to male USB B cable. \n \nStep 5: Settings \n \nBefore you can start doing anything in the Arduino programmer, you must set the board-type \nand serial port. \nTo set the board, go to the following: \nTools --> Boards \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_121_img_1.jpeg"
        ]
    },
    "122": {
        "text": "lOMoAR cPSD|26885763 \n \n122 | P a g e  \n \nSelect the version of board that you are using. Since I have an Arduino Uno plugged in, I \nobviously selected \"Arduino Uno.\" \nTo set the serial port, go to the following: \nTools --> Serial Port \nSelect the serial port that looks like: \n/dev/tty.usbmodem [random numbers] \n \n \n \n \nStep 6: Run a Sketch \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_122_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_122_img_2.jpeg"
        ]
    },
    "123": {
        "text": "lOMoAR cPSD|26885763 \n \n123 | P a g e  \n \n \n \n \nArduino programs are called sketches. The Arduino programmer comes with a ton of \nexample sketches preloaded. This is great because even if you have never programmed \nanything in your life, you can load one of these sketches and get the Arduino to do \nsomething. \n \nTo get the LED tied to digital pin 13 to blink on and off, let's load the blink example. \nThe blink example can be found here: \nFiles --> Examples --> Basics --> Blink \nThe blink example basically sets pin D13 as an output and then blinks the test LED on the \nArduino board on and off every second. \n \nOnce the blink example is open, it can be installed onto the ATMEGA328 chip by pressing \nthe upload button, which looks like an arrow pointing to the right. \n \nNotice that the surface mount status LED connected to pin 13 on the Arduino will start to \nblink. You can change the rate of the blinking by changing the length of the delay and \npressing the upload button again. \n \nStep 7: Serial Monitor \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_123_img_1.jpeg"
        ]
    },
    "124": {
        "text": "lOMoAR cPSD|26885763 \n \n124 | P a g e  \n \n \n \n \nThe serial monitor allows your computer to connect serially with the Arduino. This is \nimportant because it takes data that your Arduino is receiving from sensors and other devices \nand displays it in real-time on your computer. Having this ability is invaluable to debug your \ncode and understand what number values the chip is actually receiving. \n \nFor instance, connect center sweep (middle pin) of a potentiometer to A0, and the outer pins, \nrespectively, to 5v and ground. Next upload the sketch shown below: \nFile --> Examples --> 1.Basics --> AnalogReadSerial \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_124_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_124_img_2.jpeg"
        ]
    },
    "125": {
        "text": "lOMoAR cPSD|26885763 \n \n125 | P a g e  \n \n \nClick the button to engage the serial monitor which looks like a magnifying glass. You can \nnow see the numbers being read by the analog pin in the serial monitor. When you turn the \nknob the numbers will increase and decrease. \nThe numbers will be between the range of 0 and 1023. The reason for this is that the analog \npin is converting a voltage between 0 and 5V to a discreet number. \n \nStep 8: Digital In \n \nThe Arduino has two different types of input pins, those being analog and digital. \nTo begin with, lets look at the digital input pins. \n \nDigital input pins only have two possible states, which are on or off. These two on and off \nstates are also referred to as: \n• \n HIGH or LOW \n• \n 1 or 0 \n• \n 5V or 0V. \nThis input is commonly used to sense the presence of voltage when a switch is opened or \nclosed. \nDigital inputs can also be used as the basis for countless digital communication protocols. By \ncreating a 5V (HIGH) pulse or 0V (LOW) pulse, you can create a binary signal, the basis of \nall computing. This is useful for talking to digital sensors like a PING ultrasonic sensor, or \ncommunicating with other devices. \n \nFor a simple example of a digital input in use, connect a switch from digital pin 2 to 5V, a \n10K resistor** from digital pin 2 to ground, and run the following code: \nFile --> Examples --> 2.Digital --> Button \n**The 10K resistor is called a pull-down resistor because it connects the digital pin to ground \nwhen the switch is not pressed. When the switch is pressed, the electrical connections in the \nswitch has less resistance than the resistor, and the electricity no longer connects to ground. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_125_img_1.jpeg"
        ]
    },
    "126": {
        "text": "lOMoAR cPSD|26885763 \n \n126 | P a g e  \n \nInstead, electricity flows between 5V and the digital pin. This is because electricity always \nchooses the path of least resistance. To learn more about this, visit the Digital Pins page. \n \nStep 9: Analog In \n \nAside from the digital input pins, the Arduino also boasts a number of analog input pins. \nAnalog input pins take an analog signal and perform a 10-bit analog-to-digital (ADC) \nconversion to turn it into a number between 0 and 1023 (4.9mV steps). \n \nThis type of input is good for reading resistive sensors. These are basically sensors which \nprovide resistance to the circuit. They are also good for reading a varying voltage signal \nbetween 0 and 5V. This is useful when interfacing with various types of analog circuitry. \n \nIf you followed the example in Step 7 for engaging the serial monitor, you have already tried \nusing an analog input pin. \n \nStep 10: Digital Out \n \nA digital out pin can be set to be HIGH (5v) or LOW (0v). This allows you to turn things on \nand off. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_126_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_126_img_2.jpeg"
        ]
    },
    "127": {
        "text": "lOMoAR cPSD|26885763 \n \n127 | P a g e  \n \n \nAside from turning things on and off (and making LEDs blink), this form of output is \nconvenient for a number of applications. \n \nMost notably, it allows you to communicate digitally. By turning the pin on and off rapidly, \nyou are creating binary states (0 and 1), which is recognized by countless other electronic \ndevices as a binary signal. By using this method, you can communicate using a number of \ndifferent protocols. \nDigital communication is an advanced topic, but to get a general idea of what can be done, \ncheck out the Interfacing With Hardware page. \nIf you followed the example in Step 6 for getting an LED to blink, you have already tried \nusing a digital output pin. \n \nStep 11: Analog Out \n \nAs mentioned earlier, the Arduino has a number of built in special functions. One of these \nspecial functions is pulse width modulation, which is the way an Arduino is able to create an \nanalog-like output. \n \nPulse width modulation - or PWM for short - works by rapidly turning the PWM pin high \n(5V) and low (0V) to simulate an analog signal. For instance, if you were to blink an LED on \nand off rapidly enough (about five milliseconds each), it would seem to average the \nbrightness and only appear to be receiving half the power. Alternately, if it were to blink on \nfor 1 millisecond and then blink off for 9 millisecond, the LED would appear to be 1/10 as \nbright and only be receiving 1/10 the voltage. \n \nPWM is key for a number of applications including making sound, controlling the brightness \nof lights, and controlling the speed of motors. \n \nTo try out PWM yourself, connect an LED and 220 ohm resistor to digital pin 9, in series to \nground. Run the following example code: \nFile --> Examples --> 3.Analog --> Fading \nStep 12: Write Your Own Code \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_127_img_1.jpeg"
        ]
    },
    "128": {
        "text": "lOMoAR cPSD|26885763 \n \n128 | P a g e  \n \n \nTo write your own code, you will need to learn some basic programming language syntax. In \nother words, you have to learn how to properly form the code for the programmer to \nunderstand it. You can think of this kind of like understanding grammar and punctuation. \nYou can write an entire book without proper grammar and punctuation, but no one will be \nabler to understand it, even if it is in English. \n \nSome important things to keep in mind when writing your own code: \n• \n An Arduino program is called a sketch. \n• \n All code in an Arduino sketch is processed from top to bottom. \n• \n Arduino sketches are typically broken into five parts. \n \n1.  The sketch usually starts with a header that explains what the sketch is doing, and who \nwrote it. \n2.  Next, it usually defines global variables. Often, this is where constant names are given \nto the different Arduino pins. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_128_img_1.jpeg"
        ]
    },
    "129": {
        "text": "lOMoAR cPSD|26885763 \n \n129 | P a g e  \n \n3.  After the initial variables are set, the Arduino begins the setup routine. In the setup \nfunction, we set initial conditions of variables when necessary, and run any \npreliminary code that we only want to run once. This is where serial communication is \ninitiated, which is required for running the serial monitor. \n4.  From the setup function, we go to the loop routine. This is the main routine of the \nsketch. This is not only where your main code goes, but it will be executed over and \nover, so long as the sketch continues to run. \n5.  Below the loop routine, there is often other functions listed. These functions are user-\ndefined and only activated when called in the setup and loop routine. When these \nfunctions are called, the Arduino processes all of the code in the function from top to \nbottom and then goes back to the next line in the sketch where it left off when the \nfunction was called. Functions are good because they allow you to run standard \nroutines - over and over - without having to write the same lines of code over and over. \nYou can simply call upon a function multiple times, and this will free up memory on \nthe chip because the function routine is only written once. It also makes code easier to \nread.  \n \n• \n All of that said, the only two parts of the sketch which are mandatory are the Setup and \nLoop routines. \n• \n Code must be written in the Arduino Language, which is roughly based on C. \n• \n Almost all statements written in the Arduino language must end with a ; \n• \n Conditionals (such as if statements and for loops) do not need a ; \n• \n Conditionals have their own rules and can be found under \"Control Structures\" on \nthe Arduino Language  \n• \n Variables are storage compartments for numbers. You can pass values into and out of \nvariables. Variables must be defined (stated in the code) before they can be used and need to \nhave a data type associated with it. To learn some of the basic data types, review \nthe Language Page. \n \nStep 13: Shields \n \nShields are expansion apdapter boards that plug in over top of the Arduino Uno and gives it \nspecial functions. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_129_img_1.jpeg"
        ]
    },
    "130": {
        "text": "lOMoAR cPSD|26885763 \n \n130 | P a g e  \n \nSince the Arduino is open hardware, anyone who has the inclination is free to make an \nArduino shield for whatever task they wish to accomplish. On account of this, there are \ncountless number of Arduino shields out in the wild. You can find an ever-growing list \nof Arduino shields in the Arduino playground. Keep in mind that there will be more shield in \nexistence than you will find on listed on that page (as always, Google is your friend). \n \nStep 14: Building an External Circuit \n \nAs your projects get more complex, you will want to build your own circuits to interfacewith \nthe Arduino. While you won't learn electronics overnight, the internet is an unbelievable \nresource for electronic knowledge and circuit diagrams. \nTo get started with electronics, visit the Basic Electronics Instructable. \n \nStep 15: Going Beyond \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_130_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_130_img_2.jpeg"
        ]
    },
    "131": {
        "text": "lOMoAR cPSD|26885763 \n \n131 | P a g e  \n \n3.6. Arduino ToolChain \nToday we’re going to talk about how the Arduino tool chain converts instructions you type \ninto the text editor into machine language the microcontroller can understand. \n \nA tool chain is simply a set of software tools that work together to complete a task. for \nexample, if we were going to hang a picture, the tool chain might include a hammer, maybe a \ntape measure and some nails. \n \nArduino Hardware/Software Interface \nWhen programming the Arduino (or anything else), it is possible to write some pretty \ncomplex instructions and get the Arduino to do some really cool things. \n \nThe problem is that a microcontroller (like the ATmega328 on the Uno) can only execute \nsimple, low-level instructions. These simple instructions include things like add variable a to \nvariable b or take variable b and put it in register x. \n \nAnd, to complicate matters, microcontrollers only speak in binary. For those who don’t \nknow, binary numbers are long strings of 1s and 0s. If you need to brush up on binary \nnumbers, see A Bit of Fun with Binary Number Basics. \n \nArduino and other microcontrollers only understand binary. \n \nThe statement here may make total sense to you if you’ve been working with Arduino for a \nwhile. Or, if not, it may not make any sense at all. Either way, just go with me here for a \nminute. This is just an illustration which does not require complete understanding of the \ncode. \nInt Temp = analogRead(sensorPin); \nIf (Temp > 500) \n{ \n//more complex instructions go here \n} \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_131_img_1.jpeg"
        ]
    },
    "132": {
        "text": "lOMoAR cPSD|26885763 \n \n132 | P a g e  \n \nA good way to think of binary numbers and digital signals is like a single pole light switch. \nThe light is either on or its off, there is nothing in between. Zero is off and one is on. \n \na good way to think about digital signals. \n \nGoing from complex instructions to simple ones the microcontroller understands requires \nseveral layers of software that translate the high-level operations into simpler instructions. \n \nHow the Arduino Compiler Works \nThe compiler first transforms the code you write into assembly language. The name of the \ncompiler we’ll be using on our Uno is AVR-GCC. If you’re new to this, that may sound kind \nof weird but try not to obsess over it. It’s just a name. \n \nThe assembler, which come with the IDE with the compiler, then translates the assembly \nlanguage program into machine language. It then creates object files, which combine \nmachine language, data, and information it needs to place instructions properly in memory. \nOften, the assembler creates multiple files which will eventually be put together. \n \nThis is where the linker — another part of the compiler software package — shines. The \nlinker will take all the independently assembled machine language programs and object files \nand put them together. This produces a .hex file that the microprocessor can understand and \nrun. \nThe two figures below, though they apply to C/C++ programming in general, are a good \nillustration of this process. \n  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_132_img_1.jpeg"
        ]
    },
    "133": {
        "text": "lOMoAR cPSD|26885763 \n \n133 | P a g e  \n \n \nanother way to visualize the Arduino code compilation process. \n \nAnother piece of software, called AVR Dude (for Downloader UploaDEr) starts when we \npress the upload button. This software sends the .hex file to the ATMega328 on the Arduino \nboard. On the chip resides the bootloader. This bootloader was put there on purpose by the \nfolks at Arduino and works with AVR Dude to get the .hex into the flash memory on the \nchip. \nAll of this happens very quickly and seamlessly behind the scenes of the Arduino IDE. \n  \n \nhow the compiled code transfers to the Arduino board. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_133_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_133_img_2.jpeg"
        ]
    },
    "134": {
        "text": "lOMoAR cPSD|26885763 \n \n134 | P a g e  \n \n \nProgramming in C vs Arduino \nA few words are in order on this subject due to the enormous popularity of Arduino boards \nand the C/C++ language in general. \n \nOthers use platforms or ecosystems such as the Arduino almost (or entirely) exclusively. \nFinally, some of you may use both depending on your goals and background. \n \nFor hobbyists, the number of people who use platforms like Arduino has exceeded those who \nonly use naked microcontrollers. \n \nWhen we talk about programming the Arduino, we’ll talk about the C/C++ languages. The \ntruth is, sketches are written in a language similar to C, though a sketch itself is not \ncompletely compatible with C. \n \nIn Arduino, the main() function is hidden from view and added for you when you compile or \n“verify” your sketch. Also, there are two functions which the Arduino ecosystem absolutely \nrequires: setup() and loop(). The only function C requires is main(). \n \nC also lacks built-in functions for using microcontroller I/O such as digitalWrite(). \nTo make learning simple, the Arduino IDE designers hide a lot of detail and functionality \nbehind layers of abstraction, many of which come in the form of libraries. Note that the C \nprogramming language also uses libraries. The linker adds them during the linking process. \n \n3.7. Arduino program structure  \nArduino program structure and we will learn more new terminologies used in the \nArduino world. The Arduino software is open-source. The source code for the Java \nenvironment is released under the GPL and the C/C++ microcontroller libraries are under \nthe LGPL. \n \nSketch: The first new terminology is the Arduino program called “sketch”. \n \n3.7.1. Structure \nArduino programs can be divided in three main parts: Structure, Values (variables and \nconstants), and Functions. we will learn about the Arduino software program, step by \nstep, and how we can write the program without any syntax or compilation error. \nLet us start with the Structure. Software structure consist of two main functions: \n Setup( ) function \n Loop( ) function \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_134_img_1.png"
        ]
    },
    "135": {
        "text": "lOMoAR cPSD|26885763 \n \n135 | P a g e  \n \n \n \n \n \n PURPOSE:   The     setup()    function   is   called   when   a   sketch   starts.   Use     it   \nto     initialize the   variables,   pin   modes,   start   using   libraries,   etc.    The    setup    \nfunction    will    only    run once,  after  each  power  up  or  reset  of  the  Arduino  \nboard. \n \n \n PURPOSE: After creating a setup() function, which initializes and sets the initial \nvalues, the loop() function does precisely what its name suggests, and loops consecutively, \nallowing your program to change and respond. Use it to actively control the Arduino \nboard. \n \n2.  Arduino  –  Data Types \nData types in C refers to an extensive system used for declaring variables or \nfunctions of different types. The type of a variable determines how much space it occupies \nin the storage and how the bit pattern stored is interpreted. \nThe following table provides all the data types that you will use during Arduino \nprogramming. \n \nVoid, Boolean ,  char,  Unsigned,  Unsigned,  char , byte,  int, Unsigned, int, word \nString. Array, long, long,  short ,  float ,  double , array, char, String,  object \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_135_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_135_img_2.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_135_img_3.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_135_img_4.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_135_img_5.png"
        ]
    },
    "136": {
        "text": "lOMoAR cPSD|26885763 \n \n136 | P a g e  \n \n  \nvoid \nThe void keyword is used only in function declarations. It indicates that the  \nfunction   is expected to return no information to the function from which it was \ncalled. \n \n \nBoolean \nA  Boolean  holds  one  of  two  values,  true  or  false.  Each  Boolean  variable  \noccupies  one  byte of memory. \n \n \n \nChar \nA data type that takes up one byte of memory that stores a character value. \nCharacter literals are written in single quotes like this: 'A' and for multiple \ncharacters, strings use double quotes: \"ABC\". \n \nHowever, characters are stored as numbers. You can see the specific encoding in the \nASCII \nchart. This means that it is possible to do arithmetic operations on characters, in \nwhich the ASCII value of the character is used. For example, 'A' + 1 has the \nvalue 66, since the ASCII value of the capital letter A is 65. \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_136_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_136_img_2.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_136_img_3.jpeg"
        ]
    },
    "137": {
        "text": "lOMoAR cPSD|26885763 \n \n137 | P a g e  \n \n3.7.2. ASCII Char Table \nunsigned char \nUnsigned char is an unsigned data type that occupies one byte of memory. The unsigned char \ndata type encodes numbers from 0 to 255. \n \n \nbyte   \nExample \nUnsigned  Char  chr_y  =  121  ;  //  declaration  of  variable  with  type  Unsigned char  and  \ninitialize  it  with  character  y \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_137_img_1.png"
        ]
    },
    "138": {
        "text": "lOMoAR cPSD|26885763 \n \n138 | P a g e  \n \n  \nA byte stores an 8-bit unsigned number, from 0 to 255. \n \nInt \nExample \nbyte  m  =  25  ;//declaration  of  variable  with  type  byte  and  initialize  it  with \n25 \nIntegers are the primary data-type for number storage. int stores a 16-bit (2-byte) value. \n \nThis yields a range of -32,768 to 32,767 (minimum value of -2^15 and a maximum value of \n(2^15) - 1). \nThe int size varies from board to board. On the Arduino Due, for example, an int stores a \n32-bit (4-byte) value. This yields a range of -2,147,483,648 to 2,147,483,647 (minimum \nvalue of -2^31 and a maximum value of (2^31) - 1). \n \nExample \nint  counter  =  32  ;//  declaration  of  variable  with  type  int  and  initialize  it  with \n32 \n \nUnsigned int \nUnsigned ints (unsigned integers) are the same as int in the way that they store a 2 byte \nvalue. Instead of storing negative numbers, however, they only store positive values, yielding \na useful range of 0 to 65,535 (2^16) - 1). The Due stores a 4 byte (32-bit) value, ranging from \n0 to 4,294,967,295 (2^32 - 1). \n \nExample \nUnsigned  int  counter=  60  ;  //  declaration  of  variable  with  type  unsigned  int  and \ninitialize  it  with  60 \n \nWord \nOn the Uno and other ATMEGA based boards, a word stores a 16-bit unsigned number. On \nthe Due and Zero, it stores a 32-bit unsigned number. \n \nExample \nword  w  =  1000  ;//declaration  of  variable  with  type  word  and  initialize  it  with \n1000 \n \nLong \nLong variables are extended size variables for number storage, and store 32 bits (4 bytes), \nfrom 2,147,483,648 to 2,147,483,647. \n",
        "images": []
    },
    "139": {
        "text": "lOMoAR cPSD|26885763 \n \n139 | P a g e  \n \n \nExample \nLong  velocity=  102346  ;//declaration  of  variable  with  type  Long  and  initialize it  with  \n102346 \n \nunsigned long \nUnsigned long variables are extended size variables for number storage and store 32 bits (4  \nbytes).  Unlike  standard  longs,  unsigned  longs  will  not  store  negative  numbers, making \ntheir range from 0 to 4,294,967,295 (2^32 - 1). \n \nUnsigned  Long  velocity  =  101006  ;//  declaration  of  variable  with  type  Unsigned \nLong  and  initialize  it  with  101006 \n \nshort \nA short is a 16-bit data-type. On all Arduinos (ATMega and ARM based), a short stores a \n16-bit (2-byte) value. This yields a range of -32,768 to 32,767 (minimum value of -2^15 and \na maximum value of (2^15) - 1). \n \nFloat \nshort  val=  13  ;//declaration  of  variable  with  type  short  and  initialize  it  with \n13 \nData type for floating-point number is a number that has a decimal point. Floating-point \nnumbers are often used to approximate the analog and continuous values because they have \ngreater resolution than integers. \n \nFloating-point numbers can be as large as 3.4028235E+38 and as low as 3.4028235E+38. \nThey are stored as 32 bits (4 bytes) of information. \n \nfloat  num  =  1.352;//declaration  of  variable  with  type  float  and  initialize  it with  1.352 \n \ndouble \nOn  the  Uno  and  other    ATMEGA    based    boards,    Double    precision    floating-point    \nnumber occupies four bytes. That is, the   double   implementation   is   exactly   the   same   \nas   the   float, with no gain in precision. On the Arduino Due, doubles have 8-byte (64 bit) \nprecision. \n \ndouble  num   =  45.352   ;//  declaration   of  variable  with   type  double  and  initialize it  \nwith  45.352 \n \n3.  Arduino  –  Variables  and  Constant \n",
        "images": []
    },
    "140": {
        "text": "lOMoAR cPSD|26885763 \n \n140 | P a g e  \n \n \nBefore we start explaining the variable types, a very important subject we need to make sure, \nyou fully understand is called the variable scope. \n \nWhat is Variable Scope? \nVariables in C programming language, which Arduino uses, have a property called scope. A \nscope is a region of the program and there are three places where variables can be declared. \nThey are: \n \n• Inside a function or a block, which is called local variables. \n• In the definition of function parameters, which is called formal parameters. \n• Outside of all functions, which is called global variables. \n \nLocal Variables \nVariables that are declared inside a function or block are local variables. They can be used \nonly by the statements that are inside that function or block of code. Local variables are not \nknown to function outside their own. Following is the example using local variables: \n \n \n \nGlobal Variables \nGlobal variables are defined outside of all the functions, usually at the top of the \nprogram. The global variables will hold their value throughout the life-time of your \nprogram. \n \nA global variable can be accessed by any function. That is, a global variable is available \nfor use throughout your entire program after its declaration. \n \nThe following example uses global and local variables: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_140_img_1.png"
        ]
    },
    "141": {
        "text": "lOMoAR cPSD|26885763 \n \n141 | P a g e  \n \n \n \n \n3.7.3. Arduino - Operators \nAn operator is a symbol that tells the compiler to perform specific mathematical or logical \nfunctions. C language is rich in built-in operators and provides the following types of \noperators − \n• \nArithmetic Operators \n• \nComparison Operators \n• \nBoolean Operators \n• \nBitwise Operators \n• \nCompound Operators \n \nArithmetic Operators \nAssume variable A holds 10 and variable B holds 20 then − \nOperator \nname \nOperator \nsimple \nDescription \nExample \nassignment \noperator \n= \nStores the value to the right of the equal \nsign in the variable to the left of the equal \nsign. \nA = B \naddition \n+ \nAdds two operands \nA + B will give 30 \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_141_img_1.jpeg"
        ]
    },
    "142": {
        "text": "lOMoAR cPSD|26885763 \n \n142 | P a g e  \n \nsubtraction \n- \nSubtracts second operand from the first \nA - B will give -10 \nmultiplication \n* \nMultiply both operands \nA * B will give 200 \ndivision \n/ \nDivide numerator by denominator \nB / A will give 2 \nmodulo \n% \nModulus Operator and remainder of after \nan integer division \nB % A will give 0 \n \nComparison Operators \nAssume variable A holds 10 and variable B holds 20 then − \n \nOperator \nname \nOperator \nsimple \nDescription \nExample \nequal to \n== \nChecks if the value of two operands is equal or \nnot, if yes then condition becomes true. \n(A == B) \nis not true \nnot equal to \n!= \nChecks if the value of two operands is equal or \nnot, if values are not equal then condition becomes \ntrue. \n(A != B) is \ntrue \nless than \n< \nChecks if the value of left operand is less than the \nvalue of right operand, if yes then condition \nbecomes true. \n(A < B) is \ntrue \ngreater than \n> \nChecks if the value of left operand is greater than \nthe value of right operand, if yes then condition \nbecomes true. \n(A > B) is \nnot true \nless than or \nequal to \n<= \nChecks if the value of left operand is less than or \nequal to the value of right operand, if yes then \ncondition becomes true. \n(A <= B) \nis true \ngreater than \nor equal to \n>= \nChecks if the value of left operand is greater than \nor equal to the value of right operand, if yes then \ncondition becomes true. \n(A >= B) \nis not true \n \nBoolean Operators \nAssume variable A holds 10 and variable B holds 20 then − \n",
        "images": []
    },
    "143": {
        "text": "lOMoAR cPSD|26885763 \n \n143 | P a g e  \n \nOperator \nname \nOperator \nsimple \nDescription \nExample \nand \n&& \nCalled Logical AND operator. If both the operands \nare non-zero then then condition becomes true. \n(A && B) is \ntrue \nor \n|| \nCalled Logical OR Operator. If any of the two \noperands is non-zero then then condition becomes \ntrue. \n(A || B) is true \nnot \n! \nCalled Logical NOT Operator. Use to reverses the \nlogical state of its operand. If a condition is true \nthen Logical NOT operator will make false. \n!(A && B) is \nfalse \n \nBitwise Operators \nAssume variable A holds 60 and variable B holds 13 then − \nOperator \nname \nOperator \nsimple \nDescription \nExample \nand \n& \nBinary AND Operator copies a bit to the result \nif it exists in both operands. \n(A & B) will give 12 \nwhich is 0000 1100 \nor \n| \nBinary OR Operator copies a bit if it exists in \neither operand \n(A | B) will give 61 \nwhich is 0011 1101 \nxor \n^ \nBinary XOR Operator copies the bit if it is set \nin one operand but not both. \n(A ^ B) will give 49 \nwhich is 0011 0001 \nnot \n~ \nBinary Ones Complement Operator is unary \nand has the effect of 'flipping' bits. \n(~A ) will give -60 \nwhich is 1100 0011 \nshift left \n<< \nBinary Left Shift Operator. The left operands \nvalue is moved left by the number of bits \nspecified by the right operand. \nA << 2 will give 240 \nwhich is 1111 0000 \nshift right \n>> \nBinary Right Shift Operator. The left operands \nvalue is moved right by the number of bits \nspecified by the right operand. \nA >> 2 will give 15 \nwhich is 0000 1111 \n \nCompound Operators \nAssume variable A holds 10 and variable B holds 20 then − \n",
        "images": []
    },
    "144": {
        "text": "lOMoAR cPSD|26885763 \n \n144 | P a g e  \n \nOperator \nname \nOperator \nsimple \nDescription \nExample \nincrement \n++ \nIncrement operator, increases integer value \nby one \nA++ will give \n11 \ndecrement \n-- \nDecrement operator, decreases integer value \nby one \nA-- will give 9 \ncompound \naddition \n+= \nAdd AND assignment operator. It adds right \noperand to the left operand and assign the \nresult to left operand \nB \n+= \nA \nis \nequivalent to B \n= B+ A \ncompound \nsubtraction \n-= \nSubtract AND assignment operator. It \nsubtracts right operand from the left operand \nand assign the result to left operand \nB \n-= \nA \nis \nequivalent to B \n= B - A \ncompound \nmultiplication \n*= \nMultiply AND assignment operator. It \nmultiplies right operand with the left \noperand and assign the result to left operand \nB*= \nA \nis \nequivalent to B \n= B* A \ncompound \ndivision \n/= \nDivide AND assignment operator. It divides \nleft operand with the right operand and \nassign the result to left operand \nB \n/= \nA \nis \nequivalent to B \n= B / A \ncompound \nmodulo \n%= \nModulus AND assignment operator. It takes \nmodulus using two operands and assign the \nresult to left operand \nB %= A is \nequivalent to B \n= B % A \ncompound \nbitwise or \n|= \nbitwise inclusive OR and assignment \noperator \nA |= 2 is same \nas A = A | 2 \ncompound \nbitwise and \n&= \nBitwise AND assignment operator \nA &= 2 is same \nas A = A & 2 \n \nArduino IDE \nThe Arduino IDE is very simple and easy to use. \nLet’s see how to use it with the help of Blink example that comes in the Built-In examples \nwith the IDE. \n1.  Open the Arduino IDE from the folder you installed/unzipped it in. \n",
        "images": []
    },
    "145": {
        "text": "lOMoAR cPSD|26885763 \n \n145 | P a g e  \n \n2.  In the File tab, go to the Examples option. Here you will find a list of all the Built-In \nexamples that come along with the IDE. You will also see Examples For Any Board in below \nthe Built-In examples. \nHere, we will see the Blink example which blinks the LED on the Arduino board.  \n \n \n  \n3.  Once you click on Blink, a new window will open with the sketch (Arduino refers to \ncodes written in its IDE as sketch) for Blink. \n \n4.  Before burning this code into the Arduino board, we need to configure the IDE for the \nboard we need to burn this sketch into. We also need to select the appropriate communication \nport and the method used for burning the code. \n \n5.  Go to the Tools tab and find the Board option in it. It will have a list of all the Arduino \nBoards in it. Select the board you are using from that list. Here, we have used \nArduino/Genuino Uno Board. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_145_img_1.png"
        ]
    },
    "146": {
        "text": "lOMoAR cPSD|26885763 \n \n146 | P a g e  \n \n \nArduino and Genuino are one and the same thing. Outside the USA, the Arduino boards are \ncalled Genuino. \n \n6. Now we need to select the appropriate communication port over which the \ncomputer/laptop will communicate with the Arduino board. Under the Tools tab, you will \nfind the Port option. Select the port you have connected the Arduino board to from the Ports \navailable in this list. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_146_img_1.png"
        ]
    },
    "147": {
        "text": "lOMoAR cPSD|26885763 \n \n147 | P a g e  \n \n \n7.  Now that we have selected the board and the communication port, we need to select the \nappropriate programmer. \nWe will be using the AVR ISP mk2 programmer. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_147_img_1.png"
        ]
    },
    "148": {
        "text": "lOMoAR cPSD|26885763 \n \n148 | P a g e  \n \n \n8.  On the Arduino IDE, you will find 6 unique buttons. These are described below. \n• \n \n This is used to verify (Arduino refers to compiling as verifying) the sketch. \n• \n \n This is used to upload (Arduino refers burning a program as uploading) the \nsketch onto the board. \n• \n \n This is used to create a new sketch. \n• \n \n This is used to open an existing sketch or built-in example. \n• \n \n This is used to save the current sketch. \n• \n \n This is used to open the serial monitor that comes with the Arduino IDE. \nNote : You can use any other serial terminal program if you want instead of the Arduino \nserial monitor. The serial monitor that comes with Arduino IDE can open only one serial port \nfor communication. If you need to observe multiple ports (multiple Arduino boards \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_148_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_148_img_2.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_148_img_3.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_148_img_4.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_148_img_5.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_148_img_6.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_148_img_7.png"
        ]
    },
    "149": {
        "text": "lOMoAR cPSD|26885763 \n \n149 | P a g e  \n \nconnected to the same computer/laptop), you need to use other programs like Putty, \nRealTerm, TeraTerm, etc. \n9. Now that we have selected the appropriate board, communication port, and the \nprogrammer, we need to upload the Blink sketch on to the board. \nWe can either verify the sketch before the upload process or skip the verification process. \nThe IDE does the part of verifying the sketch before uploading as a part of the upload \nprocess. \n10. Since this is a built-in example sketch, we will not get any warnings or errors upon \nverifying. If there are any warnings or errors, they are displayed by the IDE in the black \ncoloured area below the area for writing code. This area is shown in the image in the next \npoint, highlighted in red. \n11.  Now upload the sketch onto the board. When the upload process is done, you will get a \ndone uploading message. You should be able to see the LED on your Arduino board blinking \nat 1 second intervals. \n \n  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_149_img_1.png"
        ]
    },
    "150": {
        "text": "lOMoAR cPSD|26885763 \n \n150 | P a g e  \n \n \n12.  This process needs to be followed for all the sketches that are built-in or created by the \nuser.  \nUnderstanding how the Arduino IDE sets up its file directory system can spare you some \nconfusion when it comes to saving, organizing and opening your Arduino sketches (or \nsketches you have downloaded from the internet). \n \nThis week’s episode covers the following: \n1. The Arduino Sketchbook folder \n2. How to change the default location where your Arduino sketches get saved \n3. What happens when an Arduino file does not have an enclosing sketch folder of \nthe same name \n4. Where and how multiple tabs get saved in an Arduino sketch \n5. Why the pancreas of a woodchuck is better suited than our own \n \nThe Arduino Sketchbook Folder And Changing The Default Save Location \nThe default location where Arduino sketches you write will be saved is called the \nSketchbook. \nThe Sketchbook is simply a folder on your computer like any other. It acts as a handy \nrepository for sketches and is also where add-on code libraries get saved. \n \nYou can see the sketches in the Sketchbook folder by going to File > Sketchbook. \n \nThe default name of the Sketchbook folder is “Arduino” and the default location of the \nSketchbook folder is in the “My Documents” folder (or just “Documents” for Mac users). \nIf your Sketchbook does not appear to be in this default location, you can see exactly where \nit is by opening the Arduino IDE and going to Arduino > Preferences. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_150_img_1.jpeg"
        ]
    },
    "151": {
        "text": "lOMoAR cPSD|26885763 \n \n151 | P a g e  \n \n \nThe default file path for your sketches is listed at the top of Arduino Preferences window. \nMine is: \n/Users/michaelJames/Documents/Arduino \nWhen I save a file in the Arduino IDE, this “Arduino” folder is the default location where the \nsketch will be saved, unless I choose to change that location by selecting a different folder on \nmy computer’s directory. \n \nIf you want to change this default location, you click the Browse button next to the file \ndirectory path and choose a different place. Pretty simple. \n \n3.8. Arduino Sketches \nA sketch is the name that Arduino uses for a program. It's the unit of code that is \nuploaded to and run on an Arduino board. \n \nThe first few lines of the Blink sketch are a comment: \n/* \n * Blink \n * \n * The basic Arduino example.  Turns on an LED on for one second, \n * then off for one second, and so on...  We use pin 13 because, \n * depending on your Arduino board, it has either a built-in LED \n * or a built-in resistor so that you need only an LED. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_151_img_1.jpeg"
        ]
    },
    "152": {
        "text": "lOMoAR cPSD|26885763 \n \n152 | P a g e  \n \n  */ \n \nEverything between the  \n/* \n and  \n*/ \n is ignored by the Arduino when it runs the sketch (the  \n* \n at the start of each line is only there to make the comment look pretty, and isn't required). It's \nthere for people reading the code: to explain what the program does, how it works, or why \nit's written the way it is. It's a good practice to comment your sketches, and to keep the \ncomments up-to-date when you modify the code. This helps other people to learn from or \nmodify your code. \n \nThere's another style for short, single-line comments. These start with  \n// \n and continue to the end of the line. For example, in the line: \n \n1int ledPin = 13;                // LED connected to digital pin 13 the message \"LED connected \nto digital pin 13\" is a comment. \n \nVariables \nA variable is a place for storing a piece of data. It has a name, a type, and a value. For \nexample, the line from the Blink sketch above declares a variable with the name ledPin, the \ntype int, and an initial value of 13. It's being used to indicate which Arduino pin the LED is \nconnected to. Every time the name ledPin appears in the code, its value will be retrieved. In \nthis case, the person writing the program could have chosen not to bother creating \nthe ledPin variable and instead have simply written 13 everywhere they needed to specify a \npin number. The advantage of using a variable is that it's easier to move the LED to a \ndifferent pin: you only need to edit the one line that assigns the initial value to the variable. \nOften, however, the value of a variable will change while the sketch runs. For example, \nyou could store the value read from an input into a variable.  \n \nFunctions \nA function (otherwise known as a procedure or sub-routine) is a named piece of code that \ncan be used from elsewhere in a sketch. For example, here's the definition of the  \nsetup() \n \nfunction from the Blink example: \nvoid setup() \n",
        "images": []
    },
    "153": {
        "text": "lOMoAR cPSD|26885763 \n \n153 | P a g e  \n \n{ \n pinMode(ledPin, OUTPUT);      // sets the digital pin as output \n} \nThe first line provides information about the function, like its name, \"setup\". The text \nbefore and after the name specify its return type and parameters: these will be explained \nlater. The code between the { and } is called the body of the function: what the function \ndoes. \n \nYou can call a function that's already been defined (either in your sketch or as part of \nthe Arduino \nlanguage). \nFor \nexample, \nthe \nline pinMode(ledPin, \nOUTPUT); calls \nthe pinMode()  function, passing it two parameters: ledPin and OUTPUT. These parameters \nare used by the  \npinMode() function to decide which pin and mode to set. \n \npinMode(), digitalWrite(), and delay() \nThe pinMode() function configures a pin as either an input or an output. To use it, \nyou pass it the number of the pin to configure and the constant INPUT or OUTPUT. When \nconfigured as an input, a pin can detect the state of a sensor like a pushbutton. As an output, \nit can drive an actuator like an LED. \n \nThe digitalWrite() \n functions outputs a value on a pin. For example, the line: \n \ndigitalWrite(ledPin, HIGH); \nset the ledPin (pin 13) to HIGH, or 5 volts. Writing a LOW to pin connects it to ground, or 0 \nvolts. \n \nThe delay() causes the Arduino to wait for the specified number of milliseconds before \ncontinuing on to the next line. There are 1000 milliseconds in a second, so the line: \ndelay(1000); \ncreates a delay of one second. \n \nsetup() and loop() \nThere are two special functions that are a part of every Arduino sketch:  \nsetup() and loop(). The setup() is called once, when the sketch starts. It's a good place to do \nsetup tasks like setting pin modes or initializing libraries. The loop() function is called over \nand over and is heart of most sketches. You need to include both functions in your sketch, \neven if you don't need them for anything. \n \n \n",
        "images": []
    },
    "154": {
        "text": "lOMoAR cPSD|26885763 \n \n154 | P a g e  \n \n3.8. Arduino Sketches using software \nIf you go into your file directory system and open up the Sketchbook folder (again, named \n“Arduino” by default), you may see a bunch of folders that you didn’t make. This is because \nevery Arduino file must be inside a folder that has the same name as the file (there are some \nexceptions to this that we’ll talk about in a moment). \n \nLet me say that one more time because it is really important to understand. Every Arduino \nfile must be inside a folder that has the same name as the file When I write a new sketch and \nsave it, the Arduino IDE automatically creates a new folder that has the exact same name as \nthe sketch itself. The Arduino file (which has the extension .ino) is placed inside this \nenclosing folder, which is called a sketch folder. \n \n \n \nIf you go into the Sketchbook folder and change the name of the enclosing folder, it will \ncreate some issues. The first issue is that when you go to File > Sketchbook, the sketch will \nno longer show up! If you want to open this sketch you need to go to the .ino file in your \ndirectory and open it from there. \n \nIf you open a .ino file that is not inside an enclosing sketch folder of the exact same name, \nthen you will get a pop-up from the Arduino IDE that says: \n \n“The file “sketch_name.ino” needs to be inside a sketch folder named “sketch_name”. Create \nthis folder, move the file, and continue?” \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_154_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_154_img_2.jpeg"
        ]
    },
    "155": {
        "text": "lOMoAR cPSD|26885763 \n \n155 | P a g e  \n \nIf you choose Cancel, the sketch will not open. If you choose OK, then a folder gets created \n(it will have the same name as the sketch) and the .ino file is placed inside it. \n \nThis sketch folder will be created in whatever directory the .ino file was that you tried to \nopen. For example, if you tried to open a .ino file that was in your My Downloads folder, \nthen the enclosing sketch folder also will be created inside the My Downloads folder. \n \nSaving Tabs In Arduino \nThe exception to the rule about the sketch folder having the same name as the .ino file is \nwhen you create multiple tabs in an Arduino sketch. \nThe additional tabs do NOT need to bear the same name as the enclosing sketch folder. \n \n \n \nOnce you get a handle on some of these intricacies of the Arduino IDE file system, it can \nreally help to clear things up. \nArduino Shields \n \n3.9. Arduino Pins \nAn Introduction to Arduino Uno Pinout \nArduino Uno is based on the ATmega328 by Atmel. The Arduino Uno pinout consists of 14 \ndigital pins, 6 analog inputs, a power jack, USB connection and ICSP header. The versatility \nof the pinout provides many different options such as driving motors, LEDs, reading sensors \nand more. In this post, we’ll go over the capabilities of the Arduino Uno pinout. \n \nArduino Uno pinout - Power Supply \nThere are 3 ways to power the Arduino Uno: \n• \nBarrel Jack - The Barrel jack, or DC Power Jack can be used to power your Arduino \nboard. The barrel jack is usually connected to a wall adapter. The board can be \npowered by 5-20 volts but the manufacturer recommends to keep it between 7-12 \nvolts. Above 12 volts, the regulators might overheat, and below 7 volts, might not \nsuffice. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_155_img_1.jpeg"
        ]
    },
    "156": {
        "text": "lOMoAR cPSD|26885763 \n \n156 | P a g e  \n \n \nArduino Uno Pinout – Diagram \n• \nVIN Pin - This pin is used to power the Arduino Uno board using an external power \nsource. The voltage should be within the range mentioned above. \n• \nUSB cable  - when connected to the computer, provides 5 volts at 500mA. \n \nThere is a polarity protection diode connecting between the positive of the barrel jack to the \nVIN pin, rated at 1 Ampere. \n \nThe power source you use determines the power you have available for your circuit. For \ninstance, powering the circuit using the USB limits you to 500mA. Take into consideration \nthat this is also used for powering the MCU, its peripherals, the on-board regulators, and the \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_156_img_1.jpeg"
        ]
    },
    "157": {
        "text": "lOMoAR cPSD|26885763 \n \n157 | P a g e  \n \ncomponents connected to it. When powering your circuit through the barrel jack or VIN, the \nmaximum capacity available is determined by the 5 and 3.3 volts regulators on-board the \nArduino. \n• \n5v and 3v3 \nThey provide regulated 5 and 3.3v to power external components according to manufacturer \nspecifications. \n \nArduino Uno Pinout - Analog IN \nThe Arduino Uno has 6 analog pins, which utilize ADC (Analog to Digital converter). \nThese pins serve as analog inputs but can also function as digital inputs or digital outputs. \n \n• \nGND \nIn the Arduino Uno pinout, you can find 5 GND pins, which are all interconnected. \nThe GND pins are used to close the electrical circuit and provide a common logic reference \nlevel throughout your circuit. Always make sure that all GNDs (of the Arduino, peripherals \nand components) are connected to one another and have a common ground. \n \n• \nRESET - resets the Arduino \n• \nIOREF -  This pin is the input/output reference. It provides the voltage reference \nwith which the microcontroller operates. \n \nAnalog to Digital Conversion \nADC stands for Analog to Digital Converter. ADC is an electronic circuit used to convert \nanalog signals into digital signals. This digital representation of analog signals allows the \nprocessor (which is a digital device) to measure the analog signal and use it through its \noperation. \nArduino Pins A0-A5 are capable of reading analog voltages. On Arduino the ADC has 10-bit \nresolution, meaning it can represent analog voltage by 1,024 digital levels. The ADC \nconverts voltage into bits which the microprocessor can understand. \nOne common example of an ADC is Voice over IP (VoIP). Every smartphone has a \nmicrophone that converts sound waves (voice) into analog voltage. This goes through the \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_157_img_1.jpeg"
        ]
    },
    "158": {
        "text": "lOMoAR cPSD|26885763 \n \n158 | P a g e  \n \ndevice’s ADC, gets converted into digital data, which is transmitted to the receiving side \nover the internet. \n \nArduino Uno Pinout - Digital Pins \n• Pins 0-13 of the Arduino Uno serve as digital input/output pins. \n• Pin 13 of the Arduino Uno is connected to the built-in LED. \n \nIn the Arduino Uno - pins 3,5,6,9,10,11 have PWM capability. \n \nIt’s important to note that: \n●      Each pin can provide/sink up to 40 mA max. But the recommended current is 20 mA. \n●      The absolute max current provided (or sank) from all pins together is 200mA \n \nWhat does digital mean? \nDigital is a way of representing voltage in 1 bit: either 0 or 1. Digital pins on the Arduino are \npins designed to be configured as inputs or outputs according to the needs of the user. Digital \npins are either on or off. When ON they are in a HIGH voltage state of 5V and when OFF \nthey are in a LOW voltage state of 0V. \n \nOn the Arduino, When the digital pins are configured as output, they are set to 0 or 5 volts. \nWhen the digital pins are configured as input, the voltage is supplied from an external \ndevice. This voltage can vary between 0-5 volts which is converted into digital representation \n(0 or 1). To determine this, there are 2 thresholds: \n \n●      Below 0.8v - considered as 0. \n●      Above 2v - considered as 1. \n \nWhen connecting a component to a digital pin, make sure that the logic levels match. If the \nvoltage is in between the thresholds, the returning value will be undefined. \n \nWhat is PWM? \nIn general, Pulse Width Modulation (PWM) is a modulation technique used to encode \na message into \na pulsing \nsignal. \nA \nPWM \nis \ncomprised \nof \ntwo \nkey \ncomponents:  frequency and duty cycle. The PWM frequency dictates how long it takes to \ncomplete a single cycle (period) and how quickly the signal fluctuates from high to low. The \nduty cycle determines how long a signal stays high out of the total period. Duty cycle is \nrepresented in percentage. \n \nIn Arduino, the PWM enabled pins produce a constant frequency of ~ 500Hz, while the duty \ncycle changes according to the parameters set by the user. See the following illustration: \n",
        "images": []
    },
    "159": {
        "text": "lOMoAR cPSD|26885763 \n \n159 | P a g e  \n \n \n \n \n \nPWM signals are used for speed control of DC motors, dimming LEDs and more. \n \nCommunication Protocols \nSerial (TTL) - Digital pins 0 and 1 are the serial pins of the Arduino Uno. \nThey are used by the onboard USB module. \n \nWhat is Serial Communication? \nSerial communication is used to exchange data between the Arduino board and another serial \ndevice such as computers, displays, sensors and more. Each Arduino board has at least one \nserial port. Serial communication occurs on digital pins 0 (RX) and 1 (TX) as well as via \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_159_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_159_img_2.png"
        ]
    },
    "160": {
        "text": "lOMoAR cPSD|26885763 \n \n160 | P a g e  \n \nUSB. Arduino supports serial communication through digital pins with the SoftwareSerial \nLibrary as well. This allows the user to connect multiple serial-enabled devices and leave the \nmain serial port available for the USB. \n \nSoftware serial and hardware serial - Most microcontrollers have hardware designed to \ncommunicate with other serial devices. Software serial ports use a pin-change interrupt \nsystem to communicate. There is a built-in library for Software Serial communication. \nSoftware serial is used by the processor to simulate extra serial ports. The only drawback \nwith software serial is that it requires more processing and cannot support the same high \nspeeds as hardware serial. \n \nSPI - SS/SCK/MISO/MOSI pins are the dedicated pins for SPI communication. They can be \nfound on digital pins 10-13 of the Arduino Uno and on the ICSP headers. \n \nWhat is SPI? \nSerial Peripheral Interface (SPI) is a serial data protocol used by microcontrollers to \ncommunicate with one or more external devices in a bus like connection. The SPI can also be \nused to connect 2 microcontrollers. On the SPI bus, there is always one device that is denoted \nas a Master device and all the rest as Slaves. In most cases, the microcontroller is the Master \ndevice. The SS (Slave Select) pin determines which device the Master is currently \ncommunicating with. \nSPI enabled devices always have the following pins: \n• \nMISO (Master In Slave Out) - A line for sending data to the Master device \n• \nMOSI (Master Out Slave In) - The Master line for sending data to peripheral devices \n• \nSCK (Serial Clock) - A clock signal generated by the Master device to synchronize \ndata transmission. \n \nI2C - SCL/SDA pins are the dedicated pins for I2C communication. On the Arduino Uno \nthey are found on Analog pins A4 and A5. \n \nWhat is I2C? \nI2C is a communication protocol commonly referred to as the “I2C bus”. The I2C protocol \nwas designed to enable communication between components on a single circuit board. With \nI2C there are 2 wires referred to as SCL and SDA. \n• \nSCL is the clock line which is designed to synchronize data transfers. \n• \nSDA is the line used to transmit data. \nEach device on the I2C bus has a unique address, up to 255 devices can be connected on the \nsame bus. \n \nAref - Reference voltage for the analog inputs. \n",
        "images": []
    },
    "161": {
        "text": "lOMoAR cPSD|26885763 \n \n161 | P a g e  \n \n \nInterrupt - INT0 and INT1. Arduino Uno has two external interrupt pins. \n \nExternal Interrupt - An external interrupt is a system interrupt that occurs when outside \ninterference is present. Interference can come from the user or other hardware devices in the \nnetwork. Common uses for these interrupts in Arduino are reading the frequency a square \nwave generated by encoders or waking up the processor upon an external event. \nArduino has two forms of interrupt: \n• \nExternal \n• \nPin Change \nThere are two external interrupt pins on the ATmega168/328 called INT0 and INT1. both \nINT0 and INT1 are mapped to pins 2 and 3. In contrast, Pin Change interrupts can be \nactivated on any of the pins. \n \nArduino Uno Pinout - ICSP Header \nICSP stands for In-Circuit Serial Programming. The name originated from In-System \nProgramming headers (ISP). Manufacturers like Atmel who work with Arduino have \ndeveloped their own in-circuit serial programming headers. These pins enable the user to \nprogram the Arduino boards’ firmware. There are six ICSP pins available on the Arduino \nboard that can be hooked to a programmer device via a programming cable. \n \n3.10. Input/output  pins on  the Arduino \n \nOutput pins \nAn output pin provides VDD  or 0 V, by making  a connection  to VDD  or ground  via a \ntransistor. You set its state  to HIGH (for VDD ) or LOW (for 0 V) using the digitalWrite() \nfunction.  A (simplified) schematic  of an output pin is shown below.  You might notice that \nit looks a bit like a CMOS inverter  (or rather, two). \n \n \n \n \n \n \n \n \n \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_161_img_1.jpeg"
        ]
    },
    "162": {
        "text": "lOMoAR cPSD|26885763 \n \n162 | P a g e  \n \nThe transistors in the output pin have non-negligible on resistance,  so aren’t  suitable  for \ndriving large loads. When talking about  this resistance  in relation  to an output pin, we call \nit the output resistance of the pin—in other  words, the  resistance  “seen”  by a device \nconnected  to the  pin. Since this  resistance  might depend  on the state  of the pin (HIGH or \nLOW), it actually  has two output resistances.  You’ll measure  both  in prelab  2b. \n \nInput pins \nAn input pin reads the voltage on the pin as if it were a voltmeter, and returns either  HIGH \n(1) in software if the voltage is close to VDD , or LOW (0) if it is close to 0 V. An input  pin \ncan be read using the digitalRead()  function. \n \nThe  value returned by digitalRead() is unpredictable (i.e.,  could be either  HIGH or LOW) \nwhen the  input voltage  is not  close to either  VDD   or 0 V.  The  precise meaning  of \n“close” varies  between  microcontrollers, but  for the Adafruit Metro Mini1  in our circuit,  \nthe input  pin voltage needs to be at least 0.6VDD  to qualify as HIGH, and at most 0.3VDD  \nto qualify as LOW. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nArduino - I/O Functions \nThe pins on the Arduino board can be configured as either inputs or outputs. We will \nexplain the functioning of the pins in those modes. It is important to note that a majority of \nArduino analog pins, may be configured, and used, in exactly the same manner as digital \npins. \nPins Configured as INPUT \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_162_img_1.jpeg"
        ]
    },
    "163": {
        "text": "lOMoAR cPSD|26885763 \n \n163 | P a g e  \n \nArduino pins are by default configured as inputs, so they do not need to be explicitly \ndeclared as inputs with pinMode() when you are using them as inputs. Pins configured this \nway are said to be in a high-impedance state. Input pins make extremely small demands on \nthe circuit that they are sampling, equivalent to a series resistor of 100 megaohm in front of \nthe pin. \nThis means that it takes very little current to switch the input pin from one state to another. \nThis makes the pins useful for such tasks as implementing a capacitive touch sensor or \nreading an LED as a photodiode. \nPins configured as pinMode(pin, INPUT) with nothing connected to them, or with wires \nconnected to them that are not connected to other circuits, report seemingly random changes \nin pin state, picking up electrical noise from the environment, or capacitively coupling the \nstate of a nearby pin. \nPull-up Resistors \nPull-up resistors are often useful to steer an input pin to a known state if no input is present. \nThis can be done by adding a pull-up resistor (to +5V), or a pull-down resistor (resistor to \nground) on the input. A 10K resistor is a good value for a pull-up or pull-down resistor. \nUsing Built-in Pull-up Resistor with Pins Configured as Input \nThere are 20,000 pull-up resistors built into the Atmega chip that can be accessed from \nsoftware. These built-in pull-up resistors are accessed by setting the pinMode() as \nINPUT_PULLUP. This effectively inverts the behavior of the INPUT mode, where HIGH \nmeans the sensor is OFF and LOW means the sensor is ON. The value of this pull-up \ndepends on the microcontroller used. On most AVR-based boards, the value is guaranteed to \nbe between 20kΩ and 50kΩ. On the Arduino Due, it is between 50kΩ and 150kΩ. For the \nexact value, consult the datasheet of the microcontroller on your board. \nWhen connecting a sensor to a pin configured with INPUT_PULLUP, the other end should \nbe connected to the ground. In case of a simple switch, this causes the pin to read HIGH \nwhen the switch is open and LOW when the switch is pressed. The pull-up resistors provide \nenough current to light an LED dimly connected to a pin configured as an input. If LEDs in a \nproject seem to be working, but very dimly, this is likely what is going on. \nSame registers (internal chip memory locations) that control whether a pin is HIGH or LOW \ncontrol the pull-up resistors. Consequently, a pin that is configured to have pull-up resistors \nturned on when the pin is in INPUTmode, will have the pin configured as HIGH if the pin is \nthen switched to an OUTPUT mode with pinMode(). This works in the other direction as \n",
        "images": []
    },
    "164": {
        "text": "lOMoAR cPSD|26885763 \n \n164 | P a g e  \n \nwell, and an output pin that is left in a HIGH state will have the pull-up resistor set if \nswitched to an input with pinMode(). \nExample \npinMode(3,INPUT) ; // set pin to input without using built in pull up resistor \npinMode(5,INPUT_PULLUP) ; // set pin to input using built in pull up resistor \nPins Configured as OUTPUT \nPins configured as OUTPUT with pinMode() are said to be in a low-impedance state. This \nmeans that they can provide a substantial amount of current to other circuits. Atmega pins \ncan source (provide positive current) or sink (provide negative current) up to 40 mA \n(milliamps) of current to other devices/circuits. This is enough current to brightly light up an \nLED (do not forget the series resistor), or run many sensors but not enough current to run \nrelays, solenoids, or motors. \nAttempting to run high current devices from the output pins, can damage or destroy the \noutput transistors in the pin, or damage the entire Atmega chip. Often, this results in a \"dead\" \npin in the microcontroller but the remaining chips still function adequately. For this reason, it \nis a good idea to connect the OUTPUT pins to other devices through 470Ω or 1k resistors, \nunless maximum current drawn from the pins is required for a particular application. \npinMode() Function \nThe pinMode() function is used to configure a specific pin to behave either as an input or an \noutput. It is possible to enable the internal pull-up resistors with the mode INPUT_PULLUP. \nAdditionally, the INPUT mode explicitly disables the internal pull-ups. \npinMode() Function Syntax \nVoid setup ()  \n{ \n   pinMode (pin , mode); \n} \n• \npin − the number of the pin whose mode you wish to set \n• \nmode − INPUT, OUTPUT, or INPUT_PULLUP. \nExample \nint button = 5 ; // button connected to pin 5 \nint LED = 6; // LED connected to pin 6 \n",
        "images": []
    },
    "165": {
        "text": "lOMoAR cPSD|26885763 \n \n165 | P a g e  \n \n \nvoid setup () { \n   pinMode(button , INPUT_PULLUP);  \n   // set the digital pin as input with pull-up resistor \n   pinMode(button , OUTPUT); // set the digital pin as output \n} \n \nvoid setup () { \n   If (digitalRead(button ) == LOW) // if button pressed { \n      digitalWrite(LED,HIGH); // turn on led \n      delay(500); // delay for 500 ms \n      digitalWrite(LED,LOW); // turn off led \n      delay(500); // delay for 500 ms \n   } \n} \ndigitalWrite() Function \nThe digitalWrite() function is used to write a HIGH or a LOW value to a digital pin. If the \npin has been configured as an OUTPUT with pinMode(), its voltage will be set to the \ncorresponding value: 5V (or 3.3V on 3.3V boards) for HIGH, 0V (ground) for LOW. If the \npin is configured as an INPUT, digitalWrite() will enable (HIGH) or disable (LOW) the \ninternal pullup on the input pin. It is recommended to set the pinMode() to INPUT_PULLUP \nto enable the internal pull-up resistor. \nIf you do not set the pinMode() to OUTPUT, and connect an LED to a pin, when calling \ndigitalWrite(HIGH), the LED may appear dim. Without explicitly setting pinMode(), \ndigitalWrite() will have enabled the internal pull-up resistor, which acts like a large current-\nlimiting resistor. \ndigitalWrite() Function Syntax \nVoid loop()  \n{ \n   digitalWrite (pin ,value); \n} \n• \npin − the number of the pin whose mode you wish to set \n• \nvalue − HIGH, or LOW. \nExample \n",
        "images": []
    },
    "166": {
        "text": "lOMoAR cPSD|26885763 \n \n166 | P a g e  \n \nint LED = 6; // LED connected to pin 6 \n \nvoid setup ()  \n{ \n   pinMode(LED, OUTPUT); // set the digital pin as output \n} \nvoid setup ()  \n{  \n   digitalWrite(LED,HIGH); // turn on led \n   delay(500); // delay for 500 ms \n   digitalWrite(LED,LOW); // turn off led \n   delay(500); // delay for 500 ms \n} \nanalogRead( ) function \nArduino is able to detect whether there is a voltage applied to one of its pins and report it \nthrough the digitalRead() function. There is a difference between an on/off sensor (which \ndetects the presence of an object) and an analog sensor, whose value continuously changes. \nIn order to read this type of sensor, we need a different type of pin. \nIn the lower-right part of the Arduino board, you will see six pins marked “Analog In”. \nThese special pins not only tell whether there is a voltage applied to them, but also its value. \nBy using the analogRead() function, we can read the voltage applied to one of the pins. \nThis function returns a number between 0 and 1023, which represents voltages between 0 \nand 5 volts. For example, if there is a voltage of 2.5 V applied to pin number 0, \nanalogRead(0) returns 512. \nanalogRead() function Syntax \nanalogRead(pin); \n• \npin − the number of the analog input pin to read from (0 to 5 on most boards, 0 to 7 \non the Mini and Nano, 0 to 15 on the Mega) \nExample \nint analogPin = 3;//potentiometer wiper (middle terminal)  \n   // connected to analog pin 3  \nint val = 0; // variable to store the value read \n \n",
        "images": []
    },
    "167": {
        "text": "lOMoAR cPSD|26885763 \n \n167 | P a g e  \n \nvoid setup()  \n{ \n   Serial.begin(9600); // setup serial \n}  \nvoid loop()  \n{ \n   val = analogRead(analogPin); // read the input pin \n   Serial.println(val); // debug value \n} \n \n3.11. Arduino Shields \nArduino shields are the boards, which are plugged over the Arduino board to expand its \nfunctionalities. There are different varieties of shields used for various tasks, such as Arduino \nmotor shields, Arduino communication shields, etc. \n \nShield is defined as the hardware device that can be mounted over the board to increase the \ncapabilities of the projects. It also makes our work easy. For example, Ethernet shields are \nused to connect the Arduino board to the Internet. \n \nThe pin position of the shields is similar to the Arduino boards. We can also connect the \nmodules and sensors to the shields with the help of the connection cable. \n \nArduino motor shields help us to control the motors with the Arduino board. \n \nWhy do we need Shields? \nThe advantages of using Arduino shields are listed below: \no It adds new functionalities to the Arduino projects. \no The shields can be attached and detached easily from the Arduino board. It does not \nrequire any complex wiring. \no It is easy to connect the shields by mounting them over the Arduino board. \no The hardware components on the shields can be easily implemented. \n \nTypes of Shields \nThe popular Arduino shields are listed below: \no Ethernet shield \no Xbee Shield \no Proto shield \no Relay shield \no Motor shield \no LCD shield \n",
        "images": []
    },
    "168": {
        "text": "lOMoAR cPSD|26885763 \n \n168 | P a g e  \n \no Bluetooth shield \no Capacitive Touchpad Shield \n \nLet's discuss the shields that are listed above: \nEthernet shield \no The Ethernet shields are used to connect the Arduino board to the Internet. We need \nto mount the shield on the top of the specified Arduino board. \no The USB port will play the usual role to upload sketches on the board. \no The latest version of Ethernet shields consists of a micro SD card slot. The micro SD \ncard slot can be interfaced with the help of the SD card library. \no  \nThe Ethernet shield is shown below: \n \no We can also connect another shield on the top of the Ethernet shield. It means that we \ncan also mount two shields on the top of the Arduino board. \n \nXbee Shield \no We can communicate wirelessly with the Arduino board by using the Xbee Shield \nwith Zigbee. \no It reduces the hassle of the cable, which makes Xbee a wireless communication \nmodel. \no The Xbee wireless module allows us to communicate outdoor upto 300 feet and \nindoor upto 100 feet. \no The Xbee shield is shown below: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_168_img_1.jpeg"
        ]
    },
    "169": {
        "text": "lOMoAR cPSD|26885763 \n \n169 | P a g e  \n \n \no It can also be used with different models of Xbee. \n \nProto shield \no Proto shields are designed for custom circuits. \no We can solder electronic circuits directly on the shield. \no The shield consists of two LED pads, two power lines, and SPI signal pads. \no The IOREF (Input Output voltage REFerence) and GND (Ground) are the two power \nlines on the board. \nThe proto shield is shown below: \n \no We can also solder the SMD (Surface Mount Device) ICs on the prototyping area. A \nmaximum of 24 pins can be integrated onto the SMD area. \n \nRelay shield \no The Arduino digital I/O pins cannot bear the high current due to its voltage and \ncurrent limits. The relay shield is used to overcome such situation. It provides a \nsolution for controlling the devices carrying high current and voltage. \no The shield consists of four relays and four LED indicators. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_169_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_169_img_2.jpeg"
        ]
    },
    "170": {
        "text": "lOMoAR cPSD|26885763 \n \n170 | P a g e  \n \no It also provides NO/NC interfaces and a shield form factor for the simple connection \nto the Arduino board. \no The LED indicators depicts the ON/OFF condition of each relay. \no The relay used in the structure is of high quality. \no The NO (Normally Open), NC (Normally Closed), and COM pins are present on each \nrelay. \no The relay shield is shown below: \n \no The applications of the Relay shield include remote control, etc. \n \nMotor shield \no The motor shield helps us to control the motor using the Arduino board. \no It controls the direction and working speed of the motor. We can power the motor \nshield either by the external power supply through the input terminal or directly by \nthe Arduino. \no We can also measure the absorption current of each motor with the help of the motor \nshield. \no The motor shield is based on the L298 chip that can drive a step motor or two DC \nmotors. L298 chip is a full bridge IC. It also consists of the heat sinker, which \nincreases the performance of the motor shield. \no It can drive inductive loads, such as solenoids, etc. \no The operating voltage is from 5V to 12V. \n \nThe Motor shield is shown below: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_170_img_1.jpeg"
        ]
    },
    "171": {
        "text": "lOMoAR cPSD|26885763 \n \n171 | P a g e  \n \n \no The applications of the motor shield are intelligent vehicles, micro-robots, etc. \n \nLCD shield \no The keypad of LCD (Liquid Crystal Display) shield includes five buttons called as \nup, down, left, right, and select. \no There are 6 push buttons present on the shield that can be used as a custom menu \ncontrol panel. \no It consists of the 1602 white characters, which are displayed on the blue backlight \nLCD. \no The LED present on the board indicates the power ON. \no The five keys present on the board helps us to make the selection on menus and from \nboard to our project. \no  \nThe LCD shield is shown below: \n \no The LCD shield is popularly designed for the classic boards such as Duemilanove, \nUNO, etc. \n \nBluetooth shield \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_171_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_171_img_2.jpeg"
        ]
    },
    "172": {
        "text": "lOMoAR cPSD|26885763 \n \n172 | P a g e  \n \no The Bluetooth shield can be used as a wireless module for transparent serial \ncommunication. \no It includes a serial Bluetooth module. D0 and D1 are the serial hardware ports in the \nBluetooth shield, which can be used to communicate with the two serial ports (from \nD0 to D7) of the Arduino board. \no We can install Groves through the two serial ports of the Bluetooth shield called a \nGrove connector. One Grove connector is digital, while the other is analog. \n \nThe Bluetooth shield is shown below: \n \no The communication distance of the Bluetooth shield is upto 10m at home without any \nobstacle in between. \n \nCapacitive Touchpad shield \no It has a touchpad interface that allows to integrate the Arduino board with the touch \nshield. \no The Capacitive touchpad shield consists of 12 sensitive touch buttons, which includes \n3 electrode connections and 9 capacitive touch pads. \no The capacitive shield is shown below: \n \no The board can work with the logic level of 3.3V or 5V. \no We can establish a connection to the Arduino project by touching the shield.  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_172_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_172_img_2.jpeg"
        ]
    },
    "173": {
        "text": "lOMoAR cPSD|26885763 \n \n173 | P a g e  \n \n3.12. Integration of Sensors and Actuators with Arduino \n \nSensors and Actuators in IoT | Enabling Industrial Automation \n \nThe Internet of Things is a major contributing factor of the new Data Economy. The value of \nan IoT system goes beyond the original intended use case, for instance in automation. This is \nbecause further value lies in the intelligence that an IoT system creates. Sensors are the \nsource of IoT data. Furthermore, sensors and actuators in IoT can work together to enable \nautomation at industrial scale. Finally, analysis of the data that these sensors and actuators \nproduce can provide valuable business insights over time. \n \nDriven by new innovations in materials and nanotechnology, sensor technology is \ndeveloping at a never before seen pace, with a result of increased accuracy, decreased size \nand cost, and the ability to measure or detect things that weren’t previously possible. In fact, \nsensing technology is developing so rapidly and becoming so advanced that we will see a \ntrillion new sensors deployed annually within a few years. \n \nSensors \nA better term for a sensor is a transducer. A transducer is any physical device that converts \none form of energy into another. So, in the case of a sensor, the transducer converts some \nphysical phenomenon into an electrical impulse that determines the reading. A microphone is \na sensor that takes vibrational energy (sound waves), and converts it to electrical energy in a \nuseful way for other components in the system to correlate back to the original sound. \n \nActuators \nAnother type of transducer that you will encounter in many IoT systems is an actuator. In \nsimple terms, an actuator operates in the reverse direction of a sensor. It takes an electrical \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_173_img_1.jpeg"
        ]
    },
    "174": {
        "text": "lOMoAR cPSD|26885763 \n \n174 | P a g e  \n \ninput and turns it into physical action. For instance, an electric motor, a hydraulic system, \nand a pneumatic system are all different types of actuators. \n \nController \nIn a typical IoT system, a sensor may collect information and route to a control center. There, \npreviously defined logic dictates the decision. As a result, a corresponding command controls \nan actuator in response to that sensed input. Thus, sensors and actuators in IoT work together \nfrom opposite ends. Later, we will discuss where the control center resides in the greater IoT \nsystem. \n \nIntegrating sensors and actuators with an Arduino microcontroller is a fundamental aspect of \ncreating interactive and automated projects. Arduino is a versatile platform for developing \nthese projects because it provides a simple and easy-to-learn programming environment \nalong with a wide range of compatible sensors and actuators. Here's a step-by-step guide on \nhow to integrate sensors and actuators with Arduino: \n1. Gather the Necessary Components: \nArduino board (e.g., Arduino Uno, Arduino Nano, etc.) \nSensors (e.g., temperature sensor, light sensor, motion sensor, etc.) \nActuators (e.g., LEDs, motors, servos, relays, etc.) \nBreadboard and jumper wires \nPower source (e.g., USB cable or external power supply) \n \n2. Install the Arduino IDE: \nDownload and install the Arduino Integrated Development Environment (IDE) on your \ncomputer from the official Arduino website (https://www.arduino.cc/en/software). \n \n3. Connect the Hardware: \nConnect the sensor and actuator components to the Arduino using jumper wires. \nMake sure to connect the sensor's output pin to a digital or analog input pin on the Arduino \nand the actuator to a digital output pin. \n \n4. Write Arduino Sketch (Code): \nOpen the Arduino IDE and create a new sketch. \nWrite the code that reads data from the sensor(s) and controls the actuator(s) based on that \ndata. \nUse the appropriate libraries for your sensors and actuators if needed. \n \n5. Upload the Code to the Arduino: \nConnect the Arduino to your computer using a USB cable. \nSelect the correct Arduino board and port in the Arduino IDE. \n",
        "images": []
    },
    "175": {
        "text": "lOMoAR cPSD|26885763 \n \n175 | P a g e  \n \nClick the \"Upload\" button to upload your code to the Arduino. \n \n6. Monitor and Debug: \nOpen the Arduino Serial Monitor (Tools -> Serial Monitor) to view sensor readings and \ndebug your code. \nAdjust the code as necessary to achieve the desired behavior. \n \n7. Power Considerations: \nEnsure that your power supply can handle the power requirements of your sensors and \nactuators. Some components may require an external power supply. \n \n8. Additional Components and Circuitry: \nDepending on your project, you may need additional components such as resistors, \ncapacitors, and transistors to interface with certain sensors or drive high-power actuators. \n \n9. Expand and Customize: \nContinue to add more sensors and actuators to create complex projects. \nExplore third-party libraries and online resources for additional functionality and project \nideas. \n \n10. Enclosure and Mounting: \nDepending on your project's requirements, you may need to design and build an enclosure to \nhouse the Arduino, sensors, and actuators, and mount them in the desired location. \nRemember to refer to the datasheets and documentation for your specific sensors and \nactuators to understand their pinouts and operation. Arduino's online community and forums \nare also valuable resources for getting help and finding project inspiration. \n \n \n \n",
        "images": []
    },
    "176": {
        "text": "lOMoAR cPSD|26885763 \n \n176 | P a g e  \n \nUNIT IV \nIOT COMMUNICATION AND OPEN PLATFORMS \n• IoT Communication Models and APIs \n• IoT Communication Protocols \n• Bluetooth  \n• WiFi \n• ZigBee \n• GPS \n• GSM modules \n• Open Platform (like Raspberry Pi) \n• Architecture \n• Programming \n• Interfacing  \n• Accessing GPIO Pins \n• Sending and Receiving Signals Using GPIO Pins \n• Connecting to the Cloud. \n \n",
        "images": []
    },
    "177": {
        "text": "lOMoAR cPSD|26885763 \n \n177 | P a g e  \n \n4.1. Internet of Things: Communication Models and APIs \n “The Internet of Things is not a concept; it is a network, the true technology-enabled \nNetwork of all networks.” — Edewede Oriwoh \n \n\"Internet of Things is the network of physical objects or ‘things’ embedded with \nelectronics, software, sensors and connectivity to enable it to achieve greater value and \nservice by exchanging data with the manufacturer, operator and/or other connected \ndevices. Each thing is uniquely identifiable through its embedded computing system but is \nable to interoperate within the existing Internet infrastructure.\" \n \n Communication Models in IoT \nUnderstanding how the different IoT devices communicate with each \nother is important and useful cause IoT devices are found almost \neverywhere now. Communication models are the way to understand it. \nIoTs enable people and things to be connected anytime, in any space, \nwith anything and anyone, through any network and service. \nNow let us understand the different communication models in IoT. \n \nRequest & Response Model \n \nThe communication takes place between a client and a server. \nWhenever required, the client will request information from the server. This request is \nusually in the encoded format. So in this model, basically a client sends requests to the server \nand the server responds to the requests. That is why it is called as Request-Response model. \nAfter receiving the request from the client, the server decides how to respond, fetches the \ndata from the database and its resource representation, prepares a response and ultimately \nsends the response to the client. \n \nPublish-Subscribe Model(Pub-Sub) \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_177_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_177_img_2.jpeg"
        ]
    },
    "178": {
        "text": "lOMoAR cPSD|26885763 \n \n178 | P a g e  \n \n \n \nIn this model, you will find three main entities:- Publisher, Broker and Consumer Let us see \nthe roles of each of these 3 entities. Publishers, send the data to the topics that are managed \nby the broker. They are the source of data. The Man in the Middle, the Broker, has the \nresponsibility to accept the data sent by the publisher and deliver that data to the \nconsumers.What is the task of the Consumers? Consumers will subscribe to the broker-\nmanaged topics. Once the data is published on a topic, the broker sends this message to all \nconsumers who have subscribed to the specific topic. It works a bit like YouTube. When you \nsubscribe to a channel and tap the Bell icon, you'll get notifications if the YouTube channel \nposts a video. \n \nPush-Pull Model \n \nHere too, we have 3 entities:- Publisher, Queues and Consumers. \nPush-Pull is a communication model where data producers push data into queues and \nconsumers pull data out of queues. What are Queues? They are used to separate out single \nproducer-consumer communication. At times, there might be some mismatch in the push-pull \nrates. Queues act as a buffer which helps in situations when there is a mismatch between the \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_178_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_178_img_2.jpeg"
        ]
    },
    "179": {
        "text": "lOMoAR cPSD|26885763 \n \n179 | P a g e  \n \nrate at which the producers push data and the rate at which the consumer pull data. So they \nwork as a buffer and flow control mechanisms whenever there is any mismatch in the push-\npull rates. \n \nExclusive Pair Model \n \nIt's a bi-directional, fully duplex communication model in which a dedicated communication \nlink is set between the client and the server. The connection remains open until the client \nsends a request to close the connection. The client and server can send messages to one \nanother after configuring the connection. As soon as the connection is terminated, no \nexchange of messages would take place between the client and the server. \n \nIoT Communication APIs \nAn API is an interface used by programs to access an application. It enables a program to \nsend commands to another program and receive replies from the app. IoT APIs are the \ninterface points between an IoT device and the Internet and/or other network components. \nHere we will talk about the REST-based API and the Websocket based API. \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_179_img_1.jpeg"
        ]
    },
    "180": {
        "text": "lOMoAR cPSD|26885763 \n \n180 | P a g e  \n \nREST-based APIs (Representational state transfer) \n \nRepresentational state transfer (REST) is a set of architectural principles by which you can \ndesign Web services the Web APIs that focus on the system's resources and how resource \nstates are addressed and transferred. \n \nURIs(example:- example.com/api/tasks) are used to depict resources in the RESTful web \nservice. \nClient tries to access these resources via URIs using commands like GET, PUT, POST, \nDELETE and so on that are defined by HTTP. \nIn response, the server responds with a JSON object or XML file. \nThe REST APIs follow the request-response model. \nThe rest architectural constraints are as follows: \n \nClient-server \nLet me explain it to you by giving a suitable example. The client should not be concerned \nwith the storage of data which is a concern of the server, similarly, the server should not be \nconcerned about the user interface, which is the concern of the client. Separation makes it \npossible for the client and server to be developed and updated independently. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_180_img_1.jpeg"
        ]
    },
    "181": {
        "text": "lOMoAR cPSD|26885763 \n \n181 | P a g e  \n \n \nStateless \nThe status of the session remains entirely on the client. \nCache-able \nThis property defines whether the response to any request can be cached or not. If a response \ncan be cached, then a client cache is granted the right to reuse that response data for \nsubsequent matching requests. \nLayered system \nA layered system defines the boundaries of the components within each specific layer. For \nexample, A client is unable to tell whether it is connected to the end server or an intermediate \nnode. As simple as that! \nUniform interface \nThis specifies that the technique of communication between a client and a server must be \nuniform throughout the communication period. \nCode on Demand \nServers may provide executable code or scripts for execution by clients in their context. \nWebsocket based APIs \n \nWebsocket APIs enable bi-directional and duplex communication between customers and \nservers. \nUnlike REST, There is no need to set up a connection every now and then to send messages \nbetween a client and a server. \nIt works on the principle of the exclusive pair model. Can you recall it? Yes. Once a \nconnection is set up, there is a constant exchange of messages between the client and the \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_181_img_1.jpeg"
        ]
    },
    "182": {
        "text": "lOMoAR cPSD|26885763 \n \n182 | P a g e  \n \nserver. All we need is to establish a dedicated connection to start the process. the \ncommunication goes on unless the connection is terminated. \nIt is a stateful type. \nDue to onetime dedicated connection setup, there is less overhead, lower traffic and less \nlatency and high throughput. \n \n4.2. IoT Communication Protocols \nSeveral Communication Protocols and Technology used in the internet of Things. \nSome of the major IoT technology and protocol (IoT Communication Protocols) are \nBluetooth, Wifi, Radio Protocols, LTE-A, and WiFi-Direct. \n \n4.2.1.  Bluetooth \nAn important short-range IoT communications Protocols / Technology. Bluetooth, which has \nbecome very important in computing and many consumer product markets. It is expected to \nbe key for wearable products in particular, again connecting to the IoT albeit probably via a \nsmartphone in many cases. \n \nIot Technology – Bluetooth \n4.2.2. Zigbee \nZigBee is similar to Bluetooth and is majorly used in industrial settings. It has some \nsignificant advantages in complex systems offering low-power operation, high security, \nrobustness and high and is well positioned to take advantage of wireless control and sensor \nnetworks in IoT applications. \n \nThe latest version of ZigBee is the recently launched 3.0, which is essentially the unification \nof the various ZigBee wireless standards into a single standard. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_182_img_1.jpeg"
        ]
    },
    "183": {
        "text": "lOMoAR cPSD|26885763 \n \n183 | P a g e  \n \n \nIot Technology – ZigBee \n \n4.2.3.  Z-Wave \nZ-Wave is a low-power RF communications IoT technology that primarily design for home \nautomation for products such as lamp controllers and sensors among many other devices. \nA Z-Wave uses a simpler protocol than some others, which can enable faster and simpler \ndevelopment, but the only maker of chips is Sigma Designs compared to multiple sources for \nother wireless technologies such as ZigBee and others.  \n \nIot Technology – Z-Waved. Wi-Fi \n \nWiFi connectivity is one of the most popular IoT communication protocol, often an obvious \nchoice for many developers, especially given the availability of WiFi within the home \nenvironment within LANs. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_183_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_183_img_2.jpeg"
        ]
    },
    "184": {
        "text": "lOMoAR cPSD|26885763 \n \n184 | P a g e  \n \nThere is a wide existing infrastructure as well as offering fast data transfer and the ability to \nhandle high quantities of data.  \n \nCurrently, the most common WiFi standard used in homes and many businesses is 802.11n, \nwhich offers range of hundreds of megabit per second, which is fine for file transfers but may \nbe too power-consuming for many IoT applications. \n \n4.2.4.  Cellular \nAny IoT application that requires operation over longer distances can take advantage of \nGSM/3G/4G cellular communication capabilities. While cellular is clearly capable of \nsending high quantities of data, especially for 4G, the cost and also power consumption will \nbe too high for many applications. \n \nBut it can be ideal for sensor-based low-bandwidth-data projects that will send very low \namounts of data over the Internet. \n \n \n \nIoT Communication Protocols – Cellular \n4.2.5. NFC \nNFC (Near Field Communication) is an IoT technology. It enables simple and safe \ncommunications between electronic devices, and specifically for smartphones, allowing \nconsumers to perform transactions in which one does not have to be physically present. \nIt helps the user to access digital content and connect electronic devices. Essentially it \nextends the capability of contactless card technology and enables devices to share \ninformation at a distance that is less than 4cm. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_184_img_1.jpeg"
        ]
    },
    "185": {
        "text": "lOMoAR cPSD|26885763 \n \n185 | P a g e  \n \n \n \nIoT Communication Protocols – NFC \n4.2.6.  LoRaWAN \nLoRaWAN is one of popular IoT Technology, targets wide-area network (WAN) \napplications. The LoRaWAN design to provide low-power WANs with features specifically \nneeded to support low-cost mobile secure communication in IoT, smart city, and industrial \napplications. \nSpecifically meets requirements for low-power consumption and supports large networks \nwith millions and millions of devices, data rates range from 0.3 kbps to 50 kbps.  \n \nIot Technology – LoRaWAN \n \n4.3. Bluetooth \nTo understand the architecture of Bluetooth first lets understand what actually Bluetooth is. \nBluetooth is a radio-wave technology that is mainly designed to enable wireless \ncommunications over short distances. The frequency of these waves ranges between 2.400 \nand 2.485 GHz, which can extend a maximum of 164 feet between two devices. Every \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_185_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_185_img_2.jpeg"
        ]
    },
    "186": {
        "text": "lOMoAR cPSD|26885763 \n \n186 | P a g e  \n \nBluetooth device has a Transmitter and a Receiver. The power of the device transmitter \ngoverns the range over which a Bluetooth device can operate in other words transmitter \ndecides the range of communication. \n \nThese days Bluetooth is the common technology present in most of the products. It is used in \nmany fields such as the health sector, sports and fitness, electronics, home automation, and \nsecurity, etc. \n \nSome of the applications of Bluetooth: \n–> Wireless control and communication between a mobile phone and a handsfreeheadset. \n \n->Wireless communication between a smartphone and a smart lock for unlocking doors. \n–> For low bandwidth applications where USB higher bandwidth is not required and cable-\nfree connection desired. \n–> For example, Smart watches, Smart Lights. \nHow does it work? \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_186_img_1.jpeg"
        ]
    },
    "187": {
        "text": "lOMoAR cPSD|26885763 \n \n187 | P a g e  \n \n4.3.1. Bluetooth Architecture. \n4.3.1.1. Piconet \nThe Bluetooth network is called a piconet. If it contains one master and one slave then its \ncalled a single piconet. Similarly, if it contains one master and multiple slaves are called \nmultiple piconets. \nThe Master is the one that initiates the communication with other devices and it dictates \nwhen a slave device may transmit. \nDirect Slave to Slave communication is not possible. \n \nMaximum 7 active slaves can be present in multiple piconets, in other words, only 8 \nmaximum devices including the master can communicate at any one time in a piconet. \n \n \n4.3.1.2. Scatternet \nIts a Combination of multiple piconets. \nHere Master of one piconet can be a slave in another piconet. This node can receive a \nmessage from a master in one piconet and deliver the message to its slave into the other \npiconet. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_187_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_187_img_2.jpeg"
        ]
    },
    "188": {
        "text": "lOMoAR cPSD|26885763 \n \n188 | P a g e  \n \nTherefore, this type of node is referred to as a bridge node. Above all, a station cannot be \nmaster in two piconets.Read More \n \nThe Architecture of a Bluetooth IoT Application \nFirstly, we must first dive into the Bluetooth “stack” to understand why recent shifts \nin Bluetooth standards are significant for IoT applications The evolution of Bluetooth from a \nreplacement for RS-232 data cables to a powerful and massive IoT connectivity solution is a \nstory of adding new layers to the stack. The newest Bluetooth specification for IoT—\nBluetooth mesh—must be engineered upon either the BLE 4.xx or 5.xx stack—an extension \nof the Bluetooth Core (“classic”) specification. The emerging Bluetooth mesh stack, \ntherefore, comprises three-stack layers: Core, then BLE, and mesh on top. \n \nBluetooth Topologies: Pair, Broadcast, Mesh \n \n• \nPair: Bluetooth as a means of pairing two devices \n• \nFor Example, a computer paired with a wireless mouse \n• \nBroadcasting: Bluetooth as a means of having one device broadcast information to \nmany devices or vice versa \n• \nFor Example: Playing music on smart speakers and simultaneously casting photos to a \nprojector—both using a single iPhone \n• \nMesh: Bluetooth as a way of connecting many devices to many others as if in a spider’s \nweb \n• \nFor Example: Connecting 1,278 overhead lights in a warehouse to each other to dim \nand brighten lights automatically based upon activity and personal preferences. \n \n4.3.2. Bluetooth Protocol Types \nThe main function of the Bluetooth is a Bluetooth protocol stack in architecture of \nBluetooth. In other words, It defines and provides different types of layers and \nfunctionalities. Bluetooth can run the different applications over different protocol stacks, \nbut, each one of these protocol stacks uses the same Bluetooth link and physical layers. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_188_img_1.jpeg"
        ]
    },
    "189": {
        "text": "lOMoAR cPSD|26885763 \n \n189 | P a g e  \n \n \nThe below diagram shows a complete Bluetooth protocol stack. It shows the relationship \nbetween the protocols that use the services of other protocols when there is a payload to be \ntransferred in the air. Anyhow, the protocols have many other relationships between the other \nprotocols – for example, some protocols (L2CAP, TCS Binary) use the LMP to control the \nlink manager. \n \nThe complete protocol stack architecture of Bluetooth is made up of both Bluetooth specific \nprotocols like object exchange protocols (OBEX) and user datagram protocol (UDP). \nThe main principle is to minimize the reuse of current protocols for different purposes at \nhigher layers as if re-inventing circle once again. The protocol re-use is helpful for the legacy \napplications to work with the Bluetooth technology to measure the smooth operations and \ninteroperability of applications. Hence, many applications are being developed to take \nimmediate advantage of the software and hardware. \n \n \nProtocol layers \nProtocol in the stacks \nBluetooth Core Protocol \nBaseband, LMP, L2CAP, SDP \nCable Replacement Protocol \nRFCOMM \nTelephony Control Protocol \nTCS Binary, AT- commands \nAdopted Protocols \nPPP, OBEX, UDP/TCP/IP, WAP, Vcard, Vcall, IrMC, WAE \n \nLayers of Architecture of Bluetooth : \nHost \nController \nInterface \nA command interface for the controller and for the link manager, \nwhich allows access to the hardware status and control registers. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_189_img_1.jpeg"
        ]
    },
    "190": {
        "text": "lOMoAR cPSD|26885763 \n \n190 | P a g e  \n \nLogical Link Control \nand \nAdaptation \nProtocol \nIt is also known as the heart of the Bluetooth protocol stack. It \nallows the communication between the upper and lower layers of the \nBluetooth protocol stack. \nRadio (RF) layer \nIt performs modulation/demodulation of the data into RF signals. \nBaseband Link layer \nIn short, it performs the connection establishment within a piconet. \nSDP layer \nIt is short for Service Discovery Protocol. It allows for discovering \nthe services available on another Bluetooth enabled device. \nWAP \nIt is short for Wireless Access Protocol. It is used for internet access. \nTCS \nIt is short for Telephony Control Protocol. It provides a telephony \nservice. \nApplication layer \nIn short , it enables the user to interact with the application. \n \n \n \nAdvantages of Bluetooth Protocols \n• \nBluetooth offers economic wireless solutions (both data & voice) but, for short distances \n• \nOn the other hand, Mobile and stationary environment use Bluetooth protocol. \n• \nThere is no setup file to install the Bluetooth, in other words, it is an inbuilt device. \n• \nAbove all, They are up-gradable \n \nCharacteristics of Bluetooth Protocols \n• \nIn short, Up to eight devices including the master can communicate in the Piconet by using \nBluetooth. \n• \nBluetooth signals are Omnidirectional as a result devices don’t point at each other. \n• \nGovernments regulated worldwide because it is possible to utilize the same standard. \n• \nIn short , Signals can transmit through walls and briefcases. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_190_img_1.jpeg"
        ]
    },
    "191": {
        "text": "lOMoAR cPSD|26885763 \n \n191 | P a g e  \n \n \nBluetooth Security \n \nFirstly, the security of any wireless technology is very important. With hackers gaining \naccess to an ever-increasing number of systems, as a result,Bluetooth security is increasingly \nimportant. \n \nBluetooth security must also address more specific Bluetooth related attacks that target \nknown vulnerabilities in Bluetooth implementations and specifications. In other words, these \nmay include attacks against improperly secured Bluetooth implementations which can \nprovide attackers with unauthorized access. \n \nMany users may not believe there is an issue with Bluetooth security, but hackers may be \nable to gain access to information from phone lists to more sensitive information that others \nmay hold on Bluetooth enabled phones and other devices. \n \nFirstly, there are three basic means of providing Bluetooth security: \n• \nAuthentication:   In this process, that is to say,the identity of the communicating devices is \nverified. But ,user authentication is not part of the main Bluetooth security elements of the \nspecification. \n• \nConfidentiality:   In Short, this process prevents the information from being eavesdropped by \nensuring that only authorized devices can access and view the data. \n• \nAuthorization:   This process prevents access by ensuring that a device is authorized to use a \nservice before enabling it to do so. \n \nCommon Bluetooth security issues \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_191_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_191_img_2.jpeg"
        ]
    },
    "192": {
        "text": "lOMoAR cPSD|26885763 \n \n192 | P a g e  \n \n \n• \nBluejacking: In short, Sending spam messages to discoverable Bluetooth enabled devices. \nHowever, this form of hacking is harmless. In short, the best way to defend against it is to \nkeep Bluetooth settings to invisible or non-discoverable. \n \n• \nBluesnarfing: It is more serious than bluejacking because it can reveal private information \non a smartphone and is capable of happening even when invisible/non-discoverable mode is \nenabled. \n \n• \nBluebugging: In short, it’s capable of accessing all the information such as photos, apps, \ncontacts, etc. It’s more dangerous than bluejacking and bluesnarfing. \n \nIn Conclusion, Some prevention tips for Bluetooth hacks are to set invisible mode. \nTherefore, makes it more difficult for hackers to gain access to your data. Lastly, stay awake \nfrom the open Wi-Fi networks in busy or untrusted locations, so that you can minimize the \nrisk of falling victim to hackers. \n \n4.4. Wi-Fi  \nA ubiquitous Internet of Things (IoT) depends upon wireless connectivity, but there are \nmany options for wireless and not every device is IP addressable – a requisite feature for IoT. \nWhat’s more, RF design is inherently difficult. Few companies are equipped with the \nappropriate skills to implement RF and antenna design, and even when done, keeping that \ndesign up to date with the latest standards and getting it through FCC compliance is time \nconsuming. \n \nFigure: The wide range of IoT applications that use Wi-Fi modules shows the flexibility and \nscalability of the interface, as well as its ubiquity. (Source: Tektronix.) \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_192_img_1.jpeg"
        ]
    },
    "193": {
        "text": "lOMoAR cPSD|26885763 \n \n193 | P a g e  \n \n \nFor designers, there is a very solid and proven option for wireless connectivity and the IoT. \nThat option is Wi-Fi and the use of modules. This feature will explain why, offer some \ndesign solutions, discuss soon-to-arrive upgrades to IEEE 802.11 protocols, and show how to \nbridge ZigBee to Wi-Fi for native IP addressability. \n \nThere are many wireless interface options, Bluetooth Low Energy (BLE), ZigBee, Z-Wave, \nWi-Fi and RFID, each with their own unique balance of power, range, data rates, mesh \nnetworking, interference immunity, and ease of use. However, some interfaces are not yet \nnative-IP enabled, so cannot be addressed directly or exchange data with other devices and \nservers over the Internet. These then require a separate gateway, adding expense and \ncomplexity to the final solution. \n \nThis is where Wi-Fi stands out: it is based on the IEEE 802.11 standards with native IP \naddressability, is ubiquitous, well understood, and can scale well in terms of data rates to \noptimize for power consumption. According to the Wi-Fi Alliance, there are more than 6.8 \nbillion installed Wi-Fi-capable devices, so the odds are pretty high that there is a local Wi-Fi \naccess point available . Note too that 802.11 standards are also IPv6 compliant, so there’s \nalmost no limit to the number of unique addresses. \n \nWhile Wi-Fi is widespread and well understood, it is still a wireless interface, with all the \nvagaries of design that RF entails. Understanding next steps is critical. \n \nEasing wireless development \nAfter selecting Wi-Fi for an IoT application, the designer often faces the daunting challenge \nof building a custom RF implementation, which requires time, money and expertise.  Design \nrequirements for developing a wireless device include, at a minimum, direct RFIC \nintegration and the ability to specify components such as filters, amplifiers, clocks, \ncapacitors, inductors, crystal oscillators, and the antennas that need to be on the board, as \nwell as their placement. There also needs to be network-matching circuitry to ensure that the \nradio and antenna are well matched to avoid signal loss. Other knowledge areas include \nsystem layout, software stack development, device security, connection reliability, signal \ninterference and degradation, and last but surely not least, FCC certification. \n \nHow does this task get done within typical time to market parameters given that RF design \nexpertise is not something readily available to every electronics company? An increasingly \ncommon way to add Wi-Fi capability is to use a pre-packaged module. This approach greatly \nsimplifies the process. Modules are supplied tested, calibrated and pre-certified to the \nrequired standards by the module vendor, and therefore can provide companies with a fast, \neasy route to market with what is, essentially, a plug-and-play solution, reducing the need for \n",
        "images": []
    },
    "194": {
        "text": "lOMoAR cPSD|26885763 \n \n194 | P a g e  \n \nsoftware development. What is more, manufacturers who design and build the Wi-Fi \nmodules can be your RF consultants during the design integration stage. \n \nThe Wi-Fi module generally contains two main parts: a Wi-Fi chip and an application host \nprocessor. The Wi-Fi subsystem includes an 802.11 radio physical layer (PHY), baseband, \nmedia access control (MAC), and perhaps a crypto engine for fast, secure Internet \nconnection. The application host processor has internal or external flash, ROM, and RAM. \nThe module generally also comes with I/Os for timers, serial communication interfaces, \nanalog comparators, analog-to-digital converter (ADC), digital-to-analog converter (DAC), \ncrystal oscillators, and a debug interface. \n \nThe power management subsystem includes integrated DC-DC converters supporting a wide \nrange of supply voltages. It enables low-power consumption modes, such as hibernate with \nreal-time clock (RTC) mode. A module may offer an integrated antenna or provide an RF \nconnector for an external antenna. The software package included with a Wi-Fi module \nusually includes a device driver, an integrated 802.11 security layer, and a management and \nmonitoring utility. \n \nIn designing a Wi-Fi IoT solution, the starting point is an understanding that IEEE 802.11 \nrepresents a family of standards that until just recently operated only in the 2.4 GHz (IEEE \n802.11b/g/n) and 5 GHz (IEEE 802.11a/n/ac) unlicensed bands. There are three key factors \nto consider when evaluating these protocols: data rate, range, and power requirements. When \nyou compare the different Wi-Fi protocols, 802.11b/g has the advantage in compatibility \nwith installed devices and power requirements while 802.11n and 802.11ac have the \nadvantage of higher data throughput for multimedia applications such as video streaming \n(see Table). \n \nProtocol \nFrequency \nSignal \nMaximum data rate \nLegacy 802.11 2.4 GHz \nFHSS or DSSS 2 Mbps \n802.11a \n5 GHz \nOFDM \n54 Mbps \n802.11b \n2.4 GHz \nHR-DSSS \n11 Mbps \n802.11g \n2.4 GHz \nOFDM \n54 Mbps \n802.11n \n2.4 or 5 GHz OFDM \n600 Mbps (theoretical) \n802.11ac \n5 GHz \n256-QAM \n1.3 Gbps \nTable: A summary of different Wi-Fi protocols and data rates shows the progression of IEEE \n802.11 from its early days of 2 Mbps to 1.3 Gbps today. (Source: Intel Corp.) \n",
        "images": []
    },
    "195": {
        "text": "lOMoAR cPSD|26885763 \n \n195 | P a g e  \n \n \nWhen designing for IoT applications, however, a higher data rate protocol is not always \npreferable. Even though 802.11ac can crank it up to a maximum of 1.3 Gbps, most embedded \napplications (e.g., machine to machine [M2M] data and control devices) are power \nconstrained and can get by with a much lower data rate. \n \nOne more good reason to choose Wi-Fi is that within the next year or so technology upgrades \nwill make it much more capable. For example, the Wi-Fi Alliance recently announced the \nWi-Fi HaLow (pronounced \"halo\") designation for products incorporating IEEE 802.11ah \ntechnology. HaLow extends Wi-Fi into the 900 MHz band and offers improved range – \nnearly twice that of today’s Wi-Fi – with scalable data rates from 150 Kbps to 2.1 Mbps; \nIEEE 802.11ah also promises to provide low power consumption features and its use cases \nare primarily for wireless sensor networks, a classic IoT application. \n \nIn February, at the 2016 International Solid-State Circuits Conference (ISSCC) the Holst \nCentre of the Netherlands, in collaboration with Belgium’s IMEC Research Institute, showed \na HaLow transmitter running Wi-Fi over sub-GHz bands. The team cited a maximum power \nconsumption of 7.1 mW when delivering 0 dBm output power and operating from a 1 V \nsupply. This represents a 10x power reduction compared to state-of-the-art 802.11 OFDM \ntransceivers. \n \nAlso under development is IEEE 802.11ai, which will provide a fast initial link setup \n(achieving a secure link setup in less than 100 ms) and IEEE 802.11aq, being developed to \nprovide a cellular-like automatic network-discovery experience. \n \nModules and dev kits \nRF engineering can be a tricky business, especially for neophytes in the discipline. \nRecognizing this, RF silicon suppliers are providing modules, dev kits and reference designs \nthat make adding wireless connectivity to a product much easier. \n \nMicrochip, for example, supplies an IoT development kit (DM990001) using a module \ndriven \nby \na \n32-bit \ncontroller. \nIt \nemploys \ntwo \nMicrochip \ncomponents, \nthe MRF24WG0MA/B pre-certified Wi-Fi module, which supports both 802.11b and \n802.11g, and the PIC32MX695F512H microcontroller with 128 Kbytes of RAM and 512 \nKbits of flash. The PIC MCU features an 80 MHz, 105-DMIPS 32-bit core, a USB 2.0 On-\nThe-Go (OTG) peripheral with integrated PHY, a 10/100 Ethernet MAC, and four dedicated \ndirect memory access (DMA) channels for USB OTG and Ethernet. \n \nThe starter kit is powered by Amazon Web Services (AWS), a managed cloud platform that \nlets connected devices securely interact with cloud applications. With AWS IoT applications \n",
        "images": []
    },
    "196": {
        "text": "lOMoAR cPSD|26885763 \n \n196 | P a g e  \n \ncan keep track of and communicate with all networked devices, all the time, even when they \naren’t connected. \n \nAmazon has put together Quickstart reference deployments for its AWS IoT, which is \ndesigned to show off some of the capabilities of the platform. AWS IoT can be especially \nhelpful if you plan to use Amazon as your hosting provider. It supports HTTP, WebSockets \nfor web browsers and web servers, and MQ Telemetry Transport (MQTT), a lightweight \ncommunication protocol for small sensors and mobile devices specifically designed to \ntolerate intermittent connections, minimize the code footprint on devices, and reduce network \nbandwidth requirements. \n \nTexas instruments’ CC3100MOD Wi-Fi module is a complete platform solution including \nvarious tools and software, sample applications, user and programming guides, and reference \ndesigns. It consists mainly of the company’s CC3100R11MRGC Wi-Fi Network Processor \nand power management subsystems.  Part of the company’s SimpleLink Wi-Fi family, \nCC3100MOD integrates all protocols for Wi-Fi and Internet, reducing host MCU software \nrequirements. It also includes all required clocks, SPI flash, RF filter, crystal and passives. \n \nFigure: TI’s CC3100MOD is designed to simplify the implementation of Internet \nconnectivity. It integrates all protocols for Wi-Fi and the Internet, which greatly reduces host \nMCU software requirements. \n \nThe CC3100MOD Wi-Fi Network Processor subsystem incorporates an 802.11 b/g/n radio, \nbaseband, and MAC and has a 256-bit encryption engine for secure Internet connection. It \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_196_img_1.jpeg"
        ]
    },
    "197": {
        "text": "lOMoAR cPSD|26885763 \n \n197 | P a g e  \n \nalso contains a dedicated ARM MCU that completely off-loads the host MCU. The power \nmanagement subsystem includes an integrated DC-DC converter with support for a wide \nrange of supply voltages. It enables low-power consumption modes such as hibernate with \nRTC mode, which requires only about 7 μA of current. \n \nOn the software side the module includes embedded TCP/IP and TLS/SSL security stacks, \nHTTP server, and multiple Internet protocols. The device driver keeps the host memory \nfootprint requirement to less than 7 Kbytes for code and 700 bytes of RAM for data for a \nTCP client application. The CC3100MOD IoT module solution is also FCC, IC, CE, and Wi-\nFi certified. \n \nThe SPWF01S Wi-Fi module from STMicroelectronics is a plug-and-play 802.11b/g/n \nsolution  It has a serial interface on one side that allows communications with MCUs like the \nsupplier’s STM32 and STM8. On the other side is the Wi-Fi transceiver. The module also \nincorporates timing clocks and voltage regulators. It is available either configured with an \nembedded micro 2.45 GHz ISM band antenna (SPWF01SA), or with a U.FL coax connector \nfor external antenna connection (SPWF01SC), so no RF knowledge is required for \nintegration. \n \nBlock diagram of the ST SPWF01S serial-to-Wi-Fi b/g/n module. With low power \nconsumption and a small form factor, it can be used for both fixed and mobile wireless \napplications. \n \nThe SPWF01S comes with CE, FCC and IC certification and meets industrial temperature-\nrange requirements. \nWhile we have focused on Wi-Fi, the ZigBee wireless standard is a popular choice for a wide \nrange of applications that require low power, medium range, and flexible networking that is \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_197_img_1.jpeg"
        ]
    },
    "198": {
        "text": "lOMoAR cPSD|26885763 \n \n198 | P a g e  \n \nrelatively easy to install, configure and maintain. ZigBee, however, lacks a crucial \nrequirement for IoT applications: native IP connectivity. Digi International’s XBee® Wi-Fi \nmodules bridge this gap. To get you started, the company’s XBee Wi-Fi Cloud kit (xka2B-\nwft-0) includes an XBee Wi-Fi (S6B) module, XBee USB development board with \nbreadboard, a components package (resistors, relay, buttons, LEDs), access to Digi’s cloud-\nbased application and all necessary antennas, power supplies, and cables. Digi’s XBee Wi-Fi \nmodules share a common footprint with other XBee modules, which allows different XBee \ntechnologies to be drop-in replacements for each other. \n \nIoT applications depend upon wireless connectivity, but there are numerous wireless protocol \noptions. RF design also is inherently difficult and few companies are equipped with the \nappropriate skills to implement RF and antenna design. Even if the expertise is available, \nkeeping the design up to date with the latest standards and getting it through FCC compliance \nis time consuming.  This Wi-Fi modules and their associated kits and reference designs can \ndramatically simplify the implementation challenges facing designers of new IoT devices. \n  \n4.5. Zigbee \nWhen you are designing, planning and prototyping a wireless application, the protocol you \nchoose is a key component, with considerations for security, flexibility and the ability to \ndeploy to multiple regions. \n \nZigbee is a wireless technology developed as an open global standard to address the unique \nneeds of low-cost, low-power wireless IoT networks. The Zigbee standard operates on the \nIEEE 802.15.4 physical radio specification and operates in unlicensed bands including 2.4 \nGHz, 900 MHz and 868 MHz. \n \nThe 802.15.4 specification upon which the Zigbee stack operates gained ratification by \nthe Institute of Electrical and Electronics Engineers (IEEE) in 2003. The specification is a \npacket-based radio protocol intended for low-cost, battery-operated devices. The protocol \nallows devices to communicate in a variety of network topologies and can have battery life \nlasting several years. \n  \n The Zigbee 3.0 protocol was created and ratified by member companies \nof the Zigbee Alliance. Over 300 leading semiconductor manufacturers, technology firms, \nOEMs and service companies comprise the Zigbee Alliance membership. The Zigbee \nprotocol was designed to provide an easy-to-use wireless data solution characterized by \nsecure, reliable wireless network architectures. \n \nThe Zigbee Advantage \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_198_img_1.png"
        ]
    },
    "199": {
        "text": "lOMoAR cPSD|26885763 \n \n199 | P a g e  \n \nThe Zigbee 3.0 protocol is designed to communicate data through noisy RF environments \nthat are common in commercial and industrial applications. Version 3.0 builds on the \nexisting Zigbee standard but unifies the market-specific application profiles to allow all \ndevices to be wirelessly connected in the same network, irrespective of their market \ndesignation and function. \n \n \nAdditionally, a Zigbee 3.0 certification scheme ensures the interoperability of products from \ndifferent manufacturers. Connecting Zigbee 3.0 networks to the IP domain opens up \nmonitoring and control from devices such as smartphones and tablets on a LAN or WAN, \nincluding the Internet, and brings the true Internet of Things to fruition. \n \nZigbee protocol features include: \n• \nSupport for multiple network topologies such as point-to-point, \npoint-to-multipoint and mesh networks \n• \nLow duty cycle – provides long battery life \n• \nLow latency \n• \nDirect Sequence Spread Spectrum (DSSS)Up to 65,000 nodes per network \n• \n128-bit AES encryption for secure data connections \n• \nCollision avoidance, retries and acknowledgements \n \nZigbee Wireless Mesh Networking \nWhat Is Zigbee? \nZigbee is a wireless technology developed as an open global market connectivity standard to \naddress the unique needs of low-cost, low-power wireless IoT data networks. The Zigbee \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_199_img_1.jpeg"
        ]
    },
    "200": {
        "text": "lOMoAR cPSD|26885763 \n \n200 | P a g e  \n \nconnectivity standard operates on the IEEE 802.15.4 physical board radio specification and \noperates in unlicensed radio bands including 2.4 GHz, 900 MHz and 868 MHz. \n \nThe 802.15.4 wireless specification upon which the Zigbee stack operates gained board \nratification by the Institute of Electrical and Electronics Engineers (IEEE) in 2003. The \nspecification is a packet-based radio board protocol intended for low-cost, battery-operated \ndevices and products. The protocol allows devices to communicate data in a variety of \nnetwork topologies and can have battery life lasting several years. \nThe Zigbee 3.0 Protocol \nThe Zigbee protocol has been created and ratified by member companies of the Zigbee Board \nAlliance.Over 300 market leading semiconductor manufacturers, technology firms, OEMs \nand service companies comprise the Zigbee Alliance membership board. The Zigbee \nprotocol was designed to provide an easy-to-use wireless data solution characterized by \nsecure, reliable wireless network architectures. \n \nThe Zigbee Advantage \n \nThe Zigbee 3.0 protocol is designed to communicate data through noisy RF environments \nthat are common in commercial and industrial market applications. Version 3.0 builds on the \nexisting Zigbee connectivity standard but unifies the market-specific application profiles to \nallow all devices to be wirelessly connected in the same network, irrespective of their market \ndesignation and function. Furthermore, a Zigbee 3.0 certification scheme ensures the \ninteroperability of products from different device manufacturers. Connecting Zigbee 3.0 \nnetworks to the IP domain opens up wireless monitoring and control from radio devices such \nas smartphones and tablets on a LAN or WAN, including the Internet, and brings the true \nInternet of Things to fruition. \nZigbee protocol features include: \n• \nSupport \nfor \nmultiple \nnetwork \ntopologies \nsuch \nas \npoint-to-point, \npoint-to-multipoint and mesh networks \n• \nLow duty cycle – provides long battery life \n• \nLow latency \n• \nDirect Sequence Spread Spectrum (DSSS) \n• \nUp to 65,000 nodes per network \n• \n128-bit AES encryption for secure data connections \n• \nCollision avoidance, retries and acknowledgements \nThe Zigbee 3.0 software stack incorporates a ‘base device’ that provides consistent behavior \nfor commissioning nodes and devices into a network. A common set of commissioning \nmethods is provided, including Touchlink, a method of proximity commissioning. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_200_img_1.jpeg"
        ]
    },
    "201": {
        "text": "lOMoAR cPSD|26885763 \n \n201 | P a g e  \n \n \nZigbee Wireless Security \nZigbee 3.0 provides enhanced network security. There are two methods of security that give \nrise to two types of network: \n• \nCentralized security: This method employs a coordinator/trust center that forms the \nnetwork and manages the allocation of network and link security keys to joining \nnodes. \n• \nDistributed security: This method has no coordinator/trust center and is formed by a \nrouter. Any Zigbee router node can subsequently provide the network key to joining \nnodes. \nNodes adopt whichever security method is used by the hub network they join. Zigbee 3.0 \nsupports the increasing scale and complexity of wireless networks, and copes with large local \nnetworks of greater than 250 nodes. Zigbee also handles the dynamic behavior of these \nnetworks (with nodes appearing, disappearing and re-appearing in the network) and allows \norphaned nodes, which result from the loss of a parent, to re-join the network via a different \nparent. The self-healing nature of Zigbee Mesh networks also allows nodes to drop out of the \nnetwork without any disruption to internal routing. \n \nZigbee Protocol Compatibility \nThe backward compatibility of Zigbee 3.0 means that applications and smart home devices \nalready developed under the Zigbee Light Link 1.0 or Home Automation 1.2 profile are \nready for Zigbee 3.0. The Zigbee Smart Energy profile is also compatible with Zigbee 3.0 at \nthe functional level, but Smart Energy has additional security requirements that are only \naddressed within the profile. \n \nZigbee Device Data \nZigbee’s Over-The-Air (OTA) upgrade feature for software updates during device operation \nensures that applications on devices already deployed in the field/market can be seamlessly \nmigrated to Zigbee 3.0. OTA upgrade is an optional functionality that manufacturers are \nencouraged to support in their Zigbee products' application layer. \nZigbee Mesh Networks \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_201_img_1.png"
        ]
    },
    "202": {
        "text": "lOMoAR cPSD|26885763 \n \n202 | P a g e  \n \nA key component of the Zigbee protocol is the ability to support mesh networking. In a mesh \nnetwork, nodes are interconnected with other nodes so that multiple pathways connect each \nnode. Connections between nodes are dynamically updated and optimized through \nsophisticated, built-in mesh routing table. \n \nMesh networks are decentralized in nature; each node is capable of self-discovery on the \nnetwork. Also, as nodes leave the network, the mesh topology allows the nodes to \nreconfigure routing paths based on the new network structure. The characteristics of mesh \ntopology and ad-hoc routing provide greater stability in changing wave conditions or failure \nat single nodes. \n \nZigbee Wireless Applications \nZigbee enables broad-based wave deployment of wireless networks with low-cost, low-\npower solutions. It provides the ability to run for years on inexpensive batteries for a host of \nmonitoring and control applications. Smart energy/smart grid, AMR (Automatic Meter \nReading), lighting controls, building automation systems, tank monitoring, HVAC control, \nmedical devices, dbm radio, ghz wireless protocols, wireless sensor networks and fleet \napplications are just some of the many spaces where Zigbee technology is making significant \nadvancements. \n \nDigi XBee 3 Zigbee Technology \nDigi is a member of the Zigbee Alliance and has developed a wide range of data networking \nsolutions based on the Zigbee protocol. Digi XBee 3 is the latest in a long line of radio \ndevices that provide an easy-to-implement solution that provides functionality to connect to a \nwide variety of devices with robust connectivity standards. \n \n4.6. GPS  \nGPS uses satellites to monitor the movement of anything equipped with such a GPS \ntracking device, including automobiles, humans, and even pets. It operates in any weather \ncondition and offers precise location updates in real-time. As one of the earliest ways to \ntrack and disseminate digital information from the real environment, GPS has significantly \nimpacted IoT technology. The Internet of Things (IoT) may gather and measure enormous \namounts of data on anything from individual health to public transportation; GPS tracking is \nrequired to provide location information for such objects. \n \nA more reliable and easily accessible data set can be built using GPS and the Internet \nof Things. In the same way that GPS pinpoints the precise location of a vehicle, the Internet \nof Things is able to monitor moving items and collect data on their movements in real time. \n \nHow Does GPS Function? \n",
        "images": []
    },
    "203": {
        "text": "lOMoAR cPSD|26885763 \n \n203 | P a g e  \n \nGPS satellites complete two accurate orbits around the planet every day. An individual \nsatellite's signal and orbiting parameters can be decoded and used to pinpoint the satellite's \nlocation via a GPS receiver. This data, together with triangulation, is used by GPS receivers \nto pinpoint the precise location of its owners. \n \nThe uses of GPS and the Internet of Things \nWhen applied to Internet of Things (IoT) gadgets, GPS technology might provide benefits \nyou might not have anticipated. In the age of the Internet of Things, it is possible to amass \nvast amounts of data from a wide variety of sources. Information such as medical files and \nfacial mapping is included. \n \nThe Long-Term Perspective of GPS with IoT \nIt is possible that all of your belongings can be located using GPS. Italian firm Sherlock, for \ninstance, uses GPS and the Internet of Things to keep tabs on your bike. Bicycle owners can \nuse this kind of tracking to prevent bike theft. In addition, the owner of the vehicle will be \ninformed of any modifications done to it. \n \nInternet of Things-Global Positioning System helps boost transportation quality and \nsafety. It was previously just possible to trace which foundation arrived, departed, etc., but \nnow that we can manage the precise present location, transit quality & security are also \nenhanced. \nSince you can interact with users' questions in real-time, you may use it with complete \nassurance. \nMarketing a helpful transportation service. Users whose packages are too large to be \ntransported conventionally can be attracted \n \nUse IoT-GPS to set yourself apart in transportation management. Differentiation from \ncompetitors and end users can be achieved through the provision of novel approaches to \nmanagement (barcode scanning, managing of arriving at the base by RFID, etc., starting \npicking up of crossing points on slips, etc.). \n \nCut back on the money spent on managing employees. By equipping workers with GPS \ntrackers, employers can gain insight into the \"what? who? where?\" of their operations and, \nusing that data, create more effective attendance and safety management systems. Can cut \nadministrative expenses \n \nSome Devices that are part of the Internet of Things and use a global positioning \nsystem \n",
        "images": []
    },
    "204": {
        "text": "lOMoAR cPSD|26885763 \n \n204 | P a g e  \n \nLORAWAN G62: Using publicly or private LoRaWAN (Long Range Wide Area Network) \nnetworks, the G62 LoRaWAN can keep tabs on any service, no matter how extreme the \nweather becomes. It is compact, lightweight, and built to withstand the elements. \n \nLORAWAN SENSOR DATA: The Inertial Sensor is a battery-operated data \ncommunicator that connects to various sensors, GPS, inputs, and outputs and then uploads \nthat data to a LoRaWAN network. Useful for sensors and agricultural uses. \n \nLORAWAN, OR SHELLFISH: The Oyster is a rugged GPS tracking system that can \nwithstand the elements and be made with the super-long battery life of LoRaWAN networks \nin mind for tracking exposed, unpowered assets in mind. \n \nNEO-6M GPS Module with Arduino \nThis guide shows how to use the NEO-6M GPS module with the Arduino to get GPS \ndata. GPS stands for Global Positioning System and can be used to determine position, time, \nand speed if you’re travelling. \n \nYou’ll learn how to: \n▪ \nWire the NEO-6M GPS module to the Arduino UNO \n▪ \nGet raw GPS data \n▪ \nParse raw data to obtain selected and readable GPS information \n▪ \nGet location \nIntroducing the NEO-6M GPS Module \nThe NEO-6M GPS module is shown in the figure below. It comes with an external antenna, \nand does’t come with header pins. So, you’ll need to get and solder some. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_204_img_1.jpeg"
        ]
    },
    "205": {
        "text": "lOMoAR cPSD|26885763 \n \n205 | P a g e  \n \n \n▪ \nThis module has an external antenna and built-in EEPROM. \n▪ \nInterface: RS232 TTL \n▪ \nPower supply: 3V to 5V \n▪ \nDefault baudrate: 9600 bps \n▪ \nWorks with standard NMEA sentences \n \nThe NEO-6M GPS module is also compatible with other microcontroller boards.. \n \nPin Wiring \nThe NEO-6M GPS module has four pins: VCC, RX, TX, and GND. The module \ncommunicates with the Arduino via serial communication using the TX and RX pins, so the \nwiring couldn’t be simpler: \nNEO-6M GPS Module \nWiring to Arduino UNO \nVCC \n5V \nRX \nTX pin defined in the software serial \nTX \nRX pin defined in the software serial \nGND \nGND \nGetting GPS Raw Data \nTo get raw GPS data you just need to start a serial communication with the GPS module \nusing Software Serial. Continue reading to see how to do that. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_205_img_1.jpeg"
        ]
    },
    "206": {
        "text": "lOMoAR cPSD|26885763 \n \n206 | P a g e  \n \nParts Required \nWire the NEO-6M GPS module to your Arduino by following the schematic below. \n \n▪ \nThe module GND pin is connected to Arduino GND pin \n▪ \nThe module RX pin is connected to Arduino pin 3 \n▪ \nThe module TX pin is connected to Arduino pin 4 \n▪ \nThe module VCC pin is connected to Arduino 5V pin \nCode \nCopy the following code to your Arduino IDE and upload it to your Arduino board. \n#include <SoftwareSerial.h> \n \n// The serial connection to the GPS module \nSoftwareSerial ss(4, 3); \n \nvoid setup(){ \n  Serial.begin(9600); \n  ss.begin(9600); \n} \n \nvoid loop(){ \n  while (ss.available() > 0){ \n    // get the byte data from the GPS \n    byte gpsData = ss.read(); \n    Serial.write(gpsData); \n  } \n} \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_206_img_1.jpeg"
        ]
    },
    "207": {
        "text": "lOMoAR cPSD|26885763 \n \n207 | P a g e  \n \n4.7. GSM/GPRS Module \nGSM/GPRS module is used to establish communication between a computer and \na GSM-GPRS system. Global System for Mobile communication (GSM) is an \narchitecture used for mobile communication in most of the countries.  \n  \n \nBlock Diagram Showing Diffrent Parts Of Typical GSM/GPRS Module \nGlobal Packet Radio Service (GPRS) is an extension of GSM that enables higher \ndata transmission rate. GSM/GPRS module consists of a GSM/GPRS modem assembled \ntogether with power supply circuit and communication interfaces (like RS-232, USB, \netc) for computer. The MODEM is the soul of such modules. \n \nWireless MODEMs \n \nFlow Chart Showing Classification Of Wireless Modem Based On Network, Data Or \nTechnology \n \nWireless MODEMs are the MODEM devices that generate, transmit or decode data from a \ncellular network, for establishing communication between the cellular network and the \ncomputer. These are manufactured for specific cellular network (GSM/UMTS/CDMA) or \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_207_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_207_img_2.jpeg"
        ]
    },
    "208": {
        "text": "lOMoAR cPSD|26885763 \n \n208 | P a g e  \n \nspecific cellular data standard (GSM/UMTS/GPRS/EDGE/HSDPA) or technology \n(GPS/SIM). Wireless MODEMs like other MODEM devices use serial communication to \ninterface with and need Hayes compatible AT commands for communication with the \ncomputer (any microprocessor or microcontroller system). \n \n GSM/GPRS MODEM \nGSM/GPRS MODEM is a class of wireless MODEM devices that are designed for \ncommunication of a computer with the GSM and GPRS network. It requires a SIM \n(Subscriber Identity Module) card just like mobile phones to activate communication with \nthe network. Also they have IMEI (International Mobile Equipment Identity) number similar \nto mobile phones for their identification. A GSM/GPRS MODEM can perform the following \noperations: \n  \n1.      Receive, send or delete SMS messages in a SIM. \n2.      Read, add, search phonebook entries of the SIM. \n3.      Make, Receive, or reject a voice call. \n  \nThe MODEM needs AT commands, for interacting with processor or controller, which are \ncommunicated through serial communication. These commands are sent by the \ncontroller/processor. The MODEM sends back a result after it receives a command. Different \nAT commands supported by the MODEM can be sent by the processor/controller/computer \nto interact with the GSM and GPRS cellular network. \n \n GSM/GPRS Module \n \nAn Image of Assembled Circuit For GSM/GPRS Module With Standard Communication \nInterfaces Like RS-232 Or USB \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_208_img_1.jpeg"
        ]
    },
    "209": {
        "text": "lOMoAR cPSD|26885763 \n \n209 | P a g e  \n \nA GSM/GPRS module assembles a GSM/GPRS modem with standard communication \ninterfaces like RS-232 (Serial Port), USB etc., so that it can be easily interfaced with a \ncomputer or a microprocessor / microcontroller based system. The power supply circuit is \nalso built in the module that can be activated by using a suitable adaptor. \n \nMobile Station (Cell phones and SIM) \nA mobile phone and Subscriber Identity Module (SIM) together form a mobile station. It is \nthe user equipment that communicates with the mobile network. A mobile phone comprises \nof Mobile Termination, Terminal Equipment and Terminal Adapter. \n \nBlock Diagram Showing Diffrent Functions Of Cell Phone And SIM In Mobile Station \n  \nMobile Termination is interfaced with the GSM mobile network and is controlled by a \nbaseband processor. It handles access to SIM, speech encoding and decoding, signaling and \nother network related tasks. The Terminal Equipment is an application processor that deals \nwith handling operations related to keypad, screen, phone memory and other hardware and \nsoftware services embedded into the handset. The Terminal Adapter establishes \ncommunication between the Terminal Equipment and the Mobile Termination using AT \ncommands. The communication with the network in a GSM/GPRS mobile is carried out by \nthe baseband processor. \n \n  GSM Technology Architecture \nThe main elements in the GSM architecture include the following. \n \nThe Architecture of GSM Technology \n• \nNetwork and Switching Subsystem (NSS) \n• \nBase-Station Subsystem (BSS) \n• \nThe mobile station (MS) \n• \nOperation and Support Subsystem (OSS) \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_209_img_1.jpeg"
        ]
    },
    "210": {
        "text": "lOMoAR cPSD|26885763 \n \n210 | P a g e  \n \n \n \nNetwork Switching Subsystem (NSS) \nIn GSM system architecture, it includes different elements, which are frequently known as \nthe core system/network. Here, it is basically a data network including a variety of units to \nprovide the major control as well as interfacing of the entire mobile network system. The \ncore network includes the major elements which are discussed below. \n \nMobile Switching Centre (MSC) \nThe Mobile Switching Centre or MSC is the key element in the core network region of the \nGSM network architecture. This mobile services switching center works like a standard \nswitching node in an ISDN otherwise PSTN, however, it also gives extra functionality to \nallow the mobile user necessities to be supported like authentication, registration, inter-MSC \nhandovers call location & routing of the call to a cell phone subscriber. \n \nAnd, it also provides an edge toward the public switched telephone network so that the phone \ncalls can be connected from the network of the mobile to a phone to a landline. Interfaces to \nother mobile switching center server are provided to allow mobile calls to be made to \nmobiles over dissimilar networks. \n \nHome Location Register (HLR) \nThis HLR database includes the information regarding the administrative like every \nsubscriber with their previous identified location. Like this, the GSM network is capable to \nconnect the calls to the related base station for the mobile switch. Once an operator turns ON \nhis/her phone, and then the phone registers through the network so that it is probable to \ndecide which base transceiver station is communicating so that incoming calls can be \nconnected properly. \n \nEven once the mobile is switched on, but not active then it again registers to make sure that \nthe HLR network is responsive to its most recent location. There is one HLR for each \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_210_img_1.jpeg"
        ]
    },
    "211": {
        "text": "lOMoAR cPSD|26885763 \n \n211 | P a g e  \n \nnetwork, even though it may be dispersed across a variety of sub-centers for operational \ncauses. \n \nVisitor Location Register (VLR) \nThe VLR includes preferred information that is received from the HLR network to allow the \npreferred services for the separate subscriber. The visitor location register can be executed \nlike a separate unit; however, it is usually realized like an essential element of the MSC, \nbefore an individual unit. Thus, access is finished quicker & more convenient. \n \nEquipment Identity Register (EIR) \nThe EIR (Equipment Identity Register) is the unit that makes a decision whether specified \nmobile gear may be permitted over the network. Every mobile gear includes a number \nidentified like the IMEI or International Mobile Equipment Identity. \nSo, this IMEI number is fixed within the mobile equipment & is verified through the network \nwhile registration. It mainly depends on the information that is held within the EIR, and the \nmobile device may be assigned one of 3 conditions which allowed over the network, barred \naccess, otherwise watched in case its problems. \n \nAuthentication Centre (AuC) \nThe AuC (authentication center) is a protected file that includes the secret key in the SIM \ncard of the user. The AuC is mainly used for verification & for coding on the radio channel. \n \nGateway Mobile Switching Centre (GMSC) \nThe GMSC/ Gateway Mobile Switching Centre is the end to which a ME finishing call is \nprimarily connected without any information about the MS’s place. The GMSC obtains the \nMobile Station Roaming Number (MSRN) from the MSISDN based on HLR & connecting \nthe call toward the exact visited MSC. The “MSC” division of the name GMSC is confusing \nas the gateway process does not need any linking toward an MSC. \n \nSMS Gateway (SMS-G) \nThe SMS gateway or SMS-G is used jointly to explain two SMS-Gateways in the GSM \nstandards. These gateways control messages which are directed in dissimilar ways. \n \nThe Short Message Service Gateway Mobile Switching Centre (SMS-GMSC) is used for \nshort messages which are being transmitted to an ME. The Short Message Service Inter-\nWorking Mobile Switching Centre (SMS-IWMSC) is used for short messages created \nthrough a mobile network. The main role of SMS-GMSC is related to GMSC, but the SMS-\nIWMSC offers a permanent access end to the SMS Centre. \n \n",
        "images": []
    },
    "212": {
        "text": "lOMoAR cPSD|26885763 \n \n212 | P a g e  \n \nThese units were the major ones that are used in the network of GSM technology. They were \nnormally co-located, however frequently the overall middle network was transmitted around \nthe country wherever the network was situated. In case of malfunction, it will give some \nflexibility. \n \nBase Station Subsystem (BSS) \nIt acts as an interface between the mobile station and the network subsystem. It consists of \nthe Base Transceiver Station which contains the radio transceivers and handles the protocols \nfor communication with mobiles. It also consists of the Base Station Controller which \ncontrols the Base Transceiver station and acts as an interface between the mobile station and \nmobile switching center. \n \nThe network subsystem provides the basic network connection to the mobile stations. The \nbasic part of the Network Subsystem is the Mobile Service Switching Centre which provides \naccess to different networks like ISDN, PSTN, etc. It also consists of the Home Location \nRegister and the Visitor Location Register which provides the call routing and roaming \ncapabilities of GSM. \nIt also contains the Equipment Identity Register which maintains an account of all the mobile \nequipment wherein each mobile is identified by its own IMEI number. IMEI stands for \nInternational Mobile Equipment Identity. \n \nThe BSS or Base Station Subsystem section of the second generation GSM network \narchitecture is basically connected with the mobiles over the network. This subsystem \nincludes two elements which are discussed below. \n \nBase Transceiver Station (BTS) \nThe BTS (Base Transceiver Station) which is utilized within a GSM network includes the \nradio Tx, Rx & their related antennas to transmit, receive & directly converse through the \nmobiles. This station is the important element for every cell and it converses with the \nmobiles & the interface among the two is identified like the Um interface with related \nprotocols. \n \nBase Station Controller (BSC) \nThe BSC (base station controller) is used to form the next phase reverse into the GSM \ntechnology. This controller is used to control a collection of base transceiver stations & it is \nfrequently co-located through one of the transceiver stations within the group. This controller \nmanages the resources of radio to control different items like handover in the collection of \nBTSs, assigns channels. It converses with the Base Transceiver Stations over Abis interface. \nThe subsystem element in the base station of the GSM network uses the radio allowable \ntechnology to allow a number of operators to right to use the system concurrently. Every \n",
        "images": []
    },
    "213": {
        "text": "lOMoAR cPSD|26885763 \n \n213 | P a g e  \n \nchannel supports up to 8 operators by allowing a base station to include different channels; a \nhuge number of operators could be accommodated through every base station. \nThese are located carefully through the provider of the network to allow whole area \ncoverage. This area can be enclosed with a base station that is often being called a cell. \nBecause it is not achievable to stop the signals from overlapping into the nearby cells and \nchannels which are used in single-cell are not utilized in the next. \n \nMobile Station \nIt is the mobile phone which consists of the transceiver, the display, and the processor and is \ncontrolled by a SIM card operating over the network. \n \nThe MS (Mobile stations) or ME (mobile equipment) are most generally identified \nthrough cell otherwise mobile phones which are the part of a GSM mobile communications \nn/w that the operator observes & operates. At present, their dimension has reduced radically \nwhereas the functionality level has very much increased. And one more benefit is that the \ntime among charges has drastically enlarged. There are different elements to the mobile \nphone, though the two essential elements are the hardware & the SIM. \n \nThe hardware includes the major elements of the mobile phone like the case, display, \nbattery, & the electronics utilized to produce the signal & process the data receiver to be \nbroadcasted. \nThe mobile station includes a number called the IMEI. This can be set up on the mobile \nphone while manufacturing & it cannot be modified. \nIt is accessed by the network during registration to check whether the equipment has been \nreported as stolen. \n \nThe SIM (Subscriber Identity Module) card includes the data which gives the user \nidentity toward the network. And also, it includes different information like a number called \nthe IMSI (International Mobile Subscriber Identity). When this IMSI is used in the SIM card, \nthe mobile user could simply change mobiles by moving the SIM from one mobile to \nanother. \nSo mobile changing is easy without changing the same mobile number means that people \nwould frequently improve, thus making a further income stream for the providers of network \n& serving to enhance the total financial victory of GSM. \n \nOperation and Support Subsystem (OSS) \nThe operation support subsystem (OSS) is a part of the complete GSM network \narchitecture. This is connected to the NSS & the BSC components. This OSS is mainly used \nto control the GSM network & the BSS traffic load. It should be noted down that when the \nnumber of BS enhances through the subscriber population scaling then some of the \n",
        "images": []
    },
    "214": {
        "text": "lOMoAR cPSD|26885763 \n \n214 | P a g e  \n \npreservation tasks are moved to the base transceiver stations so that the ownership cost of the \nsystem can be reduced. \n \nThe GSM network architecture of 2G mainly follows a logical technique of operation. \nThis is very simple as compared with present architectures of mobile phone network which \nutilize software-defined units to allow extremely supple operation. But the architecture of 2G \nGSM will demonstrate the voice & operational fundamental functions that are required & \nhow they arranged together. When the GSM system is digital, then the network is a data \nnetwork. \n \nFeatures of GSM Module \nThe features of the GSM module include the following. \n• \nImproved spectrum efficiency \n• \nInternational roaming \n• \nCompatibility with integrated services digital network (ISDN) \n• \nSupport for new services. \n• \nSIM phonebook management \n• \nFixed dialing number (FDN) \n• \nReal-time clock with alarm management \n• \nHigh-quality speech \n• \nUses encryption to make phone calls more secure \n• \nShort message service (SMS) \nThe security strategies standardized for the GSM system make it the most secure \ntelecommunications standard currently accessible. Although the confidentiality of a call and \nsecrecy of the GSM subscriber is just ensured on the radio channel, this is a major step in \nachieving end-to-end security. \n \nGSM Modem \nA GSM modem is a device that can be either a mobile phone or a modem device that \ncan be used to make a computer or any other processor communicate over a network. A \nGSM modem requires a SIM card to be operated and operates over a network range \nsubscribed by the network operator.  It can be connected to a computer through serial, USB, \nor Bluetooth connection. \n \nA GSM modem can also be a standard GSM mobile phone with the appropriate cable \nand software driver to connect to a serial port or USB port on your computer. GSM modem \nis usually preferable to a GSM mobile phone. The GSM modem has a wide range of \napplications in transaction terminals, supply chain management, security applications, \nweather stations, and GPRS mode remote data logging. \n \n",
        "images": []
    },
    "215": {
        "text": "lOMoAR cPSD|26885763 \n \n215 | P a g e  \n \nWorking of GSM Module \nFrom the below circuit, a GSM modem duly interfaced to the MC through the level \nshifter IC Max232. The SIM card mounted GSM modem upon receiving digit command by \nSMS from any cell phone sends that data to the MC through serial communication. While the \nprogram is executed, the GSM modem receives the command ‘STOP’ to develop an output at \nthe MC, the contact point of which are used to disable the ignition switch. \n \nThe command so sent by the user is based on an intimation received by him through the \nGSM modem ‘ALERT’ a programmed message only if the input is driven low. The complete \noperation is displayed over a 16×2 LCD display. \n \nGMS Modem Circuit \n \nDifference between GSM mobile and GSM/GPRS module \nA GSM mobile is a complete system in itself with embedded processors that are \ndedicated to provide an interface between the user and the mobile network. The AT \ncommands are served between the processors of the mobile termination and the terminal \nequipment. The mobile handset can also be equipped with a USB interface to connect with a \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_215_img_1.jpeg"
        ]
    },
    "216": {
        "text": "lOMoAR cPSD|26885763 \n \n216 | P a g e  \n \ncomputer, but it may or may not support AT commands from the computer or an external \nprocessor/controller. \n  \nThe GSM/GPRS module, on the other hand, always needs a computer or external \nprocessor/controller to receive AT commands from. GSM/GPRS module itself does not \nprovide any interface between the user and the network, but the computer to which module is \nconnected is the interface between user and network. \n  \nAn advantage that GSM/GPRS modules offer is that they support concatenated SMS which \nmay not be supported in some GSM mobile handsets. Also some mobile handsets can’t \nreceive MMS when connected to a computer. \n   \nApplications of GSM/GPRS module \nThe GSM/GPRS module demonstrates the use of AT commands. They can feature all the \nfunctionalities of a mobile phone through computer like making and receiving calls, SMS, \nMMS etc. These are mainly employed for computer based SMS and MMS services. \n  \n4.8. Raspberry Pi Operating Systems \nRaspberry Pi is a low-cost pocket computer that is very economical to own. It is \nabout the size of an ATM Card and can work as a fully functional computer in certain normal \nuse cases, like working with simple applications, playing low-end games, etc. It was first \nreleased in 2012 by the Raspberry Pi foundation with the aim to provide easy access to \ncomputing education to everyone. It can cost as less as 5$ to a maximum price \nof 100$ (which is rare). \n \nScope \nwe will be understanding Operating systems that can be installed on a Raspberry Pi. \n• \nWe'll learn about What an operating system in general is. \n• \nWe'll go through a Variety of Operating Systems that a Raspberry Pi can run. \nIntroduction \nAs read above, Raspberry Pi is a very low-cost computer that comes along with the \nadvantage of portability. However, being in such a small form factor, it gets bounded by the \ntype of hardware to use in making it; hence, it will be significantly tough to run regular \noperating systems on it. \n \nDue to this, specific operating systems were designed to power a Raspberry Pi; some of them \nwere entirely new, while some originated from existing popular operating systems. Most of \nthe Raspberry Pi OS is Linux based, but it also has windows 10-based Raspberry Pi \nOS (Windows 10 IoT core) built explicitly for low-powered devices like this. \n \n",
        "images": []
    },
    "217": {
        "text": "lOMoAR cPSD|26885763 \n \n217 | P a g e  \n \nWhat is an Operating System? \nThe technical definition is An operating system is an interface between the hardware of a \nmachine and the user who is using it, but what does this really mean? It means it is \nbasically the medium using which we communicate with our computer machine. It does not \nmatter if we have the fastest system in the world; at the end of the day, that is just hardware, \nan object; and we do not know how to work with it, so we need some medium that works as \nan intermediate between us and the computer, i.e., when we press ctrl on our keyboard, it \nshould instruct the computer what to react based on that; when we want to open some \napplication, it should provide us a way to do so, by listing all the available applications on \nthe system. \n \nMeaning an operating system is a software program that helps us to use and to connect with \nthe computer hardware. For example, if we want to use our mouse or keyboard, only with the \nhelp of an OS we can do that; if we want to install some program on our computer, we would \nbe needing an OS; if we want to create a file, we need an OS; we want to delete a file, we \nwould again be needing an OS, i.e., without an operating system we cannot use the computer \nhardware, we would be needing some underlying software, i.e., some operating system, using \nwhich we would do so. \n \n \nWhat is a Raspberry Pi Operating System? \nNow, what is Raspberry Pi operating system? Before that, let's first try to understand what \nRaspberry Pi is. Raspberry Pi is a small, low-cost computer, and its size is about the size of \nan ATM card, which is developed by the Raspberry Pi foundation. The organization's \nmission is to educate people in computing and to provide easier access to computer \neducation. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_217_img_1.jpeg"
        ]
    },
    "218": {
        "text": "lOMoAR cPSD|26885763 \n \n218 | P a g e  \n \n \nThe above image is a picture of a Raspberry Pi; we can see that there are various ports \navailable in it on which different devices can be mounted and used. \n \nIt was first launched in 2012, and from then onwards, various variations of it have been \nlaunched. The original Raspberry Pi had a single-core 700mhz CPU and a 256MB of RAM, \nbut it has evolved a lot since then; today, we have a quad-core Raspberry Pi with a clock \nspeed of around 1.5Ghz and up to 4GB of RAM. Surprisingly the cost of Raspberry Pi has \nalways been less than 100 USD. In fact, the Raspberry Pi Zero (an even low-cost version of \nregular Raspberry Pi) costs as less as 5 USD. A full-fledged general-purpose CPU under 5$, \nthat's what the organization's mission is \"Aiming to provide people easier and low-cost \naccess to the computers.\" \n \nRaspberry Pi is used by people all around the world in learning how to program, build \nhardware projects, do home automation, and implement Kubernetes clusters, and it is even \ngetting used in some industrial applications. Raspberry Pi is a very economical computer that \nruns Linux Operating System. \n \nNow, let's talk about which specific distribution of Linux Raspberry Pi uses. Raspberry Pi \nofficially recommends the use of the Raspbian Operating System. It is a Debian-based OS, \nexplicitly made for Raspberry Pi and hence its name Raspbian. \nExplore free courses by our top instructorsView All \n \nTARUN LUTHRA \nJava Course - Mastering the Fundamentals \n56k+ enrolled \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_218_img_1.jpeg"
        ]
    },
    "219": {
        "text": "lOMoAR cPSD|26885763 \n \n219 | P a g e  \n \nRAHUL JANGHU \nPython Certification Course: Master the essentials \n42k+ enrolled \n \nPRATEEK NARANG \nC++ Course: Learn the Essentials \n29k+ enrolled \n35,262+ learners have attended these Courses. \n \nRaspbian \nRaspbian or Raspberry Pi OS is a Linux-based operating system built specifically for \nRaspberry Pi. It is packed with all the necessary tools and features that are required for day-\nto-day use. It will possibly run on every kind of Raspberry Pi board with a few exceptions, \nlike the Raspberry Pi's pico edition, because of its far smaller form factor and computing \npower. \n \nNOOBS \nNew Out Of the Box Software, or simply NOOBS is an operating system installer for \nRaspberry Pi, delivered primarily on an SD card, which contains a variety of operating \nsystems, out of which we can choose which one we want to install on our Raspberry Pi. It is \nmade for people who are absolutely new to the Raspberry Pi and do not want to deal with the \ncomplex setting up process of burning an OS image on an SD card. NOOBS is provided \nalong with every new Raspberry Pi at the time of its purchase. \n \nWith NOOBS, the user only needs to connect their Raspberry Pi to a display screen and a \nkeyboard and then power it up; the NOOBs will boot. There we can select which operating \nsystem we want to install, and NOOBS will install the respective OS on the same SD card \nwithin a few minutes. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_219_img_1.jpeg"
        ]
    },
    "220": {
        "text": "lOMoAR cPSD|26885763 \n \n220 | P a g e  \n \n \n \nOther Operating Systems \nLet's now look at some of the other Operating systems apart from the Raspbian OS, which \ncan be booted on the Raspberry Pi. \n \nMinibian \nWhile Raspbian OS is very lightweight as far as we talk about operating systems, but if we \nwant something even more straightforward, then we can go for Minibian OS. It is a minimal \nversion of Raspbian for Raspberry Pi machines. The now-going version of minibian is based \non the recent Raspbian build and will run on all the versions of Raspberry Pi. Minibian \ndiffers from Raspbian in a number of ways, but the main difference is it is built more for \nelectronics people instead of those who are interested in making a full-fledged computer. \nMinibian includes the core system and some fundamental utilities like web servers, some \nelectronics applications, etc. Notably, it does not include a Graphical interface for \ninteraction, which makes it an excellent choice for embedded projects. The result then is, we \nhave a capable and working operating system in less than 500MB which merely uses 30MB \nof RAM. \n \nRaspbian Lite \nIt is also a lightweight operating system for Raspberry Pi with a minimal set of packages. It \nis advised only for experienced users who are able to establish ssh connections and remote \nmanagement using the command line, as it does not includes the GUI interface. It is more \nlike a command line-based operating system where we would be needing to type commands \nto control our Raspberry Pi computer. One advantage of this is that it can run on a very low \namount of CPU and RAM. It should be noted that Raspbiain lite OS can also be converted \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_220_img_1.jpeg"
        ]
    },
    "221": {
        "text": "lOMoAR cPSD|26885763 \n \n221 | P a g e  \n \ninto a complete desktop environment with a GUI interface by installing the necessary \npackages. \n \nRISC OS \nRISC OS is an open-source OS initially developed in Cambridge in the 1980s and was the \nfirst operating system for ARM processors. It is neither related to Linux, Windows, or any \nother operating system; hence, diving into it will ignore our previous operating system \nexperiences. Understanding the RISC OS will be a completely different thing, and it will take \ntime for us to get used to it. \n \nWindows IoT Core \nIt is a version of Windows OS, specifically windows 10, built explicitly for Raspberry Pi. It \nis helpful for windows enthusiasts who wish to utilize the Raspberry Pi environment to \ndevelop their projects. It is mostly used to construct and build IoT prototype requirements \nbased on windows 10. This version of Raspberry Pi OS lays emphasis on the device mainly \non connectivity, security, cloud integration, etc., regions. \n \nUbuntu Mate \nUbuntu Mate is a free and open-source operating system of raspberry pi that specifies low-\nperformance devices as its design requirements, meaning it works seamlessly on low-power \nor old appliances. It is a flavor of Ubuntu that uses the Mate desktop environment. It \nprioritizes pre-packaging the apt package manager into its software deployment and talking \nabout the communication to remote workstations; ubuntu MATE is dependable. To run it on \na Raspberry Pi device, a 4GB sd card is all that is required. It should also be noted that \nubuntu mate OS is consistently maintained and updated by its developers. It can be \ndownloaded from the official website of Ubuntu MATE. \n \nGentoo Linux \nGentoo Linux is an open-source Linux-based lightweight operating system of the raspberry \npi. Its built-in portage package manager makes the package installation straightforward and \neasy using emerge instead of apt installer. Moreover, it offers unique adaptability, which \nmakes it an ideal Linux distribution for these low-powered devices. A 4GB SD Card will be \nenough to fulfill the device requirements of Gentoo OS on Raspberry Pi. \n \nSARPI \nSlackware ARM, or SARPI, is a well-known operating system in the Raspberry Pi \ncommunity. It is often regarded as one of the substantial operating systems to run on the \nRaspberry Pi. This is because it has a very simple-to-implement software architecture. The \nboot time of SARPI OS is really less, making it live in less than 30 seconds of time. \n \n",
        "images": []
    },
    "222": {
        "text": "lOMoAR cPSD|26885763 \n \n222 | P a g e  \n \nFreeBSD \nFreeBSD is an open-source Unix-like operating system derived from the Berkeley Software \nDistribution or BSD, which was based on the research of Unix (early versions of the Unix \noperating system). It works seamlessly with powerful hardware. Its software design makes it \na significantly great OS to interact with servers, desktop PCs, IoT devices, cloud computing, \netc. The FreeBSD OS can run on as less as a Raspberry Pi with 512MB of RAM; it can also \nbe a perfect choice for one's Raspberry Pi system. \n \nLakka \nA free, open-source, and lightweight operating system that can turn any PC into a full-\nfledged gaming console without the keyboard and mouse. It is basically used to set up \nemulators on systems like Raspberry Pi. \n \nOpenELEC \nOpen Embedded Linux Entertainment Center or OpenELEC. It is a minimal-sized OS, often \nreferred to as Just Enough Operating System or JeOS. If one is aware of the Kodi Media \nCenter, which is a tool for managing media files. The primary purpose of this OS is to \ntransform the running system into Kodi. \n \nOSMC \nOSMC is a free and open-source operating system of raspberry pi that stands for Open \nSource Media Center. It is simple and easy to work with the program that can independently \nsupply Kodi Operating System functions like media file format management. Its user-\nfriendly interface is simple and sophisticated, and its built-in image library contributes to its \nextensive customization possibilities. Therefore, it is an excellent choice if we majorly want \nto handle media materials on the Raspberry Pi system. \n \nRaspBSD \nRaspBSD is a special kind of FreeBSD operating system of raspberry pi and similar systems. \nIt is an open-source OS software that contains the FreeBSD 11 image. The live image of \nRaspBSD features FreeBSD with the pre-installed Openbox window manager and the LXDE \ndesktop environment. RaspBSD is based on FreeBSD's current tree. \n \nLinutop \nLinutop is a Raspbian OS-based Linux operating system of the raspberry pi. It's software \nsecurity makes it the ideal choice for web kiosks and digital signage players. Moreover, it \nobligates its features and performance specifications to business users who wish for \nRaspberry Pi's digital signage and internet stall solutions. \n \nKali Linux \n",
        "images": []
    },
    "223": {
        "text": "lOMoAR cPSD|26885763 \n \n223 | P a g e  \n \nKali is a Debian-based operating system particularly made for penetration testing. It comes \nwith both the 32bit and 64bit architecture and is also one of the most feature-rich OS we have \ntalked about so far. It has all the necessary tools needed for penetration testing installed by \ndefault. In addition, Kali's community is very effective and helpful. With Kali Linux, a \nRaspberry Pi device can become a toolset for penetration inside one's pocket. \n \nDomoticz \nDomoticz is a free and open-source home automation system that allows users to design and \nmonitor various devices like switches, sensors, and meters for temperature, power, etc. \nDomoticz's main user interface is an expandable and scalable HTML5 frontend. Some of its \noutstanding features are its interactiveness with any browser, extensive logging, support for \nexternal devices, and auto-learning for sensors and switches. \n \nOpenSUSE \nThe openSUSE project is a global initiative based on the RPM-based Linux distribution, \nwhich promotes the adoption of Linux OS everywhere by developing desktop and server \noperating systems. OpenSUSE operating system for Raspberry Pi is a part of the openSUSE \nproject. The initiative's primary goal is to educate people about Linux. The openSUSE OS is \ndeveloped, distributed, and maintained by an open-source community. \n \nRetroPie \nRetroPie is an emulator which can be used to play some low-end games on one's Raspberry \nPi. It is a Debian-based open-source software library. It is elementary to set up and has broad \ncommunity support. RetroPie uses the Emulation Station frontend RetroArch etc., which \nmakes it possible to play old-school console games, nostalgic arcade games, and classic pc \ngames. To add more to it, RetroPie sits on the top of the Raspberry Pi Lite Operating System, \nwhich omits the PIXEL (Pi improved XWindows Environment Lightweight) environment. \nAnd along with that, it can also be installed on top of a fully working Raspberry Pi OS. \nRetroPie is a popular emulation platform for playing retro games on the Raspberry Pi. \n \nArch Linux ARM \nArch Linux ARM is an easy-to-operate and lightweight Linux distribution, which is the \nofficial port of the Arch Linux OS. Arch Linux ARM maintains the initial philosophy of \nArch developers, which is emphasizing simplicity, ownership, and use. It is built explicitly \nfor the processors which support ARM architecture. Using this, the users will have complete \ncontrol of the system and can modify and customize it as per their needs. It could be an ideal \nchoice for low-powered systems like Raspberry Pi. \n \nUbuntu Core \n",
        "images": []
    },
    "224": {
        "text": "lOMoAR cPSD|26885763 \n \n224 | P a g e  \n \nUbuntu core is essentially designed to meet the needs of IoT devices. It is a minimal version \nof Ubuntu which requires less storage and memory to function. As Ubuntu is one of the most \npopular Linux distributions, hence its community has plenty of support and resources for \nusers who are interested in ubuntu core. It is simple to set up and can be installed using the \nubuntu snappy core installer. \n \nBatocera.Linux \nBatocera is a widespread open-source Linux distribution built primarily for retro gaming. \nWhile it could run on some standard computer systems, but is designed explicitly for \nmicrocomputers like Raspberry Pi. People who want to transform their Raspberry Pi \ncomputer into a gaming console are recommended to download Batocera.Linux \n \nBMC64 \nBMC64 is a free and open-source system that is a bare metal version of VICE's C64 \nemulator. BMC64 proves to be an appropriate operating system for devices like Raspberry \nPi. The reasons are it has the GIPO pins to connect simple keyboards and joysticks, it offers \nPCB scanning, real 50Hz/60Hz scrolling, low audio and video latency, an optimal startup \ntime, etc., helpful features. \n \nNotes:- \n• \nRaspberry Pi is a low-cost, economical pocket-sized computer, the size of an ATM \nCard. \n• \nIt was developed by Raspberry Pi Foundation in 2012with the aim of providing \npeople easy access to computing and computer education. \n• \nDue to its small form factor, it is bounded by certain hardware limitations, and hence \nrunning regular operating systems on it will be comparatively effortful. \n• \nTherefore, specific operating systems were designed to power devices like Raspberry \nPi. \n• \nMost of the operating systems for Raspberry Pi are Linux-based, but certain are not. \nFor example - Windows 10 IoT core (windows 10-based Raspberry Pi Operating \nSystem), RISC OS (a completely different OS model, which is neither Linux nor \nwindows), etc. \n• \nRaspberry Pi devices are mainly used as portable computers used for building \nhardware projects, IoT applications, home automation, etc. \n• \nAlong with all these, we can also use a Raspberry Pi to play games, listen to music, \ndo regular programming, etc. \n• \nRaspberry Pi could be a great tool if one wants the power of an on-the-go computer \nalong with the advantage of great portability. \n \n \n",
        "images": []
    },
    "225": {
        "text": "lOMoAR cPSD|26885763 \n \n225 | P a g e  \n \n4.9. Raspberry-Pi Architecture  \nWhat is a Raspberry Pi? Raspberry pi is the name of the “credit card-sized \ncomputer board” developed by the Raspberry pi foundation, based in the U.K. It gets plugged \nin a TV or monitor and provides a fully functional computer capability. It is aimed at \nimparting knowledge about computing to even younger students at the cheapest possible \nprice. Although it is aimed at teaching computing to kids, but can be used by everyone \nwilling to learn programming, the basics of computing, and building different projects by \nutilizing its versatility.  \n \nRaspberry Pi is developed by Raspberry Pi Foundation in the United Kingdom. The \nRaspberry Pi is a series of powerful, small single-board computers. \n \nRaspberry Pi is launched in 2012 and there have been several iterations and variations \nreleased since then. \n \nVarious versions of Raspberry Pi have been out till date. All versions consist of a Broadcom \nsystem on a chip (SoC) with an integrated ARM-compatible CPU and on-chip graphics \nprocessing unit (GPU). \n \nThe original device had a single-core Processor speed of device ranges from 700 MHz to 1.2 \nGHz and a memory range from 256 MB to 1 GB RAM. \n \nTo store the operating system and program memory Secure Digital (SD) cards are used. \nRaspbian OS which is a Linux operating system is recommended OS by Raspberry Pi \nFoundation. Some other third party operating systems like RISC OS Pi. Diet Pi, Kali, Linux \ncan also be run on Raspberry Pi. \n \nUsed: \nIt also provides a set of general purpose input/output pins allowing you to control electronic \ncomponents for physical computing and explore the Internet of Things (IOT). \nRaspberry pi Diagram:  \n",
        "images": []
    },
    "226": {
        "text": "lOMoAR cPSD|26885763 \n \n226 | P a g e  \n \n \n \n Raspberry Pi model – \nThere have been many generations of raspberry Pi from Pi 1 to Pi 4. There is generally a \nmodel A and model B. Model A is a less expensive variant and it trends to have reduced \nRAM and dual cores such as USB and Ethernet. \n \nList of Raspberry pi models and releases year: \n1. pi 1 model B – 2012  \n2. pi 1 model A – 2013  \n3. pi 1 model B+ -2014  \n4. pi 1 model A+ – 2014  \n5. Pi 2 Model B – 2015 \n6. Pi 3 Model B- 2016 \n7. Pi 3 Model B+ -2018 \n8. Pi 3 Model A+ -2019 \n9. Pi 4 Model A – 2019 \n10. Pi Model B – 2020 \n11. Pi 400 – 2021 \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_226_img_1.jpeg"
        ]
    },
    "227": {
        "text": "lOMoAR cPSD|26885763 \n \n227 | P a g e  \n \n \nSpecs of the Computer: – The computer has a quad-core ARM processor that doesn’t \nsupport the same instruction as an X86 desktop CPU. It has 1GB of RAM, One HDMI port, \nfour USB ports, one Ethernet connection, Micro SD slot for storage, one combined 3.5mm \naudio/video port, and a Bluetooth connection. It has got a series of input and output pins that \nare used for making projects like – home security cameras, Encrypted Door lock, etc. \n \nVersatility of Raspberry Pi: – It is indeed a versatile computer and can be utilized by \npeople from all age groups, it can be used for watching videos on YouTube, watching \nmovies, and programming in languages like Python, Scratch, and many more. As mentioned \nabove it has a series of I/O pins that give this board the ability to interact with its \nenvironment and hence can be utilized to build really cool and interactive projects.  \nExamples of projects: – It can be turned into a weather station by connecting some \ninstruments to it for check the temperature, wind speed, humidity etc… It can be turned into \na home surveillance system due to its small size; by adding some cameras to it the security \nnetwork will be ready. If you love reading books it can also become a storage device for \nstoring thousands of eBooks and also you can access them through the internet by using this \ndevice.  \n \nBuild Physical Projects With Python on the Raspberry Pi \nThe Raspberry Pi is one of the leading physical computing boards on the market. From \nhobbyists building DIY projects to students learning to program for the first time, people use \nthe Raspberry Pi every day to interact with the world around them. Python comes built in on \nthe Raspberry Pi, so you can take your skills and start building your own Raspberry Pi \nprojects today. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_227_img_1.jpeg"
        ]
    },
    "228": {
        "text": "lOMoAR cPSD|26885763 \n \n228 | P a g e  \n \nGetting to Know the Raspberry Pi \nThe Raspberry Pi is a single-board computer developed by the Raspberry Pi Foundation, a \nUK-based charity organization. Originally designed to provide young people with an \naffordable computing option to learn how to program, it has developed a massive following \nin the maker and DIY communities because of its compact size, full Linux environment, and \ngeneral-purpose input–output (GPIO) pins. \n \nWith all the features and capabilities that are packed into this small board, there’s no \nshortage of projects and use cases for the Raspberry Pi. \n \nIf you can think of a project that would benefit from having a credit card–sized computer \nattached to it, then someone has probably used a Raspberry Pi to do it. The Raspberry Pi is a \nfantastic way to bring your Python project ideas to life. \nRaspberry Pi Board Overview \n \nBelow is the board layout of the Raspberry Pi 4. While this layout is slightly different from \nprevious models of the Raspberry Pi, most of the connections are the same. The setup \ndescribed in the next section should be the same for both a Raspberry Pi 3 and a Raspberry Pi \n4: \n \n \nThe Raspberry Pi 4 board contains the following components: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_228_img_1.jpeg"
        ]
    },
    "229": {
        "text": "lOMoAR cPSD|26885763 \n \n229 | P a g e  \n \n• \nGeneral-purpose input–output pins: These pins are used to connect the Raspberry \nPi to electronic components. \n• \nEthernet port: This port connects the Raspberry Pi to a wired network. The \nRaspberry Pi also has Wi-Fi and Bluetooth built in for wireless connections. \n• \nTwo USB 3.0 and two USB 2.0 ports: These USB ports are used to connect \nperipherals like a keyboard or mouse. The two black ports are USB 2.0 and the two \nblue ports are USB 3.0. \n• \nAV jack: This AV jack allows you to connect speakers or headphones to the \nRaspberry Pi. \n• \nCamera Module port: This port is used to connect the official Raspberry Pi Camera \nModule, which enables the Raspberry Pi to capture images. \n• \nHDMI ports: These HDMI ports connect the Raspberry Pi to external monitors. The \nRaspberry Pi 4 features two micro HDMI ports, allowing it to drive two separate \nmonitors at the same time. \n• \nUSB power port: This USB port powers the Raspberry Pi. The Raspberry Pi 4 has \na USB Type-C port, while older versions of the Pi have a micro-USB port. \n• \nExternal display port: This port is used to connect the official seven-inch Raspberry \nPi touch display for touch-based input on the Raspberry Pi. \n• \nmicroSD card slot (underside of the board): This card slot is for the microSD card \nthat contains the Raspberry Pi operating system and files. \n \nPeople often wonder what the difference is between a Raspberry Pi and an Arduino. The \nArduino is another device that is widely used in physical computing. While there is some \noverlap in the capabilities of the Arduino and the Raspberry Pi, there are some distinct \ndifferences. \n \nThe \nArduino \nplatform provides \na \nhardware \nand \nsoftware \ninterface \nfor \nprogramming microcontrollers. A microcontroller is an integrated circuit that allows you to \nread input from and send output to electronic components. Arduino boards generally have \nlimited memory, so they’re often used to repeatedly run a single program that interacts with \nelectronics. \n \nThe Raspberry Pi is a general-purpose, Linux-based computer. It has a full operating system \nwith a GUI interface that is capable of running many different programs at the same time. \nThe Raspberry Pi comes with a variety of software preinstalled, including a web browser, an \noffice suite, a terminal, and even Minecraft. The Raspberry Pi also has built-in Wi-Fi and \nBluetooth to connect to the Internet and external peripherals. \n \nFor running Python, the Raspberry Pi is often the better choice, as you get a full-fledged \nPython installation out of the box without any configuration. \n",
        "images": []
    },
    "230": {
        "text": "lOMoAR cPSD|26885763 \n \n230 | P a g e  \n \n4.10. Raspberry Pi Programming \n\"Hello world\" is the beginning of everything when it comes to computing and \nprogramming. It's the first thing you learn in a new programming language, and it's the way \nyou test something out or check to see if something's working because it's usually the \nsimplest way of testing simple functionality. \nWarriors of programming language wars often cite their own language's \"hello world\" \nagainst that of another, saying theirs is shorter or more concise or more explicit or \nsomething. Having a nice simple readable \"hello world\" program makes for a good intro for \nbeginners learning your language, library, framework, or tool.  \nI thought it would be cool to create a list of as many different \"hello world\" programs as \npossible that can be run on the Raspberry Pi using its Raspbian operating system, but without \ninstalling any additional software than what comes bundled when you download it from the \nRaspberry Pi website. I've created a GitHub repository of these programs, and I've explained \n10 of them for you here. \n1. Scratch \nScratch is a graphical block-based programming environment designed for kids to learn \nprogramming skills without having to type or learn the synax of a programming language. \nThe \"hello world\" for Scratch is simple—and very visual! \n1. Open Scratch 2 from the main menu. \n2. Click Looks. \n3. Drag a say Hello! block into the workspace on the right. \n4. Change the text to Hello world. \n \n5. Click on the block to run the code. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_230_img_1.png"
        ]
    },
    "231": {
        "text": "lOMoAR cPSD|26885763 \n \n231 | P a g e  \n \n \n2. Python \nPython is a powerful and professional language that's also great for beginners— and it's lots \nof fun to learn. Because one of Python's main objectives was to be readable and stick to \nsimple English, its \"hello world\" program is as simple as possible. \n1. Open Thonny Python IDE from the main menu. \n2. Enter the following code: \n \nprint(\"Hello world\")  \n3. Save the file as hello3.py. \n4. Click the Run button. \n \nopensource.com \n3. Ruby/Sonic Pi \nRuby is another powerful language that's friendly for beginners. Sonic Pi, the live coding \nmusic synth, is built on top of Ruby, so what users actually type is a form of Ruby. \n1. Open Sonic Pi from the main menu. \n2. Enter the following code: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_231_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_231_img_2.png"
        ]
    },
    "232": {
        "text": "lOMoAR cPSD|26885763 \n \n232 | P a g e  \n \nputs \"Hello world\"  \n3. Press Run. \n \nUnfortunately, \"hello world\" does not do Sonic Pi justice in the slightest \nAlternatively, to using the Sonic Pi application for this example, you can write Ruby code in \na text editor and run it in the terminal: \n1. Open Text Editor from the main menu. \n2. Enter the following code: \nputs \"Hello world\"  \n3. Save the file as hello.rb in the home directory. \n4. Open Terminal from the main menu. \n5. Run the following command: \nruby hello.rb  \n \n4. JavaScript \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_232_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_232_img_2.jpeg"
        ]
    },
    "233": {
        "text": "lOMoAR cPSD|26885763 \n \n233 | P a g e  \n \nThis is a bit of a cheat as I just make use of client-side JavaScript within the web browser \nusing the Web Inspector console, but it still counts! \n1. Open Chromium Web Browser from the main menu. \n2. Right-click the empty web page and select Inspect from the context menu. \n3. Click the Console tab. \n4. Enter the following code: \nconsole.log(\"Hello world\")  \n5. Press Enter to run. \n \nYou can also install NodeJS on the Raspberry Pi, and write server-side JavaScript, but that's \nnot available in the standard Raspbian image. \n5. Bash \nBash (Bourne Again Shell) is the default Unix shell command language in most Linux \ndistributions, including Raspbian. You can enter Bash commands directly into a terminal \nwindow, or script them into a file and execute the file like a programming script. \n1. Open Text Editor from the main menu. \n2. Enter the following code: \necho \"Hello world\"  \n3. Save the file as hello.sh in the home directory. \n4. Open Terminal from the main menu. \n5. Run the following command: \n6. \nash hello.sh  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_233_img_1.png"
        ]
    },
    "234": {
        "text": "lOMoAR cPSD|26885763 \n \n234 | P a g e  \n \n \nNote you'd usually see a \"hashbang\" at the top of the script (#!/bin/bash), but because I'm \ncalling this script directly using the bash command, it's not necessary (and I'm trying to keep \nall these examples as short as possible). \nYou'd also usually make the file executable with chmod +x, but again, this is not necessary \nas I'm executing with bash. \n6. Java \nJava is a popular language in industry, and is commonly taught to undergraduates studying \ncomputer science. I learned it at university and have tried to avoid touching it since then. \nApparently, now I do (very small amounts of) it for fun... \n1. Open Text Editor from the main menu. \n2. Enter the following code: \n3. public class Hello {  \n4.         public static void main(String[] args) {  \n5.             System.out.println(\"Hello world\");  \n6.         }  \n7.     }  \n8.         \n9. Save the file as Hello.java in the home directory. \n10. Open Terminal from the main menu. \n11. Run the following commands: \n12. \njavac Hello.java  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_234_img_1.jpeg"
        ]
    },
    "235": {
        "text": "lOMoAR cPSD|26885763 \n \n235 | P a g e  \n \njava Hello  \n \nI could almost remember the \"hello world\" for Java off the top of my head, but not quite. I \nalways forget where the String[] args bit goes, but it's obvious when you think about it... \n7. C \nC is a fundamental low-level programming language. It's what many programming languages \nare written in. It's what operating systems are written in. See for yourself&mdash:take a look \nat the source for Python and the Linux kernel. If that looks a bit hazy, get started with \"hello \nworld\": \n1. Open Text Editor from the main menu. \n2. Enter the following code: \n3. #include <stdio.h> \n4. int main() { \n5.     printf(\"Hello world\\n\"); \n} \n6. Save the file as hello.c in the home directory. \n7. Open Terminal from the main menu. \n8. Run the following commands: \n9. gcc -o hello hello.c  \n./hello  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_235_img_1.jpeg"
        ]
    },
    "236": {
        "text": "lOMoAR cPSD|26885763 \n \n236 | P a g e  \n \n \nNote that in the previous examples, only one command was required to run the code \n(e.g., python3 hello.py or ruby hello.rb) because these languages are interpreted rather than \ncompiled. (Actually Python is compiled at runtime but that's a minor detail.) C code is \ncompiled into byte code and the byte code is executed. \nIf you're interested in learning C, the Raspberry Pi Foundation publishes a book Learning to \ncode with C written by one of its engineers. You can buy it in print or download for free. \n8. C++ \nC's younger bother, C++ (that's C incremented by one...) is another fundamental low-level \nlanguage, with more advanced language features included, such as classes. It's popular in a \nrange of uses, including game development, and chunks of your operating system will be \nwritten in C++ too. \nOpen Text Editor from the main menu. \nEnter the following code: \n#include <iostream> \nusing namespace std; \nint main() { \n    cout << \"Hello world\\n\"; \n} \nSave the file as hello.cpp in the home directory. \nOpen Terminal from the main menu. \nRun the following commands: \n1. g++ -o hellopp hello.cpp  \n./hellocpp  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_236_img_1.jpeg"
        ]
    },
    "237": {
        "text": "lOMoAR cPSD|26885763 \n \n237 | P a g e  \n \n \nReaders familiar with C/C++ will notice I have not included the main function return values \nin my examples. This is intentional as to remove boilerplate, which is not strictly necessary. \n9. Perl \nPerl gets a lot of stick for being hard to read, but nothing much gets in the way of \nunderstanding its \"hello world\" program. So far, so good! \n1. Open Text Editor from the main menu. \n2. Enter the following code: \nprint \"Hello world\\n\"  \n3. Save the file as hello.pl in the home directory. \n4. Open Terminal from the main menu. \n5. Run the following command: \nperl hello.pl  \n \nAgain, I learned Perl at university, but unlike Java, I have managed to successfully avoid \nusing it. \n10. Python extras: Minecraft and the Sense HAT emulator \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_237_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_237_img_2.jpeg"
        ]
    },
    "238": {
        "text": "lOMoAR cPSD|26885763 \n \n238 | P a g e  \n \nSo that's nine different programming languages covered, but let's finish with a bit more \nPython. The popular computer game Minecraft is available for Raspberry Pi, and comes \nbundled with Raspbian. A Python library allows you to communicate with your Minecraft \nworld, so open Minecraft and a Python editor side-by-side for some fun hacking your virtual \nworld with code. \n1. Open Minecraft Pi from the main menu. \n2. Create and enter a Minecraft world. \n3. Press Tab to release your focus from the Minecraft window. \n4. Open Thonny Python IDE from the main menu. \n5. Enter the following code: \n6. from mcpi.minecraft import Minecraft  \n7.  \n8. mc = Minecraft.create()  \n9.  \nmc.postToChat(\"Hello world\")  \n10. Save the file as hellomc.py. \n11. Click the Run button. \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_238_img_1.jpeg"
        ]
    },
    "239": {
        "text": "lOMoAR cPSD|26885763 \n \n239 | P a g e  \n \nFinally, let's look at the Sense HAT Emulator. This tool provides a graphical representation \nof the Sense HAT. \nThe sense_emu Python library is identical to the sense_hat library except that its commands \nget executed in the emulator rather than on a physical piece of hardware. Because the Sense \nHAT includes an 8x8 LED display, we can use its show_message function to write \"hello \nworld\". \n1. Open another tab in Thonny and enter the following code: \n2. from sense_emu import SenseHat  \n3.  \n4. sense = SenseHat()  \n5.  \nsense.show_message(\"Hello world\")  \n6. Save the file as sense.py. \n7. Click the Run button. \n \n \nExample: \nPi Camera Module Interface with Raspberry Pi using Python \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_239_img_1.jpeg"
        ]
    },
    "240": {
        "text": "lOMoAR cPSD|26885763 \n \n240 | P a g e  \n \n \nPi Camera Module (v1.3) \nThe pi Camera module is a camera that can be used to take pictures and high definition \nvideo. \nRaspberry Pi Board has CSI (Camera Serial Interface) interface to which we can attach the \nPiCamera module directly. \nThis Pi Camera module can attach to the Raspberry Pi’s CSI port using a 15-pin ribbon \ncable. \nFeatures of Pi Camera \nHere, we have used Pi camera v1.3. Its features are listed below, \n• \nResolution – 5 MP \n• \nHD Video recording –     1080p @30fps, 720p @60fps, 960p @45fps and so on. \n• \nIt Can capture wide, still (motionless) images of a resolution 2592x1944 pixels \n• \nCSI Interface enabled. \n How to attach Pi Camera to Raspberry Pi? \nConnect Pi Camera to the CSI interface of the Raspberry Pi board as shown below, \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_240_img_1.jpeg"
        ]
    },
    "241": {
        "text": "lOMoAR cPSD|26885763 \n \n241 | P a g e  \n \n \n \nNow, we can use Pi Camera for capturing images and videos using Raspberry Pi. \nBefore using Pi Camera, we need to enable camera for its working. \nHow to Enable Camera functionality on Raspberry Pi \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_241_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_241_img_2.jpeg"
        ]
    },
    "242": {
        "text": "lOMoAR cPSD|26885763 \n \n242 | P a g e  \n \nFor enabling the camera in Raspberry Pi, open the raspberry pi configuration using the \nfollowing command, \nsudo raspi-config \nthen select Interfacing options in which select the camera option to enable its functionality. \nreboot Raspberry Pi. \nNow we can access the camera on Raspberry Pi. \nNow we can capture images and videos using Pi Camera on Raspberry Pi. \nExample \nCapture images and save it to the specified directory. \nWe can capture images using Python. Here, we will write a Python program to capture \nimages using Pi Camera on Raspberry Pi. \nHere, we have used picamera package(library) which provides different classes for \nRaspberry Pi. Out of which we are mainly interested in PiCamera class which is for camera \nmodule. \nPi Camera Python Program for Image Capture   \nCamera \nimport picamera \nfrom time import sleep \n#create object for PiCamera class \ncamera = picamera.PiCamera() \n#set resolution \ncamera.resolution = (1024, 768) \ncamera.brightness = 60 \ncamera.start_preview() \n#add text on image \ncamera.annotate_text = 'Hi Pi User' \nsleep(5) \n#store image \ncamera.capture('image1.jpeg') \n",
        "images": []
    },
    "243": {
        "text": "lOMoAR cPSD|26885763 \n \n243 | P a g e  \n \ncamera.stop_preview() \n Functions Used \nTo use picamera python based library we have to include it in our program as given below \nimport picamera \nThis picamera library has PiCamera class for the camera module. So, we have to create an \nobject for PiCamera class. \n PiCamera Class \nTo use Pi Camera in Python on Raspberry Pi, we can use PiCamera class which has different \nAPIs for camera functionality. We need to create object for PiCamera class. \nE.g.  \nCamera = picamera.PiCamera() \nThe above PiCamera class has different member variables and functions which we can access \nby simply inserting a dot (.) in between object name and member name. \nE.g.  \nCamera.resolution = (1080, 648) \n  \ncapture() \nIt is used to capture images using Pi Camera. \nE.g.  \nCamera.capture(“/home/pi/image.jpeg”) \nThe capture() function has different parameters which we can pass for different operations \nlike resize, format, use_video_port, etc. \nE.g.  \nCamera.capture(“/home/pi/image.jpeg”, resize=(720, 480)) \n resolution= (width,height) \nIt sets the resolution of the camera at which image captures, video records, and previews will \ndisplay. The resolution can be specified as (width, height) tuple, as a string \nformatted WIDTHxHEIGHT, or as a string containing commonly recognized display \nresolution names e.g. “HD”, “VGA”, “1080p”, etc. \nE.g. \n",
        "images": []
    },
    "244": {
        "text": "lOMoAR cPSD|26885763 \n \n244 | P a g e  \n \nCamera.resolution = (720, 480) \nCamera.resolution = “720 x 480” \nCamera.resolution = “720p” \nCamera.resolution = “HD” \n Annotate_text = “Text” \nIt is used to add text on images, videos, etc. \nE.g.  \nCamera.annotate_text = “Hi Pi User” \n start_preview() \nIt displays the preview overlay of the default or specified resolution. \nE.g.  \nCamera.start_preview() \n  \nstop_preview() \nIt is used to close the preview overlay. \nE.g.   \nCamera.stop_preview() \n Note: There are various APIs of PiCamera class. So, to know more API in detail you can \nrefer \nPiCamera APIs.  \nPi Camera Python Program for Video Recording \nimport picamera \nfrom time import sleep \ncamera = picamera.PiCamera() \ncamera.resolution = (640, 480) \nprint() \n#start recording using pi camera \ncamera.start_recording(\"/home/pi/demo.h264\") \n",
        "images": []
    },
    "245": {
        "text": "lOMoAR cPSD|26885763 \n \n245 | P a g e  \n \n#wait for video to record \ncamera.wait_recording(20) \n#stop recording \ncamera.stop_recording() \ncamera.close() \nprint(\"video recording stopped\") \nFunctions used \nWe have to create an object for PiCamera class. Here, we have create objects as camera. \nstart_recording() \nIt is used to start video recording and store it. \nE.g.  \nCamera.start_recording(‘demo.h264’) \nIt records video named demo of h264 format. \nwait_recording(timeout) \nWait on the video encoder for specified timeout seconds. \nE.g.  \nCamera.wait_recording(60) \n stop_recording() \nIt is used to stop video recording. \nE.g.  \nCamera.stop_recording() \nPlay Recorded Video \nTo open a video, we can use omxplayer by using the following command, \n omxplayer video_name \n \n \n \n \n",
        "images": []
    },
    "246": {
        "text": "lOMoAR cPSD|26885763 \n \n246 | P a g e  \n \n \n4.11. Interface a Raspberry Pi with an Arduino \n \n \nInterface a Raspberry Pi with an Arduino so the two boards can communicate with one \nanother. \n \nSometimes you may need to connect an Arduino to a Raspberry Pi. For example, if you have \nsensors, motors, and actuators, you can connect these to the Arduino and make the Arduino \nsend values to and from the Raspberry Pi. This way, we can separate the computing intensive \ntasks (done by the Raspberry Pi) and controlling tasks (done by the Arduino). \n \nwe will connect an Arduino to a Raspberry Pi and have the Arduino send “Hello from \nArduino” to the Raspberry Pi, and the Raspberry Pi will blink an LED upon receiving the \ncommand from the Arduino. \n \n \nFor communication, we will use simple serial communication over USB cable. \nSo, let’s get started! \n \nConnect the LED to pin number 11 as shown in the picture below. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_246_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_246_img_2.jpeg"
        ]
    },
    "247": {
        "text": "lOMoAR cPSD|26885763 \n \n247 | P a g e  \n \n \nTurn on the Raspberry Pi and open Python 3 in a new window. \n \nWrite the following code in the new window and save it. (Save to your desktop so you don't \nlose it.) \n \nimport serial \nimport RPi.GPIO as GPIO \nimport time \n \nser=serial.Serial(\"/dev/ttyACM0\",9600)  #change ACM number as found from ls \n/dev/tty/ACM* \nser.baudrate=9600 \ndef blink(pin): \n \nGPIO.output(pin,GPIO.HIGH)   \ntime.sleep(1)   \nGPIO.output(pin,GPIO.LOW)   \ntime.sleep(1)   \nreturn \n \nGPIO.setmode(GPIO.BOARD) \nGPIO.setup(11, GPIO.OUT) \nwhile True: \n \nread_ser=ser.readline() \nprint(read_ser) \nif(read_ser==\"Hello From Arduino!\"): \nblink(11) \nNow open Arduino IDE and upload the following code to your Arduino. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_247_img_1.jpeg"
        ]
    },
    "248": {
        "text": "lOMoAR cPSD|26885763 \n \n248 | P a g e  \n \nString data=\"Hello From Arduino!\"; \nvoid setup()  \n{ \n// put your setup code here, to run once: \nSerial.begin(9600); \n} \nvoid loop()  \n{ \n// put your main code here, to run repeatedly: \nSerial.println(data);//data that is being Sent \ndelay(200); \n} \n \n \nMake sure the code is uploaded to Arduino. \n \nIn your Raspberry Pi interface, be sure to enable Serial and I2C in PiConfig. \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_248_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_248_img_2.jpeg"
        ]
    },
    "249": {
        "text": "lOMoAR cPSD|26885763 \n \n249 | P a g e  \n \n \n \nNext, you'll need to restart your Raspberry Pi. Open the Terminal and execute these \ncommands: \n \nsudo apt-get install python-serial \n \nsudo pip install pyserial \nConnect your Arduino to your Raspberry Pi. \nExecute. \nls /dev/tty* \n \nThen find a line with /dev/ttyACM0 or something like /dev/ttyACM1 etc. (check for an \nACM with any number 0,1,2 etc.) \n \n \n \nOpen Python again and change ser=serial.Serial(“dev/ttyACM1”,9600) to the ACM number \nyou found. So, if in your case you got ACM0, the line should look like this: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_249_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_249_img_2.jpeg"
        ]
    },
    "250": {
        "text": "lOMoAR cPSD|26885763 \n \n250 | P a g e  \n \nser=serial.Serial(“dev/ttyACM0”,9600). Now run the program you just created in Python3. \nYou will see “Hello From Arduino!” in the Python terminal, and your LED should be \nblinking as well! \n \n4.12. Raspberry Pi GPIO Access \nGPIO (General Purpose Input Output) pins can be used as input or output and allows \nraspberry pi to connect with general purpose I/O devices. \n• \nRaspberry pi 3 model B took out 26 GPIO pins on board. \n• \nRaspberry pi can control many external I/O devices using these GPIO’s. \n• \nThese pins are a physical interface between the Pi and the outside world. \n• \nWe can program these pins according to our needs to interact with external devices. \nFor example, if we want to read the state of a physical switch, we can configure any \nof the available GPIO pins as input and read the switch status to make decisions.  We \ncan also configure any GPIO pin as an output to control LED ON/OFF. \n• \nRaspberry Pi can connect to the Internet using on-board Wi-Fi or Wi-Fi USB adapter. \nOnce the Raspberry Pi is connected to the Internet then we can control devices, which \nare connected to the Raspberry Pi, remotely. \nGPIO Pins of Raspberry Pi 3 are shown in below figure: \n \nRaspberry Pi 3 Model B GPIO Pin Mapping \n  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_250_img_1.jpeg"
        ]
    },
    "251": {
        "text": "lOMoAR cPSD|26885763 \n \n251 | P a g e  \n \nSome of the GPIO pins are multiplexed with alternate functions like I2C, SPI, UART etc. \nWe can use any of the GPIO pins for our application. \n Pin Numbering \nWe should define GPIO pin which we want to use as an output or input. But Raspberry Pi \nhas two ways of defining pin number which are as follows: \n• \nGPIO Numbering \n• \nPhysical Numbering \nIn GPIO Numbering, pin number refers to number on Broadcom SoC (System on Chip). \nSo, we should always consider the pin mapping for using GPIO pin. \nWhile in Physical Numbering, pin number refers to the pin of 40-pin P1 header on \nRaspberry Pi Board. The above physical numbering is simple as we can count pin number on \nP1 header and assign it as GPIO. \nBut, still we should consider the pin configuration diagram shown above to know which are \nGPIO pins and which are VCC and GND. \nControl LED with Push Button using Raspberry Pi \n \nControl LED using Raspberry Pi Interfacing Diagram \n  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_251_img_1.jpeg"
        ]
    },
    "252": {
        "text": "lOMoAR cPSD|26885763 \n \n252 | P a g e  \n \nExample \nNow, let’s control LED using a switch connected to the Raspberry Pi. Here, we are using \nPython and C (WiringPi) for LED ON-OFF control. \nControl LED using Python \nNow, let’s turn an ON and OFF LED using Python on Raspberry Pi. The switch is used to \ncontrol the LED ON-OFF. \nPython Program for Raspberry Pi to control LED using Push Button \nimport RPi.GPIO as GPIO \n \n#import RPi.GPIO module \nLED = 32 \n \n \n#pin no. as per BOARD, GPIO18 as per BCM \nSwitch_input = 29 \n \n#pin no. as per BOARD, GPIO27 as per BCM \nGPIO.setwarnings(False)  \n#disable warnings \nGPIO.setmode(GPIO.BOARD) \n#set pin numbering format \nGPIO.setup(LED, GPIO.OUT) \n#set GPIO as output \nGPIO.setup(Switch_input, GPIO.IN, pull_up_down=GPIO.PUD_UP) \nwhile True: \n    if(GPIO.input(Switch_input)): \n        GPIO.output(LED,GPIO.LOW) \n    else: \n        GPIO.output(LED,GPIO.HIGH) \nFunctions Used: \nRPi.GPIO \nTo use Raspberry Pi GPIO pins in Python, we need to import RPi.GPIO package which has \nclass to control GPIO. This RPi.GPIO Python package is already installed on Raspbian OS. \nSo, we don’t need to install it externally. Just, we should include library in our program to \nuse functions for GPIO access using Python. This is given as follows. \n             import RPi.GPIO as GPIO \n GPIO.setmode (Pin Numbering System) \nThis function is used to define Pin numbering system i.e. GPIO numbering or Physical \nnumbering. \n",
        "images": []
    },
    "253": {
        "text": "lOMoAR cPSD|26885763 \n \n253 | P a g e  \n \nIn RiPi.GPIO GPIO numbering is identified by BCM whereas Physical numbering is \nidentified by BOARD \nPin Numbering System = BOARD/BCM \nE.g. If we use pin number 40 of P1 header as a GPIO pin which we have to configure as \noutput then, \n    In BCM, \n            GPIO.setmode(GPIO.BCM) \n            GPIO.setup(21, GPIO.OUT) \n    In BOARD, \n            GPIO.setmode(GPIO.BOARD) \n            GPIO.setup(40, GPIO.OUT) \n GPIO.setup (channel, direction, initial value, pull up/pull down) \nThis function is used to set the direction of GPIO pin as an input/output. \n            channel – GPIO pin number as per numbering system. \n            direction – set direction of GPIO pin as either Input or Output. \n            initial value – can provide initial value \n            pull up/pull down – enable pull up or pull down if required \nFew examples are given as follows, \n• \nGPIO as Output \n                 GPIO.setup(channel, GPIO.OUT) \n• \nGPIO as Input \n                 GPIO.setup(channel, GPIO.IN) \n• \nGPIO as Output with initial value \n                 GPIO.setup(channel, GPIO.OUT, initial=GPIO.HIGH) \n• \nGPIO as Input with Pull up resistor \n                 GPIO.setup(channel, GPIO.IN, pull_up_down = GPIO.PUD_UP) \n",
        "images": []
    },
    "254": {
        "text": "lOMoAR cPSD|26885763 \n \n254 | P a g e  \n \n GPIO.output(channel, state) \nThis function is used to set the output state of GPIO pin. \n            channel – GPIO pin number as per numbering system. \n            state – Output state i.e. HIGH or LOW of GPIO pin \ne.g. \nGPIO.output(7, GPIO.HIGH) \n  \nGPIO.input(channel) \nThis function is used to read the value of GPIO pin. \ne.g. \nGPIO.input(9) \n \nControl LED using C (WiringPi) \nWe can access Raspberry Pi GPIO using C. Here, we are using WiringPi library for \naccessing Raspberry Pi GPIO using C. \nBefore implementing LED blinking using wiringPi, you can refer How to use WiringPi \nlibrary. \nC (WiringPi) Program for Raspberry Pi to control LED using Push Button \n#include <wiringPi.h> \n#include <stdio.h> \nint LED = 26; /* GPIO26 as per wiringPi, GPIO12 as per BCM, pin no.32 */ \nint switch_input = 21;  /* GPIO21 as per WiringPi, GPIO5 as per BCM, pin no.29 */ \nint main(){ \n \nwiringPiSetup(); /* initialize wiringPi setup */ \n \npinMode(LED,OUTPUT); /* set GPIO as output */ \n \npullUpDnControl(switch_input, PUD_UP); \n \nwhile (1){ \n \n \nif(digitalRead(switch_input)) \n",
        "images": []
    },
    "255": {
        "text": "lOMoAR cPSD|26885763 \n \n255 | P a g e  \n \n \n \n \ndigitalWrite(LED,LOW); /* write LOW on GPIO */ \n \n \nelse \n \n \n \ndigitalWrite(LED, HIGH); /* write HIGH on GPIO */ \n \n \n} \n \n} \n4.13. Sending and Receiving Signals Using GPIO Pins  \nIn recent years, the Raspberry Pi has become popular largely as an inexpensive, compact \nLinux box for media and retro video games, as well as a network device. Some hobbyists go \non to use their Pi these ways for years, all without knowing what the pins on the side of their \ndevice really do. \nIt’s these pins that hold the true power of the Pi. They can control homes, machines, new \ninventions, and even robots, so why is it so many people don’t know what they really are? \nWhat Do These Pins Actually Do? \nThese 40 (or 26, depending on your Pi model) pins are part of what’s known as the “GPIO \nHeader”. Within this header, there are four main kinds of pin; \n• \nPower: These provide DC power at 3.3 and 5 volts \n• \nGround (GND): These connect to ground, to close your circuit \n• \nDNC: This stands for “do not connect”, so don’t worry about them \n• \nGPIO: These can be set to either send, or receive control voltages \n \nGPIO stands for ‘General Purpose Input/Output’, and it’s these pins that let the Raspberry Pi \ndo its magic. This is because the pins have no specific function, and can be set to a dedicated \npurpose, such as controlling a signal. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_255_img_1.jpeg"
        ]
    },
    "256": {
        "text": "lOMoAR cPSD|26885763 \n \n256 | P a g e  \n \nA GPIO pin set to output can provide either 3.3 volts, known as a HIGH signal, or 0 volts, \nknown as a LOW signal. When set to input, it can read these same voltages. \n GPIO Pins Don’t Provide Much Power \nIt’s important to remember that GPIO pins (and the 3.3-volt power pins) are meant to control \nand communicate with other components. \nYou can get about 51mA from all 3.3 volt pins combined, but you’ll want to take care when \nconnecting; if your circuit tries to pull too much current through these 3.3 volt pins, you can \nfry the whole board. \nThe 5-volt power pins, on the other hand, give you all the power available from the power \nsupply, minus the bit used by the Raspberry Pi itself. \n4.13.1. Connecting Your GPIO Pins to a Breadboard \nWhen you first start using these GPIO pins, it’s wise to use a breadboard. This makes it easy \nto build circuits without solder and to modify them. \nIf you’ve never used a breadboard before, familiarize yourself with the basics here: \nA GPIO extension board also helps immensely. This connects the GPIO header via a ribbon \nand places the pins directly on the breadboard, in a clearly labeled manner. \nIt requires some real estate though: 20 rows each side of the breadboard. On a small board, \nthat’s nearly the whole thing! A breadboard with 40 rows or so leftover gives plenty of space \nfor beginner projects. \n  \n4.13.2. GPIO Pins With Special Uses \nEvery GPIO pin can be set to send and receive HIGH and LOW signals. Some have special \nuses too. \n Hardware PWM \nGPIO pins output either 3.3 or 0 volts: a HIGH or LOW signal. Pulse width modulation, or \nPWM, is a way of simulating the range of voltages in between by flickering the pin on and \noff rapidly. \nThis isn’t a true analog signal, but it’s fine for something like dimming an LED. It will \nflicker faster than you can see and simply appear dimmer. \n",
        "images": []
    },
    "257": {
        "text": "lOMoAR cPSD|26885763 \n \n257 | P a g e  \n \nYou can also use a low pass filter to smooth a PWM into an analog signal. This can be used \nfor analogue audio, if you aren’t fussy about quality. It’s fine for a doorbell or toy. \nYou can generate a PWM signal from any GPIO pin using software, but the operating system \njuggles this with other tasks, so this signal can jitter. \nHardware PWM is available on GPIO pins 18 and 19. Hardware PWM and the headphone \njack use the same circuits, so shouldn’t be used simultaneously. \n  \n4.13.3. Serial Bus Pins \nIf you take a look below at the diagram (known as a Raspberry Pi ‘Pinout’) you’ll see that \nsome pins are I2C, SPI, and UART serial. These are serial bus protocols that can be used to \nsend and receive data from other components. \n \n \nYou can combine these with a digital-analogue converter, or DAC, to output an analogue \nsignal. This can be preferable to PWM for high quality audio, or to control many \ncomponents. \n4.13.4.  Pull Up and Pull Down Resistors \nOften you will want your Raspberry Pi GPIO pin to read the position of a button or a switch. \nThat’s easy to do by wiring it so that it closes a circuit attached to the control voltage to read \nHIGH, or to ground to read LOW. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_257_img_1.jpeg"
        ]
    },
    "258": {
        "text": "lOMoAR cPSD|26885763 \n \n258 | P a g e  \n \nThe problem is that when this circuit is open and nothing else is attached to the pin, it might \nreturn any value. This is known as “floating,” and it’s extremely unhelpful. \nYou can prevent floating with “pull up” or “pull down” resistors. \nA pull up resistor is wired to your control voltage; when nothing else is attached, the pin will \nread HIGH. A pull down resistor is wired to ground; the pin will read LOW. Use whichever \nprovides the opposite value to your switch or button. \nYou don’t need to wire these resistors into your circuit. They’re inside the Raspberry Pi \nalready and you can control them from software. \n  \n4.13.5. Using Software to Control GPIO Pins \nAmong the easiest ways to control GPIO pins is by using the GPIO Zero library in Python. If \nyou’ve written any Python before, you’ll pick this up easy. \nIf this is your first time using Python, If you don’t, the commands below will still work; \nyou’ll just be less able to follow along. The web version of ‘Automate the Boring Stuff With \nPython’ is excellent and costs nothing. \nGPIO Zero is installed by default on Raspbian Desktop images. If you are using Raspbian \nLite or a different operating system, you may need to install it. \n Let’s Use All This to Switch a Light On \nLet’s have a go at turning on an LED! A job this simple doesn’t really require a computer, \nbut we’ll involve the Raspberry Pi in the GPIO pins. \nFor this, you’ll need…. \nA Raspberry \nPi with \npower supply and an SD \ncard \nwith \nRaspbian installed \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_258_img_1.jpeg"
        ]
    },
    "259": {
        "text": "lOMoAR cPSD|26885763 \n \n259 | P a g e  \n \nA breadboard \nA GPIO \nextension \nboard (optional, \nbut \nrecommended) \nAn LED \n \nYou’ll also need some more general equipment, such as; \n• \nA resistor with a value somewhere between 220 and 1000 Ohms \n• \nA USB keyboard, or an SSH connection: something that lets you type commands \n• \nJumper cables or wires \n• \nA pushdown button \nConnecting the Power Rails \nIf you’re using the extension board, connect it to the Raspberry Pi and to the breadboard. \nThen attach the 3.3-volt power pin to the positive power rail running across the bottom of the \nbreadboard, and the ground pin to the negative power rail. \nConnecting and Testing the Button \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_259_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_259_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_259_img_3.jpeg"
        ]
    },
    "260": {
        "text": "lOMoAR cPSD|26885763 \n \n260 | P a g e  \n \nNow add your button to the middle of the breadboard. Connect one pin of the button to a \nRaspberry Pi GPIO pin. I’m using 13, because it’s my lucky number. \nThen, connect the diagonally opposite pin of the button to the negative power rail. When you \npush this button down, the circuit closes. \nFinally, we need to tell the Pi to pay attention to this pin, so let’s open the Python interpreter. \nAt the command prompt, type: \npython3 \nNow at the interpreter, type: \nfrom gpiozero import Button \nIf you get a message saying ‘ImportError’, make sure you capitalized it correctly. If it says \n‘ModuleNotFoundError’, you need to install GPIO Zero. Otherwise, it’s time to assign our \npin to the button: \nbutton = Button(13) \nThis Button class takes care of assigning the pull up resistor. Now let’s test that it works by \ntyping the following lines: \nwhile True: \n  if button.is_pressed: \n  print(‘Sweet, the button works!’) \n  break \n \nPython is fussy about indentation, so be sure to copy the spaces too. Then press Enter again \nto run the loop. \nThis loop will run until someone presses the button, so press it. It should produce a message \nsaying the button works. This means you’ve successfully built a simple circuit that sends a \nmessage to your Raspberry Pi. If this doesn’t work, check that everything is connected \nproperly and try again. \n4.13.6. Connecting and Testing the LED \nThe D in LED stands for “diode”, which means electricity only runs in one direction through \nit. \nYou will notice that one leg of the LED is slightly longer: this connects to positive. Here, that \nmeans connecting to the GPIO pin. I’m using pin 26, for no particular reason. \nPlace the LED in the breadboard, making sure that the legs are spaced horizontally so that \nyou aren’t shorting the connection out. Now connect this positive leg to your GPIO pin. \nAn LED should be wired in series with a resistor, so attach one end of your resistor to the \n",
        "images": []
    },
    "261": {
        "text": "lOMoAR cPSD|26885763 \n \n261 | P a g e  \n \nshort leg of the LED, and the other end to the negative power rail. Resistors can go in either \nway around. \n \nNow let’s go tell the Raspberry Pi what’s going on. Type: Image: Pi & Breadboard \nfrom gpiozero import LED \nled = LED(26) \nIf everything’s wired correctly, you can switch it on and off with these commands: \nled.on() \nled.off() \nControlling the LED With the Button \nNow that everything’s connected and you’ve checked they work, type: \nbutton.when_pressed = led.on \nNow press the button. The LED should switch on and stay on. Now type: \nbutton.when_released = led.off \nPress the button again; the LED should switch off when the button is released. \n \n4.14. Connecting IOT devices to the cloud \n \nWith the development of smart things, sensors and telecommunication, IoT (Internet of \nThings) technology has greatly developed and become more and more standardized. But \nfragmented device-side communication connection problems often impede the project \nimplementation process.  \n  \nThere are four best practices to connect different types of devices to the cloud: \n  \n• \nDirectly integrate IoT SDK (Software Development Kit) for resource-rich devices \n• \nRely on a communication module for resource-constrained devices \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_261_img_1.jpeg"
        ]
    },
    "262": {
        "text": "lOMoAR cPSD|26885763 \n \n262 | P a g e  \n \n• \nUse a local gateway for non-network devices \n• \nUse a cloud gateway for private-protocol devices with network capabilities \n  \nFirst, we should introduce the IoT Device SDK. \n  \nIoT Device SDK is used to help us quickly connect hardware devices to the IoT platform. \nWe can download the IoT Device SDK from the corresponding cloud platform, e.g. AWS \nIoT Device SDK. \n \nThere are 4 layers of the IoT SDK. From bottom to top: \n  \n1. The HAL (hardware abstraction layer) abstracts the support function interface of different \nOS (operating systems) to the SDK. This enables the SDK to be ported to different hardware \nenvironments, different OS, and even bare chip environments. \n  \n2. The core layer completes the function encapsulation of MQTT/CoAP communication based \non the HAL layer interface, including MQTT connection establishment, message sending and \nreceiving; CoAP connection establishment, message sending and receiving; shadow device \noperation; OTA firmware status query, download and upgrade. \n  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_262_img_1.jpeg"
        ]
    },
    "263": {
        "text": "lOMoAR cPSD|26885763 \n \n263 | P a g e  \n \n3. Interface layer, providing API and callback function definitions, isolating the core layer and \nthe application. \n  \n4. Provide sample programs so that developers can quickly learn how to use the SDK. \n  \nWhen developing applications on a device, we can always choose higher-level SDKs such as \nAndroid IoT SDK on an Android device. That’s because the hardware environment porting \nwork has already been done by the SDK itself. \n  \nHowever, when developing applications for an MCU (Micro Controller Unit) which has \nLinux or RTOS (Real Time Operating System), we should choose Embedded C SDK and \nport the code to a specific hardware environment. \n  \nWith the knowledge of IoT SDK, we can discuss how to connect an IoT device to the cloud. \n  \n  \nDirectly integrate IoT SDK for resource-rich devices \n  \nWith the development of high-performance hardware, many smart devices have complete OS \nsuch as Linux, Android etc. These devices also have a Wi-Fi or cellular network. \n  \nAt the operating system level, network communication problems have already been resolved. \nWe only need to develop applications which integrate the IoT SDK of the cloud platform and \nthe communication link with the cloud will have been established. \n \nExamples of smart devices include smart phones, tablets, smart wearables, smart POS, \ncomputers, industrial gateways and development boards like the Raspberry Pi and ESP32. \n   \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_263_img_1.jpeg"
        ]
    },
    "264": {
        "text": "lOMoAR cPSD|26885763 \n \n264 | P a g e  \n \nRely on a communication module for resource-constrained devices \n   \nIn the IoT scenario, a large number of devices are resource-constrained, with RTOS, or even \nwithout an operating system, using MCU + communication modules to establish their link to \nthe cloud. \n  \nThere are many suppliers of cellular modules (NB-IoT/2G/3G/4G) on the market. The AT \ncommands of each company are different, which makes developing device-side applications \nvery difficult. \n  \nWhen we need to connect MCU to an IoT Platform, we should always carefully select the \ncellular modules and check whether they are suitable for a specific IoT platform. \n \nDifference between DTU and industrial gateway: \nDTU is a wireless terminal device used to convert serial data into IP data or IP data \ninto serial data and transmit it through a wireless communication network. It has fast and \nflexible networking, a short construction period and low cost. \n  \nThe industrial gateway has the functions of collecting data from field devices through \nserial port or network port. Data collection, protocol analysis, data standardization and \nuploading to the IoT platform through edge computing functions. Which is more flexible, \npowerful and customizable than DTU, but it is more expensive and needs more resources to \nmaintain. \n  \nExamples of sensors / devices which can be connected to DTU or industrial gateway include \nsensors, industrial equipment PLCs (Programmable Logic Controller), Bluetooth bracelets \n \n  \nUse a cloud gateway for private-protocol devices with network capabilities \n   \nDevices that directly connect to the cloud gateway  \n  \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_264_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_264_img_2.jpeg"
        ]
    },
    "265": {
        "text": "lOMoAR cPSD|26885763 \n \n265 | P a g e  \n \nFor some devices, they already have the ability to connect to the internet, but the protocols \nvary according to device manufacturers. We don’t want the IoT platform layer to handle the \nparsing of these protocols directly;an intermediate layer should satisfy the protocol \nconversion work to make the data meet the unified format of the IoT platform. \n  \nThis intermediate layer is the cloud gateway. The cloud gateway is at the front of the \nplatform. It receives data from the device side, completes message parsing, and then sends a \nmessage to the IoT platform with IoT device SDK. \n \nExamples of devices that connect to the internet through private protocol include vehicle \nGPS. \n  \n  \nDevices that connect to the cloud gateway indirectly \n  \nSome device vendors already provide a mature system which manages the devices and \nprovides API. In this case, we can have another form of cloud gateway: Cloud to cloud \nconnection. Making full use of the existing system will make the overall system more stable \nand give clear rights and responsibilities. \n  \nUsing a mature system will bring us higher development efficiency, but it’ll also introduce \nanother midware, which will increase communication time. \n \nExamples of devices with mature systems include cameras/NVR systems. \n  \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_265_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_265_img_2.jpeg"
        ]
    },
    "266": {
        "text": "lOMoARcPSD|26885763  \n \n1 | P a g e  \n \n \n \nUNIT V \nAPPLICATIONS DEVELOPMENT \n \n• Complete Design of Embedded Systems  \n• Development of IoT Applications  \n• Home Automation  \n• Smart Agriculture  \n• Smart Cities \n• Smart Healthcare. \n \n \n",
        "images": []
    },
    "267": {
        "text": "lOMoARcPSD|26885763  \n \n2 | P a g e  \n \n5.1. Complete Design of Embedded Systems \nAn Embedded system is a controller, which controls many other electronic devices. It \nis a combination of embedded hardware and software. There are two types of embedded \nsystems microprocessors and micro-controller. Micro-processor is based on von Neumann \nmodel/architecture (where program + data resides in the same memory location), it is an \nimportant part of the computer system, where external processors and peripherals are \ninterfaced to it. It occupies more area and has more power consumption. The application of \nthe microprocessor is personal computers.   \n \n5.1.1. What is an Embedded System Design? \nDefinition: A system designed with the embedding of hardware and software \ntogether for a specific function with a larger area is embedded system design. In embedded \nsystem design, a microcontroller plays a vital role. Micro-controller is based on Harvard \narchitecture, it is an important component of an embedded system. External processor, \ninternal memory and i/o components are interfaced with the microcontroller. It occupies less \narea, less power consumption. The application of microcontrollers is MP3, washing \nmachines. \n \n5.2.  Embedded Design \n5.2.1. Types of Embedded Systems \n• \nStand-Alone Embedded System \n• \nReal-Time Embedded System \n• \nNetworked Appliances \n• \nMobile devices \n \n5.2.2. Elements of Embedded Systems \n• \nProcessor \n• \nMicroprocessor \n• \nMicrocontroller \n• \nDigital signal processor. \n \n5.2.3. Steps in the Embedded System Design Process \nThe different steps in the embedded system design flow/flow diagram include the following. \n",
        "images": []
    },
    "268": {
        "text": "lOMoARcPSD|26885763  \n \n3 | P a g e  \n \n \nEmbedded design – process – steps \nAbstraction \nIn this stage the problem related to the system is abstracted. \n \nHardware – Software Architecture \nProper knowledge of hardware and software to be known before starting any design process. \n \nExtra Functional Properties \nExtra functions to be implemented are to be understood completely from the main design. \n \nSystem Related Family of Design \nWhen designing a system, one should refer to a previous system-related family of design. \n \nModular Design \nSeparate module designs must be made so that they can be used later on when required. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_268_img_1.jpeg"
        ]
    },
    "269": {
        "text": "lOMoARcPSD|26885763  \n \n4 | P a g e  \n \nMapping \nBased on software mapping is done. For example, data flow and program flow are mapped \ninto one. \nUser Interface Design \nIn user interface design it depends on user requirements, environment analysis and function \nof the system. For example, on a mobile phone if we want to reduce the power consumption \nof mobile phones we take care of other parameters, so that power consumption can be \nreduced. \n \nRefinement \nEvery component and module must be refined appropriately so that the software team can \nunderstand. \nArchitectural description language is used to describe the software design. \n• \nControl Hierarchy \n• \nPartition of structure \n• \nData structure and hierarchy \n• \nSoftware Procedure. \n \n5.2.4. Embedded Software Development Process Activities \nEmbedded software development process activities mainly include the following. \n  \nSpecifications \nProper specifications are to be made so that the customer who uses the product can go \nthrough the specification of the product and use it without any confusion. Designers mainly \nfocus on specifications like hardware, design constraints, life cycle period, resultant system \nbehavior. \n \nArchitecture \nHardware and Software architecture layers are specified. \n \nComponents \nIn this layer, components design is done. Components like single process processor, \nmemories- RAM/ROM, peripheral devices, buses..etc. \n \nSystem Integration \nIn this layer, all the components are integrated into the system and tested whether its meeting \ndesigners, expectations. \n \nChallenges in Embedded System Design \nWhile designing any embedded system, designers face lots of challenges like as follows, \n",
        "images": []
    },
    "270": {
        "text": "lOMoARcPSD|26885763  \n \n5 | P a g e  \n \n• \nEnvironment adaptability \n• \nPower consumption \n• \nArea occupied \n• \nPackaging and integration \n• \nUpdating in hardware and software \n• \nSecurity \n• \nThere are various challenges the designers face while testing the design like Embedded \nhardware testing, Verification stage, Validation Maintainability. \n \nEmbedded System Design Examples \n• \nAutomatic chocolate vending machine (ACVM) \n• \nDigital camera \n• \nSmart card \n• \nMobile phone \n• \nMobile computer..etc. \n \nAutomatic Chocolate Vending Machine (ACVM) \nThe design function of ACVM is to provide chocolate to the child whenever the child inserts \na coin into ACVM. \n \nDesign Steps \nThe design steps mainly include the following. \n1. Requirements \n2. Specifications \n3. Hardware and software functioning. \n \nRequirements \nWhen a child inserts a coin into the machine and selects the particular chocolate that he \nwants to purchase. \n \nInputs \n• \nCoins, user selection. \n• \nAn interrupt is generated at each port whenever a coin is inserted. \n• \nA separate notification is sent to each port. \n \nOutputs \n• \nChocolate \n• \nRefund \n• \nA message is displayed on LCD like date, time, welcome message. \n \n",
        "images": []
    },
    "271": {
        "text": "lOMoARcPSD|26885763  \n \n6 | P a g e  \n \nSystem Function \n• \nUsing a graphical user interface, the child commands to the system which chocolate the \nchild wants to purchase. \n• \nWhere the graphical user interface has an LCD, keypad, touch screen. \n• \nThe machine delivers the chocolate when the child inserts the coin if the coins inserted are \nexcess than the actual cost of selected chocolate. The ACVM machine refunds the money \nback. \n• \nUsing a Universal synchronous bus, the owner of the ACVM can keep track of client \nlocation. \n \n5.2.5. Designing of an embedded system \nBasic Structure of an Embedded System \nLet's see the block diagram shows the basic structure of an embedded system. \n \no Sensor: Sensor used for sensing the change in environment condition and it generate \nthe electric signal on the basis of change in environment condition. Therefore it is \nalso called as transducers for providing electric input signal on the basis of change in \nenvironment condition. \no A-D Converter: An analog-to-digital converter is a device that converts analog \nelectric input signal into its equivalent digital signal for further processing in an \nembedded system. \no Processor & ASICs: Processor used for processing the signal and data to execute \ndesired set of instructions with high-speed of operation. \nApplication specific integrated circuit (ASIC) is an integrated circuit designed to \nperform task specific operation inside an embedded system. \no D-A Converter: A digital-to-analog converter is a device that converts digital electric \ninput signal into its equivalent analog signal for further processing in an embedded \nsystem. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_271_img_1.png"
        ]
    },
    "272": {
        "text": "lOMoARcPSD|26885763  \n \n7 | P a g e  \n \no Actuators: Actuators is a comparator used for comparing the analog input signal level \nto desired output signal level for providing the error free output from the system. \nDesign steps required for the development of Embedded System \nDesigning steps required for embedded system are different from the design process of \nanother electronic system. \nLet's see a flow chart represent the design steps required in the development of an embedded \nsystem: \n \nEmbedded System processors \nProcessors are the major part in embedded systems that take response from sensors in digital \nform and processing of this response to produce output in real-time processing environment \nis performed using processors. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_272_img_1.png"
        ]
    },
    "273": {
        "text": "lOMoARcPSD|26885763  \n \n8 | P a g e  \n \nFor an embedded system developer it is essential to have the knowledge of both \nmicroprocessors and micro controllers. \nProcessors inside a system: \nProcessors inside a system have two essential units: \no Control unit: This unit in processors performed the program flow control operation \ninside an embedded system. The control unit also acts as a fetching unit for fetching \nthe set of instructions stored inside a memory. \no Execution unit: This unit is used for execution the various tasks inside a processors. It \nmainly comprises of arithmetic and logical unit (ALU) and it also include a circuit \nthat executes the instruction sets used to perform program control operation inside \nprocessors. \nTypes of processors: \nProcessors inside an embedded system are of the following categories: \no Application Specific System Processor(ASSP): ASSP is application dependent \nsystem processor used for processing signal of embedded system. Therefore for \ndifferent application performing task a unique set of system processors is required. \no Application Specific Instruction Processor(ASIP): ASIP is application dependent \ninstruction processors. It is used for processing the various instruction set inside a \ncombinational circuit of an embedded system. \no General Purpose Processor (GPP): GPP is used for processing signal from input to \noutput by controlling the operation of system bus, address bus and data bus inside an \nembedded system. \nTypes of general purpose processor are: \no Microprocessor \no Microcontroller \no Digital signal processor \no Analog signal processor \nEmbedded Systems \nBefore going to the overview of Embedded Systems, Let’s first know the two basic \nthings i.e embedded and system, and what actually do they mean.  \nSystem is a set of interrelated parts/components which are designed/developed to perform \ncommon tasks or to do some specific work for which it has been created.  \n",
        "images": []
    },
    "274": {
        "text": "lOMoARcPSD|26885763  \n \n9 | P a g e  \n \nEmbedded means including something with anything for a reason. Or simply we can say \nsomething which is integrated or attached to another thing. Now after getting what actual \nsystems and embedded mean we can easily understand what are Embedded Systems.  \nEmbedded System is an integrated system that is formed as a combination of computer \nhardware and software for a specific function. It can be said as a dedicated computer system \nhas been developed for some particular reason. But it is not our traditional computer system \nor general-purpose computers, these are the Embedded systems that may work independently \nor attached to a larger system to work on a few specific functions. These embedded systems \ncan work without human intervention or with little human intervention.  \n \nThree main components of Embedded systems are: \n1. Hardware \n2. Software \n3. Firmware  \n \nSome examples of embedded systems: \n• \nDigital watches \n• \nWashing Machine \n• \nToys \n• \nTelevisions \n• \nDigital phones \n• \nLaser Printer \n• \nCameras \n• \nIndustrial machines \n• \nElectronic Calculators \n• \nAutomobiles \n• \nMedical Equipment \nApplication areas of Embedded System:  \nMostly Embedded systems are present everywhere. We use it in our everyday life \nunknowingly as in most cases it is integrated into the larger systems. So, here are some of the \napplication areas of Embedded systems: \n• \nHome appliances \n• \nTransportation \n• \nHealth care \n• \nBusiness sector & offices \n• \nDefense sector \n• \nAerospace \n• \nAgricultural Sector \n",
        "images": []
    },
    "275": {
        "text": "lOMoARcPSD|26885763  \n \n10 | P a g e  \n \nImportant Characteristics of an Embedded System: \n1. Performs specific task: Embedded systems perform some specific function or tasks. \n2. Low Cost: The price of an embedded system is not so expensive. \n3. Time Specific: It performs the tasks within a certain time frame. \n4. Low Power: Embedded Systems don’t require much power to operate. \n5. High Efficiency: The efficiency level of embedded systems is so high. \n6. Minimal User interface: These systems require less user interface and are easy to use. \n7. Less Human intervention: Embedded systems require no human intervention or very \nless human intervention. \n8. Highly Stable: Embedded systems do not change frequently mostly fixed maintaining \nstability. \n9. High Reliability: Embedded systems are reliable they perform tasks consistently well. \n10. Use microprocessors or microcontrollers: Embedded systems use microprocessors or \nmicrocontrollers to design and use limited memory. \n11. Manufacturable: The majority of embedded systems are compact and affordable to \nmanufacture. They are based on the size and low complexity of the hardware. \n5.2.6. Block Structure Diagram of Embedded System \n \nAdvantages of Embedded System: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_275_img_1.png"
        ]
    },
    "276": {
        "text": "lOMoARcPSD|26885763  \n \n11 | P a g e  \n \n• \nSmall size. \n• \nEnhanced real-time performance. \n• \nEasily customizable for a specific application. \nDisadvantages of Embedded System: \n• \nHigh development cost. \n• \nTime-consuming design process. \n• \nAs it is application-specific less market available.  \n \nTop Embedded Programming Languages: Embedded systems can be programmed using \ndifferent programming languages like Embedded C, Embedded C++, Embedded Java, and \nEmbedded Python. However, it entirely depends on the developer to use which programming \nlanguage for the development of the embedded systems. \n \n5.3. Internet of Things Applications \nThe Internet of Things (IoT) provides the ability to interconnect computing devices, \nmechanical machines, objects, animals or unique identifiers and people to transfer data \nacross a network without the need for human-to-human or human-to-computer is a system of \nconversation. IoT applications bring a lot of value in our lives. The Internet of Things \nprovides objects, computing devices, or unique identifiers and people's ability to transfer \ndata across a network without the human-to-human or human-to-computer interaction. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_276_img_1.png"
        ]
    },
    "277": {
        "text": "lOMoARcPSD|26885763  \n \n12 | P a g e  \n \nA traffic camera is an intelligent device. The camera monitors traffic congestion, \naccidents and weather conditions and can access it to a common entrance. \nThis gateway receives data from such cameras and transmits information to the city's traffic \nmonitoring system. \n \nFor example, the municipal corporation has decided to repair a road that is connected to the \nnational highway. It may cause traffic congestion to the national highway. The insight is sent \nto the traffic monitoring system. \nThe intelligent system analyzes the situation, estimate their impact, and relay information to \nother cities connected to the same highway. It generates live instructions to drivers by smart \ndevices and radio channels. \n \nIt creates a network of self-dependent systems that take advantage of real-time control. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_277_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_277_img_2.png"
        ]
    },
    "278": {
        "text": "lOMoARcPSD|26885763  \n \n13 | P a g e  \n \nWhat is IoT? \nIoT is \na \nplatform \nwhere \nembedded \ndevices \nare \nconnected \nto \nthe \nInternet \nto collect and exchange data. It enables machines to interact, collaborate and learn from \nexperiences \nlike \nhumans. \nIoT \napplications \nequipped \nbillions \nof \nobjects \nwith connectivity and intelligence. \n \n5.3.1. Wearable \nWearable technology is the hallmark of IoT applications and one of the earliest industries to \ndeploy IoT. We have fit bits, heart rate monitors and smartwatches these days. \nGuardian glucose monitoring device has been developed to help people with diabetes. It \ndetects glucose levels in our body, uses a small electrode called the glucose sensor under the \nskin, and relates it to a radiofrequency monitoring device. \n \n5.3.2. Smart Home Applications \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_278_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_278_img_2.jpeg"
        ]
    },
    "279": {
        "text": "lOMoARcPSD|26885763  \n \n14 | P a g e  \n \nThe smart home is probably the first thing when we talk about the IoT application. The \nexample we see the AI home automation is employed by Mark Zuckerberg. Alan \nPan's home automation system, where a string of musical notes uses in-house functions. \n \n5.3.3. Health care \nIoT applications can transform reactive medical-based systems into active wellness-based \nsystems. Resources that are used in current medical research lack important real-world \ninformation. It uses controlled environments, leftover data, and volunteers for clinical trials. \nThe Internet of Things improves the device's power, precision and availability. IoT \nfocuses on building systems rather than just tools. Here's how the IoT-enabled care device \nworks. \n \n5.3.4. Smart Cities \nMost of you have heard about the term smart city. Smart city uses technology to \nprovide services. The smart city includes improving transportation and social services, \npromoting stability and giving voice to their citizens. \n \nThe problems faced by Mumbai are very different from Delhi. Even global issues, such as \nclean drinking water, declining air quality, and increasing urban density, occur in varying \nintensity cities. Therefore, they affect every city. \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_279_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_279_img_2.jpeg"
        ]
    },
    "280": {
        "text": "lOMoARcPSD|26885763  \n \n15 | P a g e  \n \nGovernments and engineers use the Internet of Things to analyze the complex factors of \ntown and each city. IoT applications help in the area of water management, waste control and \nemergencies. \n \nExample of a smart city - Palo Alto. \nPalo Alto, San Francisco, is the first city to acquire the traffic approach. He realized that \nmost cars roam around the same block on the streets in search of parking spots. It is the \nprimary cause of traffic congestion in the city. Thus, the sensors were installed at all parking \nareas in the city. These sensors pass occupancy status to the cloud of each spot. This solution \ninvolves the use of sensor arrays that collects data and uses it for many purposes. \n \n5.3.5. Agriculture \nBy the year 2050, the world's growing population is estimated to have reached about 10 \nbillion. To feed such a large population, agriculture needs to marry technology and get the \nbest results. There are many possibilities in this area. One of them is Smart Greenhouse. \n \nFarming techniques grow crops by environmental parameters. However, manual handling \nresults in production losses, energy losses and labor costs, making it less effective. \nThe greenhouse makes it easy to monitor and enables to control the climate inside it. \n \n5.3.6. Industrial Automation \nIt is one of the areas where the quality of products is an essential factor for a more significant \ninvestment return. Anyone can re-engineer products and their packaging to provide superior \nperformance in cost and customer experience with IoT applications. IoT will prove as a \ngame-changer. In industrial automation, IoT is used in the following areas: \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_280_img_1.png"
        ]
    },
    "281": {
        "text": "lOMoARcPSD|26885763  \n \n16 | P a g e  \n \no Product flow monitoring \no Factory digitization \no Inventory management \no Safety and security \no Logistics and Supply Chain Optimization \no Quality control \no Packaging customization \n \n \n5.3.7. Hacked Car \n \nA connected car is a technology-driven car with Internet access and a WAN network. The \ntechnology offers the user some benefits such as in-car infotainment, advanced navigation \nand fuel efficiency. \n \n5.3.8. Healthcare \nHealthcare do real-time monitoring with the help of smart devices. It gathers and transfers \nhealth data such as blood pressure, blood sugar levels, weight, oxygen, and ECG. The patient \ncan contact the doctor by the smart mobile application in case of any emergency. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_281_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_281_img_2.jpeg"
        ]
    },
    "282": {
        "text": "lOMoARcPSD|26885763  \n \n17 | P a g e  \n \n \n5.3.9. Smart Retail \nIoT applications in retail give shoppers a new experience. Customers do not have to stand in \nlong queues as the checkout system can read the tags of the products and deduct the total \namount from the customer's payment app with IoT applications' help. \n \n5.3.10. Smart Supply Chain \nCustomers automate the delivery and shipping with a smart supply chain. It also provides \ndetails of real-time conditions and supply networks. \n \n5.3.11. Smart Farming \n \nFarmers can minimize waste and increase productivity. The system allows the monitoring of \nfields with the help of sensors. Farmers can monitor the status of the area. \nInternet-connected devices go from 5 million to billions in just one year. Business Insider \nIntelligence estimates 24 billion IoT devices will install and generate more than 300 billion \nin revenue in the future. \n \n 5.3.12. Smart Grid \nThe smart grid is the IoT that attends to energy systems. Utility companies use smart grid \ntechnologies to find energy efficiencies through various means, including monitoring energy \nconsumption, predicting energy shortages and power outages, and gathering data on how \ndifferent individuals and companies use energy.  The average individual can also use insights \nfrom the smart grid to assess their own energy use and find efficiencies in their household. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_282_img_1.jpeg"
        ]
    },
    "283": {
        "text": "lOMoARcPSD|26885763  \n \n18 | P a g e  \n \n \n5.4. IOT Projects \n \n5.4.1. Home Automation  \n \nIoT based Web controlled Home Automation using PIC Microcontroller and Adafruit IO \n \nIoT based Web controlled Home Automation using PIC Microcontroller and Adafruit IO \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_283_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_283_img_2.jpeg"
        ]
    },
    "284": {
        "text": "lOMoARcPSD|26885763  \n \n19 | P a g e  \n \nHome Automation has always been inspiring projects for most of us. Toggling an AC \nload from the comfort of our chairs or bed of any room without reaching for the switch in \nanother room sounds cool doesn’t it!!. And now in the era of IoT, thanks to the ESP8266 \nmodule which made it easy to control anything from anywhere in the world. \nIn this IoT based project, we will use Adafuit IO to control Home appliaces from a webpage \nusing ESP8266 and PIC microcontroller. We have connected three AC light as loads and \nthey can be controlled remotely using either your phone or computer. Here ESP8266 is used \nwith PIC microcontroller. \nComponent Required \nESP8266 \nPIC microcontroller(PIC16f877A) \n12V 5A Electromagnetic Relay Module -1 \n12v Power supply (12V/1A or above) -1 \nLM7805 Voltage Regulator -1 \nLM317 Regulator -1 \n10k ohm Resistor -1 \n1k Resistor – 3 \n10k Pot – 1 \n1k Pot -1 \n16x2 LCD \n1000uF capacitor -1 \n10uF capacitor -2 \nWires for connection \n18.432 MHz Crystal oscillator -1 \nLED -2 \n22pF capacitor -2 \nBreadBoard or PCB (optional) \n \nCircuit Diagram \nIn Web controlled Home Automation project, we have used PIC microcontroller \nPIC16F877A for performing all the operations. It will communicate with ESP8266 Wi-Fi \nmodule to send and receive data from the Adafruit server and take action accordingly to turn \nON/OFF relay or load and displaying the status of loads over LCD. We have used 16x2 LCD \ndisplay for displaying the status of connected AC appliances. \nIn this project we have three power supplies: \nAs we have used a 12v relay module we need 12v so we have used a 12v adaptor to power \nthe relay. \nWe needed 5v for powering the PIC microcontroller, LCD and some of the relay module \ncircuit. So we have used a 7805 voltage regulator connected with a 12v supply. This voltage \nregulator provides 5v output. \n",
        "images": []
    },
    "285": {
        "text": "lOMoARcPSD|26885763  \n \n20 | P a g e  \n \n \n \nA 3.3v power supply is used for powering the ESP8266 as it works on 3.3v. This supply is \nmade by using LM317 voltage regulator which can be configurable to 3.3v by using some \nvoltage divider circuitry with this. Learn more about creating a LM317 based variable power \nsupply. \nAll the connections for this project have been shown in the circuit diagram. The final setup \nwill look like this: \n \nSetup Adafruit IO for IoT Home Automation \n \nIn this project, we are going to control some home AC appliance via a web page crated using \nAdafruit IO. Adafruit IO is a simple to use internet service that easily enables IoT devices to \nGET and POST data. Additionally, it can be used to create GUI interfaces for viewing data, \ncontrolling devices, and triggers for alerts/warnings. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_285_img_1.jpeg"
        ]
    },
    "286": {
        "text": "lOMoARcPSD|26885763  \n \n21 | P a g e  \n \n \n \n  \nFollow below steps to setup Adafruit IO for IoT Home Automation \nStep 1: in this step, we have to create an account on adafruit.io or if you already have an \naccount just login into it. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_286_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_286_img_2.jpeg"
        ]
    },
    "287": {
        "text": "lOMoARcPSD|26885763  \n \n22 | P a g e  \n \n \n \nStep 2: Create a dashboard by clicking on ‘Dashboards’ at the left side of the page and then \nclick on ‘Action’ and then on ‘Create a New Dashboard’. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_287_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_287_img_2.png"
        ]
    },
    "288": {
        "text": "lOMoARcPSD|26885763  \n \n23 | P a g e  \n \n \nNow a pop-up window form will open, fill in any name like Home Automation and click \non Create. You can also add some description related to project. \n \nStep 3:  Now click on the newly created dashboard \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_288_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_288_img_2.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_288_img_3.png"
        ]
    },
    "289": {
        "text": "lOMoARcPSD|26885763  \n \n24 | P a g e  \n \nNow we need to click on + size at the right side of the page under blue squire and red circle. \n \nNow another pop-up window open to select desired new block item like ON/OFF switch. \n \nAfter selecting the Block (On/Off button) a new pop-up window will open. Enter here the \nname of your new feed like Light1 or and click on create. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_289_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_289_img_2.png"
        ]
    },
    "290": {
        "text": "lOMoARcPSD|26885763  \n \n25 | P a g e  \n \n \nNow click on a newly created feed and fill some details and click over create a block. \n \nYou can create more feeds and blocks according to requirement. Here we have created three \nfor controlling three lights from this web interface \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_290_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_290_img_2.png"
        ]
    },
    "291": {
        "text": "lOMoARcPSD|26885763  \n \n26 | P a g e  \n \n \nStep 4: Now click on ‘KEY’ symbol on the same page and copy username and the active \nkey given there. \n \nStep 5: Now open the code and replace the username with your username everywhere in the \ncode, also replace the MQTTPassword with the active key in the code. Complete code is \ngiven at the end of this project. \nconst char MQTTHost[] = \"io.adafruit.com\"; \nconst char MQTTPort[] = \"1883\"; \nconst char MQTTClientID[] = \"ABCDEF\"; \nconst char MQTTTopicRelay1[] = \"saddam4201/feeds/Light1\"; \nconst char MQTTTopicRelay2[] = \"saddam4201/feeds/Light2\"; \nconst char MQTTTopicRelay3[] = \"saddam4201/feeds/Light3\"; \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_291_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_291_img_2.png"
        ]
    },
    "292": {
        "text": "lOMoARcPSD|26885763  \n \n27 | P a g e  \n \nconst char MQTTTopicRelay4[] = \"saddam4201/feeds/Light4\"; \nconst char MQTTProtocolName[] = \"MQTT\"; \nconst char MQTTLVL = 0x03; \nconst char MQTTFlags = 0xC2; \nconst unsigned int MQTTKeepAlive = 60; \nconst char MQTTUsername[] = \"saddam4201\";                // put your Username \nconst char MQTTPassword[] = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";    // Put Your \nPassword \nconst char MQTTQOS = 0x00; \nconst char MQTTPacketID = 0x0001; \nStep 6: Now compile and upload the code into PIC microcontroller, if you are new with PIC \nmicrocontroller.  \n \nMQTT Protocol \nThis IoT based Home Automation Project uses MQTT protocol for exchanging data between \nserver and client. This protocol is very fast compared to the TCP/IP protocol. And the \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_292_img_1.jpeg"
        ]
    },
    "293": {
        "text": "lOMoARcPSD|26885763  \n \n28 | P a g e  \n \nworking concept is also different from the TCP/IP protocol. This protocol has three main \ncomponents. \nPublish \nBroker \nSubscriber \nAccording to MQTT.org (official website), “MQTT stands for MQ Telemetry Transport. It is \na publish/subscribe, extremely simple and lightweight messaging protocol, designed for \nconstrained devices and low-bandwidth, high-latency or unreliable networks. The design \nprinciples are to minimize network bandwidth and device resource requirements whilst also \nattempting to ensure reliability and some degree of assurance of delivery. These principles \nalso turn out to make the protocol ideal of the emerging “machine-to-machine” (M2M) or \n“Internet of Things” world of connected devices, and for mobile applications where \nbandwidth and battery power are at a premium.” \nProgramming Explanation \nProgramming part of this Adafruit.io Home Automation is a little bit difficult because of \nMQTT protocol and its frame format. But if you don’t want to go into this then you can \ndirectly try the code given at the end. Here we have explained few parts of code below: \nFirst of all, include all the required libraries and set configuration bits for PIC \nMicrocontroller. \n#define _XTAL_FREQ 18432000 \n#include <xc.h> \n#include<pic.h> \n#include <stdio.h> \n#include <stdlib.h> \n#include <string.h> \n \n// BEGIN CONFIG \n#pragma config FOSC = HS // Oscillator Selection bits (HS oscillator) \n#pragma config WDTE = OFF // Watchdog Timer Enable bit (WDT enabled) \n#pragma config PWRTE = OFF // Power-up Timer Enable bit (PWRT disabled) \n#pragma config BOREN = ON // Brown-out Reset Enable bit (BOR enabled) \n#pragma config LVP = OFF // Low-Voltage (Single-Supply) In-Circuit Serial Programming \nEnable bit (RB3 is digital I/O, HV on MCLR must be used for programming) \n#pragma config CPD = OFF // Data EEPROM Memory Code Protection bit (Data EEPROM \ncode protection off) \n#pragma config WRT = OFF // Flash Program Memory Write Enable bits (Write protection \noff; all program memory may be written to by EECON control) \n#pragma config CP = OFF // Flash Program Memory Code Protection bit (Code protection \noff) \n//END CONFIG \n",
        "images": []
    },
    "294": {
        "text": "lOMoARcPSD|26885763  \n \n29 | P a g e  \n \nAfter this, we have defined some macros that are used to declare pins for LCD and other \nGPIOs. \n#define uchar unsigned char \n#define uint unsigned int \n \n#define LCDPORTDIR TRISA \n#define LCDPORT PORTA \n#define RS RE1 \n#define EN RE0 \n \n#define relay1dir TRISC0 \n#define relay2dir TRISC1 \n#define relay3dir TRISC2 \n#define relay4dir TRISC4 \n#define relay1 RC0 \n#define relay2 RC1 \n#define relay3 RC2 \n#define relay4 RC4 \n \n#define leddir TRISC3 \n#define led RC3 \n \n#define txDir TRISD0 \n#define tx RD0 \nNow in giving part of the code, we have some variables that we have sued in this project \nvolatile char buf[95]; \nuchar buf1[70]; \nuchar buf2[15]; \nint retry; \nint restartFlag=0; \nvolatile char index=0; \nvolatile char flag=0; \nvolatile int msCount=0; \nvolatile char g_timerflag=1; \nvolatile int counter=0; \nvolatile char sec=0; \nunsigned int topiclength; \nunsigned char topic[25]; \nunsigned char encodedByte; \nint X; \n",
        "images": []
    },
    "295": {
        "text": "lOMoARcPSD|26885763  \n \n30 | P a g e  \n \nBelow function is used for Wi-Fi initialization which is responsible for initializing wifi \nmodule and connect ESP8266 with Wi-Fi hotspot or Wi-Fi router. \nvoid espInitize() \n{ \n    lcdwrite(0x01, CMD); \n    lcdprint(\"ESP Initilizing\"); \n    serialprintln(\"AT+RST\"); \n    __delay_ms(5000); \n    espInit(\"AT\",\"OK\",2); \n    espInit(\"ATE1\",\"OK\",2); \n    espInit(\"AT+CWMODE=3\",\"OK\",2); \n    espInit(\"AT+CWQAP\",\"OK\",2); \n    espInit(\"AT+CWJAP=\\\"wifi_name\\\",\\\"password\\\"\",\"OK\",3); \n    serialprintln(\"AT+CIFSR\"); \n                serialFlush(); \n    __delay_ms(500); \n} \nBelow code is used to configure MQTT and adafrut.io. \nconst char MQTTHost[] = \"io.adafruit.com\"; \nconst char MQTTPort[] = \"1883\"; \nconst char MQTTClientID[] = \"ABCDEF\"; \nconst char MQTTTopicRelay1[] = \"saddam4201/feeds/Light1\"; \nconst char MQTTTopicRelay2[] = \"saddam4201/feeds/Light2\"; \nconst char MQTTTopicRelay3[] = \"saddam4201/feeds/Light3\"; \nconst char MQTTTopicRelay4[] = \"saddam4201/feeds/Light4\"; \nconst char MQTTProtocolName[] = \"MQTT\"; \nconst char MQTTLVL = 0x03; \nconst char MQTTFlags = 0xC2; \nconst unsigned int MQTTKeepAlive = 60; \nconst char MQTTUsername[] = \"saddam4201\";                // put your Username \nconst char MQTTPassword[] = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";    // Put Your \nPassword \nconst char MQTTQOS = 0x00; \nconst char MQTTPacketID = 0x0001; \nGiven function is used to connect with Adafruit IO broker and subscribing the topics that we \nhave used in this project. \nvoid restartESP() \n{ \n            espInitize(); \n            espInit(\"AT+CIPSTART=\\\"TCP\\\",\\\"io.adafruit.com\\\",1883\",\"CONNECT\",5) \n",
        "images": []
    },
    "296": {
        "text": "lOMoARcPSD|26885763  \n \n31 | P a g e  \n \n            SendConnectPacket() \n                                                \nSendSubscribePacket(&MQTTTopicRelay1[0],strlen(MQTTTopicRelay1)) \n                                                \nSendSubscribePacket(&MQTTTopicRelay2[0],strlen(MQTTTopicRelay2)) \n                                                \nSendSubscribePacket(&MQTTTopicRelay3[0],strlen(MQTTTopicRelay3)) \n            lcdwrite(1,CMD); \n            led=1; \n} \nGiven function is for connecting with Adafruit IO MQTT broker \nint SendConnectPacket(void) \n{ \n  int txIndex=0; \n  unsigned int MQTTProtocolNameLength = strlen(MQTTProtocolName); \n  unsigned int MQTTClientIDLength = strlen(MQTTClientID); \n  unsigned int MQTTUsernameLength = strlen(MQTTUsername); \n  unsigned int MQTTPasswordLength = strlen(MQTTPassword); \n  X = MQTTProtocolNameLength + 2 + 4 + MQTTClientIDLength + 2 + \nMQTTUsernameLength + 2 + MQTTPasswordLength + 2; \n  do \n  { \n    encodedByte = X % 128; \n    X = X / 128; \n    if ( X > 0 ) \n    { \n      encodedByte |= 128; \n    } \n  } while ( X > 0 ); \n \n  buf1[txIndex++]=0x10; \n  buf1[txIndex++]=encodedByte; \n  buf1[txIndex++]=MQTTProtocolNameLength<<8; \n  buf1[txIndex++]=MQTTProtocolNameLength; \n  memcpy((unsigned \nchar \n*)&buf1[txIndex],(unsigned \nchar \n*)&MQTTProtocolName,MQTTProtocolNameLength); \nGiven function is used to send subscribe packet to MQTT broker \nint SendSubscribePacket(char topic[], int topiclength) \n{ \n  X = 2 + 2 + topiclength + 1; \n",
        "images": []
    },
    "297": {
        "text": "lOMoARcPSD|26885763  \n \n32 | P a g e  \n \n  do \n  { \n    encodedByte = X % 128; \n    X = X / 128; \n    if ( X > 0 ) \n    { \n      encodedByte |= 128; \n    } \n    //serialwrite(encodedByte); \n  } while ( X > 0 ); \n \n  int txIndex=0; \n  buf1[txIndex++]=0x82; \n  buf1[txIndex++]=encodedByte; \n  buf1[txIndex++]=MQTTPacketID<<8; \n  buf1[txIndex++]=MQTTPacketID; \n  buf1[txIndex++]=topiclength<<8; \n  buf1[txIndex++]=topiclength; \n  memcpy(&buf1[txIndex],(char *)&topic[0],topiclength); \n  txIndex+=topiclength; \n \n5.4.2. Smart Agriculture  \nThis is smart farming using IoT in this project we will use the server to store the sensor data \nthis is similar to our recent smart agriculture using IoT project.  \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_297_img_1.jpeg"
        ]
    },
    "298": {
        "text": "lOMoARcPSD|26885763  \n \n33 | P a g e  \n \nWhat is Smart farming using IoT? \nSmart farming project is in trend nowadays. everyone wants their farm and land to be \nsmart because it is attractive and techy and also it reduces the manpower they needed to \nmake the system work. \n \nHere, you need a circuit diagram, code, and thingspeak instruction. so we are going to give \nyou all the things below. follow all the steps and make your circuit as we have given. \n \nHere we are going to use two nodemcu. \nbecause we have here 5 analog sensors and 1 DHT. \nso we will use 4 soil moisture sensors with the Nodemcu 1 and dht11 and 1 soil moisture \nsensor with the second node MCU. \nand there we need two codes for these two nodemcu. \nSo, make this project carefully. upload first code with the first nodemcu as we have given \nbelow. \n \n \nComponents Required:- \n• NodeMcu-2 \n• General-purpose PCB \n• 4 channel ADC multiplexer \n• 5 soil moisture sensor \n• DHT11 \n• Breadboard \n• Jumper wires \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_298_img_1.jpeg"
        ]
    },
    "299": {
        "text": "lOMoARcPSD|26885763  \n \n34 | P a g e  \n \n• connecting cables \n• Smart farming using IoT Circuit Diagram (1st nodemcu) \n \nConnection Diagram \nNodemcu esp8266 \n4 Channel ADC \nVV, Vin \nVCC  \nG, GND \nGND  \nD1 Pin \nSCL Pin \nD2 Pin \nSDA Pin \nSoil 1 Sensor \nSoil 2 Sensor \nSoil 3 Sensor \nSoil 4 Sensor \n4 Channel ADC \nVCC \nVCC \nVCC \nVCC \nVCC \nGND \nGND \nGND \nGND \nGND \nA0 \n  \n  \n  \nA0 \n  \nA0 \n  \n  \nA1 \n  \n  \nA0 \n  \nA2 \n  \n  \n  \nA0 \nA3 \nAfter making all the connections You need to upload the Code. \nConnect all the Soil moisture sensor Vcc to the Nodemcu Vin \nConnect Multiplexer  Vcc to the Nodemcu Vin \nConnect all the Soil moisture sensor Gnd to the Nodemcuo Gnd \nConnect Multiplexer  Gnd to the Nodemcu Gnd \nSoil moisture sensor Output connects to the Multiplexer as given in the above image \nAfter complete, the connection Upload the given code to the Nodemcu. This code is for the \nFirst nodemcu. \nSmart farming using IoT Code( first nodemcu) \n // TECHATRONIC.COM   \n // library   \n // https://github.com/adafruit/Adafruit_ADS1X15   \n // https://github.com/manrueda/ESP8266HttpClient   \n // https://github.com/ekstrand/ESP8266wifi   \n #include <ESP8266WiFi.h>   \n",
        "images": []
    },
    "300": {
        "text": "lOMoARcPSD|26885763  \n \n35 | P a g e  \n \n #include <ESP8266HTTPClient.h>   \n #include <Adafruit_ADS1015.h>   \n WiFiClient client;   \n String thingSpeakAddress= \"http://api.thingspeak.com/update?\";   \n String writeAPIKey;   \n String tsfield1Name;   \n String request_string;   \n HTTPClient http;   \n  Adafruit_ADS1115 ads;    \n void setup()   \n {    \n  Serial.begin(115200);   \n  delay(3000);   \n  WiFi.disconnect();   \n  Serial.println(\"START\");   \n  WiFi.begin(\"DESKTOP\",\"asdfghjkl\");   // Wifi (\"ID\",\"Password\")   \n  while ((!(WiFi.status() == WL_CONNECTED))){   \n  delay(300);   \n  Serial.println(\"...\");   \n  }   \n  Serial.println(\"I AM CONNECTED\");   \n   Serial.println(\"Hello!\");   \n  Serial.println(\"Getting single-ended readings from AIN0..3\");   \n  Serial.println(\"ADC Range: +/- 6.144V (1 bit = 3mV/ADS1015, 0.1875mV/ADS1115)\");   \n  ads.begin();   \n }   \n void loop()   \n {   \n  int16_t adc0, adc1, adc2, adc3;   \n  Serial.println(\" \");   \n   adc0 = ads.readADC_SingleEnded(0);   \n   adc0 = adc0 / 25;   \n   adc1 = ads.readADC_SingleEnded(1);   \n   adc1 = adc1 / 25;   \n   adc2 = ads.readADC_SingleEnded(2);   \n   adc2 = adc2 / 25;   \n   adc3 = ads.readADC_SingleEnded(3);   \n   adc3 = adc3 / 25;   \n   Serial.print(\"SOIL MOISTURE in persent 1% : \"); Serial.println(adc0);   \n   Serial.print(\"SOIL MOISTURE in persent 2% : \"); Serial.println(adc1);   \n",
        "images": []
    },
    "301": {
        "text": "lOMoARcPSD|26885763  \n \n36 | P a g e  \n \n   Serial.print(\"SOIL MOISTURE in persent 3% : \"); Serial.println(adc2);   \n   Serial.print(\"SOIL MOISTURE in persent 4% : \"); Serial.println(adc3);   \n   Serial.println(\" \");   \n   if (client.connect(\"api.thingspeak.com\",80))   \n   {   \n    request_string = thingSpeakAddress;   \n    request_string += \"key=\";   \n    request_string += \"2YGO2FHN3XI3GFE7\";   \n    request_string += \"&\";   \n    request_string += \"field1\";   \n    request_string += \"=\";   \n    request_string += adc0;   \n    http.begin(request_string);   \n    http.GET();   \n    http.end();   \n   }   \n delay(10);   \n   if (client.connect(\"api.thingspeak.com\",80))   \n   {   \n    request_string = thingSpeakAddress;   \n    request_string += \"key=\";   \n    request_string += \"2YGO2FHN3XI3GFE7\";   \n    request_string += \"&\";   \n    request_string += \"field2\";   \n    request_string += \"=\";   \n    request_string += adc1;   \n    http.begin(request_string);   \n    http.GET();   \n    http.end();   \n   }   \n delay(10);   \n  if (client.connect(\"api.thingspeak.com\",80))   \n   {   \n    request_string = thingSpeakAddress;   \n    request_string += \"key=\";   \n    request_string += \"2YGO2FHN3XI3GFE7\";   \n    request_string += \"&\";   \n    request_string += \"field3\";   \n    request_string += \"=\";   \n    request_string += adc2;   \n",
        "images": []
    },
    "302": {
        "text": "lOMoARcPSD|26885763  \n \n37 | P a g e  \n \n    http.begin(request_string);   \n    http.GET();   \n    http.end();   \n   }   \n delay(10);   \n  if (client.connect(\"api.thingspeak.com\",80))   \n   {   \n    request_string = thingSpeakAddress;   \n    request_string += \"key=\";   \n    request_string += \"2YGO2FHN3XI3GFE7\";   \n    request_string += \"&\";   \n    request_string += \"field4\";   \n    request_string += \"=\";   \n    request_string += adc3;   \n    http.begin(request_string);   \n    http.GET();   \n    http.end();   \n   }   \n delay(10);   \n }   \nFor the second NodMCU \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_302_img_1.jpeg"
        ]
    },
    "303": {
        "text": "lOMoARcPSD|26885763  \n \n38 | P a g e  \n \nConnection table 2 \nNodemcu esp8266 \nDht11 Sensor \nVV, Vin \n( V ) VCC \nG, GND \n( G ) GND \nD3 Pin \n( S )  OUT Pin \nNodemcu esp8266 \nSoil Moisture Sensor \nVV, Vin \nVCC \nG, GND \nGND \nA0 Pin \n( A0 ) OUT Pin \nConnect DHT 11 output pin to the Nodemcu d3 \nSoil moisture sensor output to be connected to the A0 \nConnect DHT 11 VCC to the Nodemcu Vin \nConnect DHT 11 Gnd to the Nodemcu Gnd \nAfter complete, the connection Upload the given code to the Nodemcu. This code is for the \nsecond nodemcu. \nFor Second NodeMCU:- \n // TECHATRONIC.COM   \n // library   \n // https://github.com/adafruit/DHT-sensor-library   \n // https://github.com/manrueda/ESP8266HttpClient   \n // https://github.com/ekstrand/ESP8266wifi   \n #include <ESP8266WiFi.h>   \n #include <ESP8266HTTPClient.h>   \n String thingSpeakAddress= \"http://api.thingspeak.com/update?\";   \n String writeAPIKey;   \n String tsfield1Name;   \n String request_string,request_string1;   \n HTTPClient http;   \n #include <DHT.h> // Including library for dht   \n // library   \n // https://github.com/adafruit/DHT-sensor-library   \n #include <ESP8266WiFi.h>   \n String apiKey = \"77921LPMGM2OAGQE\";   // Enter your Write API key from ThingSpeak   \n const char *ssid = \"DESKTOP\";     // replace with your wifi ssid and wpa2 key   \n",
        "images": []
    },
    "304": {
        "text": "lOMoARcPSD|26885763  \n \n39 | P a g e  \n \n const char *pass = \"asdfghjkl\";    // WIFI Password     \n const char* server = \"api.thingspeak.com\";   \n #define DHTPIN 0     //pin D3 where the dht11 is connected   \n DHT dht(DHTPIN, DHT11);   \n WiFiClient client;   \n void setup()   \n {  dht.begin();   \n   Serial.begin(115200);   \n  delay(3000);   \n  WiFi.disconnect();   \n  Serial.println(\"START\");   \n   WiFi.begin(\"DESKTOP\",\"asdfghjkl\");   \n  while ((!(WiFi.status() == WL_CONNECTED))){   \n   delay(300);   \n   Serial.println(\"...\");   \n  }   \n  Serial.println(\"I AM CONNECTED\");   \n }   \n void loop()   \n {   \n   if (client.connect(\"api.thingspeak.com\",80))   \n   {   \n    request_string = thingSpeakAddress;   \n    request_string += \"key=\";   \n    request_string += \"77921LPMGM2OAGQE\";   \n    request_string += \"&\";   \n    request_string += \"field3\";   \n    request_string += \"=\";   \n    request_string += analogRead(A0);   \n    http.begin(request_string);   \n    http.GET();   \n    http.end();   \n   }   \n   delay(10);   \n float h = dht.readHumidity();   \n    float t = dht.readTemperature();   \n        if (isnan(h) || isnan(t))    \n          {   \n            Serial.println(\"Failed to read from DHT sensor!\");   \n            return;   \n",
        "images": []
    },
    "305": {
        "text": "lOMoARcPSD|26885763  \n \n40 | P a g e  \n \n          }   \n              if (client.connect(server,80))  //  \"184.106.153.149\" or api.thingspeak.com   \n            {    \n                String postStr = apiKey;   \n                postStr +=\"&field1=\";   \n                postStr += String(t);   \n                postStr +=\"&field2=\";   \n                postStr += String(h);   \n                postStr += \"\\r\\n\\r\\n\";   \n                client.print(\"POST /update HTTP/1.1\\n\");   \n                client.print(\"Host: api.thingspeak.com\\n\");   \n                client.print(\"Connection: close\\n\");   \n                client.print(\"X-THINGSPEAKAPIKEY: \"+apiKey+\"\\n\");   \n                client.print(\"Content-Type: application/x-www-form-urlencoded\\n\");   \n                client.print(\"Content-Length: \");   \n                client.print(postStr.length());   \n                client.print(\"\\n\\n\");   \n                client.print(postStr);   \n                Serial.print(\"Temperature: \");   \n                Serial.print(t);   \n                Serial.print(\" degrees Celcius, Humidity: \");   \n                Serial.print(h);   \n                Serial.print(\" Soil Sensor \");   \n                Serial.print(A0);   \n                Serial.println(\"%. Send to Thingspeak.\");   \n             }   \n      client.stop();   \n      Serial.println(\"Waiting...\");   \n  // thingspeak needs minimum 15 sec delay between updates   \n  delay(10);   \n }   \nSo, here we have given data for both setups now follow the given instruction to make the \nthingspeak server. \nThingspeak Setup \nStep 1  \nOpen Thingspeak website \n \nStep 2 \nRegister or login on the website \nLogin in Thingspeak \n",
        "images": []
    },
    "306": {
        "text": "lOMoARcPSD|26885763  \n \n41 | P a g e  \n \n \n \nStep 3 \nCreate a new channel here \n \nStep 4 \nTick mark in front of the channel and rename as you want \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_306_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_306_img_2.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_306_img_3.png"
        ]
    },
    "307": {
        "text": "lOMoARcPSD|26885763  \n \n42 | P a g e  \n \n \nStep 6 \nSave this Channel \n \nStep 7 \nNow, you can see your channel here \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_307_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_307_img_2.png"
        ]
    },
    "308": {
        "text": "lOMoARcPSD|26885763  \n \n43 | P a g e  \n \n \nStep 8 \nAdd Api \nCopy your api key from here and paste in your code. \n \nStep 9 \nNow you can see my channel \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_308_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_308_img_2.png"
        ]
    },
    "309": {
        "text": "lOMoARcPSD|26885763  \n \n44 | P a g e  \n \n \nNow you can See your project data on the server. All the best for your project. and if you are \nunable to make this you can buy this project from us. link is given here. \n \n5.4.3. Smart Cities  \nA smart city uses information and communication technology to improve the utility, share \nknowledge with the public, and provide a strong sense of community support and local \ngovernment assistance. Shrewd urban communities are those that make use of brilliant ideas \nand information as the required resources to address the maintainability issues that urban \ncommunities face. Many metropolitan areas are currently becoming more intelligent, \nutilizing information and innovation to advance transportation, energy consumption, \nwellness, and air quality, as well as to spur economic growth. A great city's main objective \nis to streamline municipal operations, promote economic development, and address resident \nhappiness through clever developments and data analysis. We intended to spend a great \namount of time reading up on several shrewd urban groups in this post. As a result, some of \nthe key boundaries that can be built include clever management, clever energy, clever \nbuilding, clever flexibility, clever structure, clever invention, clever medical care, and clever \nresidence. Urban areas collect and analyze information using IoT devices such as connected \nsensors, lighting, and meters. The foundation, public usage, and administrations, to name just \na few, are all progressively developed in urban areas using this knowledge. Smart urban \ncommunities focus on improving the lives of their residents in such fundamental areas as \nstrategy effectiveness, reducing waste and everyday problems, improving friendly and \nfinancial quality, and enhancing the social consideration of their residents. \n \nIntroduction \n \nThe Internet of Things (IoT) is a fresh perspective on computerized connectivity that envisions \na not-too-distant future in which everyday things will be fitted with microcontrollers and \nsmartphones. Intelligent display stacks will equip them to communicate with one another and \nthe clients, evolving into an essential component of the Internet. Smart, self-designing \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_309_img_1.png"
        ]
    },
    "310": {
        "text": "lOMoARcPSD|26885763  \n \n45 | P a g e  \n \nobjects that are connected to one another through a global organizational framework are \nanticipated to be produced under the IoT model. IoT is typically thought about as real, \nwidely distributed,  low  capacity,  and  managing  products  with  the  aim  of  advancing  \nthe  unwavering  quality, \nperformance, and security of the brilliant city and its frameworks. Due to the ongoing \npopulation growth, development is necessary. The Internet of Things (IoT) is a novel \napproach to computerized networking that predicts the fitting of everyday objects with \nmicrocontrollers and smartphones in the not-too-distant future. Intelligent display stacks will \nenable them to interact with clients and one another, developing into a crucial element of the \nInternet. Under the IoT concept, it is envisaged that intelligent, self-designing items would be \ncreated and connected to one another through a global organizational framework. IoT is often \nviewed as actual, widely dispersed, low capacity, and controlling items with the objective of \nenhancing the bright city's and its systems' unwavering quality, performance, and security. \nDevelopment is required because of the population expansion that is happening. The Internet \nof Things (IoT) is a novel approach to computerized networking that predicts the fitting of \neveryday objects with microcontrollers and smartphones in the not-too-distant future. \nIntelligent display stacks will enable them to interact with clients and one another, \ndeveloping into a crucial element of the Internet. Under the IoT concept, it is envisaged that \nintelligent, self-designing items would be created and connected to one another through a \nglobal organizational framework. IoT is often viewed as actual, widely dispersed, low \ncapacity, and controlling items with the objective of enhancing the bright city's and its \nsystems' unwavering quality, performance, and security. Development is required because of \nthe population expansion that is happening. These are some challenges of a smart city are \nfollowing: \n \nLack of funds: As urban communities try to work on their foundation with brilliant \ninnovations, paying for such undertakings presents a significant test while presenting savvy \nadvancements for an enormous scope. \n \nGovernance: The implementation of these large-scale projects involves a long series of \nlegislative and policy agreements. \n \nLack of infrastructure and labor: Metropolitan foundation assumes an essential part in savvy \ncity projects. Contingent upon the current foundation in energy, water, and transportation \nframeworks, among others, a task might be figured out requiring pretty much speculation \ntime. \n \nDigital Security: In intelligent cities, the interrelationship between public and private is \npossible thanks to the flow of data. \n \nInfrastructure and services are needed to meet the needs of city dwellers due to the rapid \nincrease in population density in metropolitan areas. Due to the ability of all devices to \nconnect to the Internet and communicate with one another, there has been considerable \ngrowth in the use of digital devices, such as sensors, actuators, and smartphones. \n \nAdvantages of Smart City: \n",
        "images": []
    },
    "311": {
        "text": "lOMoARcPSD|26885763  \n \n46 | P a g e  \n \n \n•     Automatic Switching of Street lights. \n•     Maintenance Cost Reduction. \n•     Reduction of light pollution. \n•     Keep the city clean. \n•     Improve traffic and reduce parking times. \n•     Reduction of manpower. \n \nThe objectives of this paper are as follows: \n \n1.   To study smart cities of overall countries. \n2.   This review is focused on the last decades of smart cities. \n3.   Smart parking system using IoT. \n4.   A smart street lighting system using IoT. \n5.   Garbage monitoring system using IoT. \n \nIoT-based smart city \n \nThe following Figure provides and illustration of an IoT-based smart city. \n \n \nAn illustration of an IoT-based smart city \n \nThe IR sensors, LDR, PIC16F877A microcontroller, relay, UART, and Wi-Fi module make \nup the ingenious street lamp's construction. LDRs are light-dependent devices, and their \nblockage grows in the dark and shrinks when exposed to light. A light-dependent resistor has \na high resistance when maintained dull. The vehicle that is passing the streetlight is \nrecognized by an IR sensor. The streetlight bulb can be turned on and off during the transfer. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_311_img_1.jpeg"
        ]
    },
    "312": {
        "text": "lOMoARcPSD|26885763  \n \n47 | P a g e  \n \nThe Universal Asynchronous Receiver/Transmitter (UART) software on a microcontroller \nmanages the PC's connection to the associated streetlight framework. \n \n \nBlock diagram of smart street lighting system [5] \n \nThe clever street lamp's structure is made up of IR sensors, LDR, PIC16F877A \nmicrocontroller, relay, UART, and Wi-Fi module. LDRs are light-dependent devices whose \nblockage expands in darkness and decreases when light shines on them. When a light-\ndependent resistor is kept dull, its resistance is quite high. An IR \nsensor identifies the car that is driving past the streetlight. During the transfer, the streetlight \nbulb can be turned on and off. A microcontroller with software known as a UART (Universal \nAsynchronous Receiver/Transmitter) controls a PC's connection point to its connected \nstreetlight framework. \n \n \n \nBlock diagram of smart parking system [8] \n \nIt is divided into three areas. The parking area is the first, and it includes an IR sensor and \nArduino devices. With the aid of these devices, the client establishes a connection with the \nhalting location. Without the aid of an RFID card, the user is unable to enter the parking \nspace. The cloud-based web administrations, which serve as a go-between for the client and \nthe stopping region, are covered in the following section. Depending on whether a parking \nspace is available, the cloud is updated. The user can view the admin to see if the cloud \nservices are available, and the admin manages the cloud services. The user side is the third \nsection. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_312_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_312_img_2.png"
        ]
    },
    "313": {
        "text": "lOMoARcPSD|26885763  \n \n48 | P a g e  \n \n \n \nIoT potential application [9] \n \nA few administrations that work with the climate may emerge as a result of the IoT's successful \nimplementation. It can then open up a variety of contextualization and geo-mindfulness \noptions. Heterogeneous hardware permits the mechanization of comparative and customary \nworkouts using the IoT stage in homes and buildings. The execution of administrations via \nweb interfaces is undoubtedly possible when transforming items into the information of \napparatuses that are completely connected via the Internet. Huge numbers of sophisticated \nhome applications use sensor networks [9]. The government (at the municipal, state, and \nfederal levels) should deploy IoT services in all crucial issue areas to enhance government \ninformation systems and administration. \n \n \nIoT based interconnections \n \nThe latest developments in computerized innovations have made shrewd urban regions even \nmore shrewd than previously. A smart city has sensors for transportation systems, road \ncameras for perception systems, and other electronic components that are used in numerous \napplications. Additionally, this may increase the use of personal cell phones. This way, \ndifferent concepts like article highlights, givers, inspirations, and security standards should \nbe investigated while accounting for the diverse climate. \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_313_img_1.png",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_313_img_2.png"
        ]
    },
    "314": {
        "text": "lOMoARcPSD|26885763  \n \n49 | P a g e  \n \n \n \nIoT Architecture \n \nWe need to create a schematic architecture that allows us to quickly and easily depict the \ncomplete process in order to demonstrate the plausibility and suitability of this framework, as \nillustrated in fig. We can infer from the architecture that the system as a whole is a \ncombination of essentially just two different components. The first is a traffic control system, \nwhile the second is a street lighting operation  \n \n \nBlock diagram of parking system \n \nThe parking devices and sensors are then installed in their parking zones by a team of parking \ninstallation workers who then travel to the parking place. Things and personality-specific \ngadgets were where the Internet of Things (IoT) concept first emerged. \n \nThe devices might be monitored, controlled, or tested using distant Internet-connected PCs. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_314_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_314_img_2.png"
        ]
    },
    "315": {
        "text": "lOMoARcPSD|26885763  \n \n50 | P a g e  \n \n \nThe architecture of wireless sensor node \n \nWSNs make diverse genuine information available and can be used for many things, \nincluding government and natural administrations, healthcare, and many other things. \nAdditionally, WSNs and RFIDs can be combined to achieve a variety of goals, such as \ngathering data about the whereabouts of people and objects, developments, temperatures, and \nother things. A WSN is made up of distant sensor hubs that have a radio point of contact, an \nanalogue to digital converter (ADC), a number of sensors, memory, and a power source. .\n \nThe architecture of smart city planning \n \nThe IoT-based smart technologies are integrated for city data creation for developing the next-\ngeneration Super City, as depicted in Figure. Data from those smart systems are kept in big \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_315_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_315_img_2.jpeg"
        ]
    },
    "316": {
        "text": "lOMoARcPSD|26885763  \n \n51 | P a g e  \n \nstorage facilities so that they may be later examined for Super City planning. Government \nofficials can assess last year's electricity consumption and estimate the demand for electricity \nin the upcoming year using data supplied by smart homes. Municipalities can therefore \nimplement the required action to meet future needs and develop a long-term plan for creating \nnew dams to increase energy production. \n \n \nConceptual representation of an urban IoT network based on the web service approach \n \nWe briefly go over the connection layer innovations that can be used to connect the various \ncomponents of the IoT before we start outlining the web administration approach for the \ndesign of IoT administrations, which requires the organization of reasonable convention \nlayers in the various components of the organization, as displayed in the convention stacks \nportrayed in Fig. Last but not least, we show the varied configuration of devices that consent \nto an urban IoT. \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_316_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_316_img_2.jpeg"
        ]
    },
    "317": {
        "text": "lOMoARcPSD|26885763  \n \n52 | P a g e  \n \nProposed flow of energy efficient smart and intelligent street road lighting system \nThe information and energy flow of the proposed sustainable energy efficient smart street \nroad lighting system (EESSRLS) is depicted in Figure 1. It consists of a smart electric pole \nthat transmits light and motion information via sensors and actuators to the Master control \nunit (MCU), which computes intensity based on this information and tunes the LED lamps \nusing a PWM-based dimming system via a smart electric pole-mounted LED light controller \n(LLC). We utilize a separate sustainable power system for energy made up of a PV solar \npanel, battery storage system, and intelligent electric utility grid. \n \nResults and discussion \n \nThe following table shows the comparative study of the different methods used for IoT-based \nsmart cities: \n \nSr.No. Methods \nComponents \nAdvantages \nDisadvantages \n1.  Smart street lighting \nSystem using IoT. \nLDR, LED, Smart \nSensors, Arduino nano, \nLightning pole. \nAutomatic Switching \nof \nStreet lights. \nMore                   \nEnergy \nConsumption. \n2.  An illustration of an \nIoT-based smart city. \nArduino Nano, LDR, \nIR Sensors, LED, \nBuzzer, Ultrasonic \nSensor, Dustbins. \nLess crime. \nSecurity and data \nprivacy concerns. \n3.  System Architecture \nof smart parking \nsystem using IoT. \nArduino Nano, Cloud, \nIR Sensors, Parking \nSlot, LED, Lamp. \nDecreased \nmanagement costs \nand reduced \npollution. \nIt very well might be a \npiece mistaking for \nnew clients. \n4.  \nIoT Potential \nApplications for \nSmart Cities. \nArduino Nano, LDR, \nIR Sensors, LED, \nBuzzer, Ultrasonic \nSensor, Dustbins, \nCloud\nBetter transportation \nservice and safer \ncommunication. \nSecurity concerns and \ndata privacy concerns. \n5.  IoT based \ninterconnections. \nSmart Sensors, \nArduino nano, \nLightning pole. \nMinimize the human \nwork and effort. \nHighly dependent on \nthe Internet. \n6.  \nInternet      of    \nthings Schematic \nshowing of the system \narchitecture. \nLCD,          LDR,     \nSignal \nGenerator, Internet, \nDatabase,           \nServer, Street light. \nSmart cities are \ntechnology-driven, \nand most decision \nmaking \nIt starts in homes \nwhere you may suffer \nfrom a lack of privacy. \n",
        "images": []
    },
    "318": {
        "text": "lOMoARcPSD|26885763  \n \n53 | P a g e  \n \n7.  Smart parking system \nusing IoT technology. \nArduino Nano, IR \nSenso.rs, LED, Parking \nSlots. \nCost and time \nefficient solution. \nAvailability of the \nspace could be found \nonly after the car \nenters the parking slot. \n8.  The architecture of a \nwireless sensor node \nPower   Supply, \nSensors, \nTransceiver, \nMicrocontroller, ADC. \nReduced cost of in- \nhouse IT \nmanagement. \nIncreased costs for \ndata or service \nmigration and \nintegration. \n9.  \nSensor's deployment \nand smart systems \ndata \ngeneration \nAggregator, Water \nSystem, Vehicular   \nTraffic, \nFront \nScreen, Sensors, \nTemperature. \nCreation             of \nsafer \ncommunication. \nSignificant          \ncapital investment in \ntechnology is required. \n10.  \n \nConceptual \nrepresentation of an \nurban IoT network \nbased on the web \nservice approach \nWAN,     Control \nCenter, Gateway, Web \nFronted, Database \nManager. \nAutomatic and \nefficient urban \nmanagement. \nConsiderable increase \nin electronic waste. \n \n \nThe method of IoT based smart cities are displayed in the above table. In smart street \nlightning system using IoT streetlights are automatic switching of. More energy consumption \nin this method. An illustration of an IoT based smart city method help for less crime. To \ndecreased management costs and reduced pollution system architecture of smart parking \nsystem using IoT method developed. There are several applications of an IoT based smart \ncity that are explained in IoT potential applications for smart cities. \n \nIoT based interconnections minimize human work and effort. Internet of things schematic \nshowing of the system architecture method are technology driven and most decision making. \nTo reduce the cost of in-house IT management the architecture of a wireless sensor node \nmethod is used. Smart parking systems using IoT technology method is solution to reduce \ntime and humans’ effort as well as the overall cost of the fuel burnt in search of the parking \nspace. The main idea is the creation of smart parking using the internet of things and \nultrasonic sensors, where available parking places display in web application. \n \n5.4.4. Smart Healthcare \nThe healthcare monitoring systems has emerged as one of the most vital system and   \nbecame technology oriented from the past decade. Humans are facing a problem of \nunexpected death due to various illness which is because of  lack of medical care to the \npatients at right time. The primary goal was to develop a reliable patient monitoring system \nusing IoT so that the healthcare professionals can monitor their patients, who are either \n",
        "images": []
    },
    "319": {
        "text": "lOMoARcPSD|26885763  \n \n54 | P a g e  \n \nhospitalized or at home using an IoT based integrated healthcare system with the view of \nensuring patients are cared for better. A mobile device based wireless healthcare monitoring \nsystem was developed which can provide real  time online information about physiological \nconditions of a patient mainly consists of sensors, the data acquisition unit, microcontroller \n(i.e., Arduino), and programmed with a software (i.e., JAVA). The patient’s temperature, \nheart beat rate, EEG data are monitored, displayed and stored by the system and sent to the \ndoctor’s mobile containing the application. Thus, IoT based patient monitoring system \neffectively monitor patient’s health status and save life on time. \n \nINTRODUCTION \nThe increased use of mobile technologies and smart devices in the area of health has caused  \ngreat  impact  on  the world.  Health  experts  are increasingly taking  advantage of the \nbenefits these technologies bring, thus generating a significant improvement in health care in \nclinical settings. Likewise, countless ordinary users are being served from the advantages of \nthe M-Health (Mobile Health) applications and E-Health (health care supported by ICT) to \nimprove, help and assist their health. \n \nAccording to the constitutions of   World Health Organization (WHO) the highest attainable \nstandard of health is a fundamental right for an individual. As we are truly inspired by this, \nwe attempt to propose an innovative system that puts forward a smart patient health tracking \nsystem that uses sensors to track patient vital parameters and uses internet to update the \ndoctors so that they can help in case of any issues at the earliest preventing death rates. \n \nPatient Health monitoring using IoT is a technology to enable monitoring of patients \noutside of conventional clinical settings (e.g. in the home), which may increase access to \ncare and decrease healthcare delivery costs. This can significantly improve an individual's \nquality of life. It allows patients to maintain independence, prevent complications, and \nminimize personal costs. This system facilitates these goals by delivering care right to \nthe home. In addition, patients and their family members feel comfort knowing that they \nare being monitored and will be supported if a problem arises. \n \nSignal Conditioning Unit \nThis sensor is a cost-effective board used to measure the electrical activity of the heart. \nThis electrical activity can be charted as an ECG or Electrocardiogram and output as an \nanalog reading. ECGs can be extremely noisy, the AD8232 Single Lead Heart Rate \nMonitor acts as an \nop amp to help obtain a clear signal from the PR and QT Intervals easily. \n \n",
        "images": []
    },
    "320": {
        "text": "lOMoARcPSD|26885763  \n \n55 | P a g e  \n \n \nPosition of Sensor Pads Input \n \nBlock Diagram  \n \nBlock diagram of sensors connected with the PC \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_320_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_320_img_2.png"
        ]
    },
    "321": {
        "text": "lOMoARcPSD|26885763  \n \n56 | P a g e  \n \n \n \nBlock diagram of Health monitoring system \n \n \nRESULTS AND DISCUSSION \n \nOperating Mechanism \n \nSTEP 1: The Heartbeat sensor is fixed to the patient’s finger. This contains an IR sensor in it \n.Every pumping we get pulse from that sensor. This sensor output is given to the arduino via \nSignal conditioning unit for amplification \n \n \nHeart beat sensor \nSTEP 2 \n \nNTC type thermistor is used as a temperature sensor. This temperature sensor output varies \nbased on the temperature, this output is also given to arduino. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_321_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_321_img_2.jpeg"
        ]
    },
    "322": {
        "text": "lOMoARcPSD|26885763  \n \n57 | P a g e  \n \n \nTemperature sensor \nSTEP 3 \n \nEEG sensor is a cost-effective board used to measure the electrical activity of the heart. This \nelectrical activity can be charted as an ECG or Electrocardiogram output as an analog \nreading. ECGs can be extremely noisy, the AD8232 Single Lead Heart Rate Monitor acts as \nan op-amp to help obtain a clear signal from the PR and QT Intervals easily and connected \nto arduino. \n \n \nEEG sensor \nSTEP 4 \n \nAll these values are transferred to PC via RS 232 and by using the URL,it is transferred to \nthe mobile app created. \n \n \nOutput in LCD \nOutput in the Mobile Application: \n \nThe output is displayed in the form of string in a particular interval of time. The application \nis very simple as it just displays the analog values followed by a statement describing the \nkind of value displayed. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_322_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_322_img_2.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_322_img_3.jpeg"
        ]
    },
    "323": {
        "text": "lOMoARcPSD|26885763  \n \n58 | P a g e  \n \n \nOutput displayed in the mobile application device \n \nTesting and findings health care unit \nThe Patient Health Monitoring System developed is tested using various persons  with  \nnormal  to  abnormal  health  conditions.  The  various  testing  and findings producing \nresults with minimal error rate and the observations are listed below. \n \nTemperature Findings \nThe NC type thermistor used is programmed to display the value at room temperature for \ndemo purposes with minimal error of + or – 5. \n \n \ntemperature sensor \n \nTestings \nNormal value \nObserved value \nError rate \nPerson 1 \n24 \n28 \n+4 \nPerson 2 \n24 \n30 \n+6 \nObserved temperature readings \nECG Findings \n \nThe IR sensor is used to measure the pulse rate in the error range of + or – 6. \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_323_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_323_img_2.jpeg"
        ]
    },
    "324": {
        "text": "lOMoARcPSD|26885763  \n \n59 | P a g e  \n \n \nECG measurement sensor \n \nTestings \nNormal value \nObserved value \nError rate \nPerson 1 \n74-78 \n72 \n-2 \nPerson 2 \n74-78 \n84 \n+6 \nECG values observed from different person \n \n EEG Findings \nThe EEG sensor is used with electrodes with error rate indicating the status as active or \ninactive. \n \n \nEEG measurement sensor \n \nTestings \nNormal value \nObserved valued \nStatus \nPerson 1 \n100-300 \n131 \nActive \nPerson 2 \n100-300 \n165 \nActive \nTable 4.3 EEG values observed from different person \n \nData display in the mobile application unit \nThe day to day vital parameters such as heart beat, body temperature, EEG signals can be \ndisplayed in the mobile phone and the same can be send to the doctor during emergency \nsituations. \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_324_img_1.jpeg",
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_324_img_2.jpeg"
        ]
    },
    "325": {
        "text": "lOMoARcPSD|26885763  \n \n60 | P a g e  \n \n \nOutput displayed in the mobile application unit \n \n \n \n",
        "images": [
            "C:/Users/Admin/OneDrive/PYTHON/PROJECT\\extracted_results\\page_325_img_1.jpeg"
        ]
    }
}